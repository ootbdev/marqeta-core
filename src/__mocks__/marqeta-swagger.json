{
  "swagger" : "2.0",
  "info" : {
    "version" : "3.0.0"
  },
  "basePath" : "/v3",
  "tags" : [ {
    "name" : "token service gateway"
  }, {
    "name" : "bulk issuances"
  }, {
    "name" : "auth controls"
  }, {
    "name" : "funding sources"
  }, {
    "name" : "cardholder balances"
  }, {
    "name" : "card products"
  }, {
    "name" : "transactions"
  }, {
    "name" : "ping"
  }, {
    "name" : "webhooks"
  }, {
    "name" : "push to card"
  }, {
    "name" : "internal mcc groups"
  }, {
    "name" : "commando modes"
  }, {
    "name" : "msa orders"
  }, {
    "name" : "direct deposit accounts"
  }, {
    "name" : "digital wallet provision requests"
  }, {
    "name" : "account holder groups"
  }, {
    "name" : "offers"
  }, {
    "name" : "real time fee groups"
  }, {
    "name" : "pins"
  }, {
    "name" : "direct deposits"
  }, {
    "name" : "card transitions"
  }, {
    "name" : "fee transfers"
  }, {
    "name" : "program transfers"
  }, {
    "name" : "mcc groups"
  }, {
    "name" : "chargebacks"
  }, {
    "name" : "accepted countries"
  }, {
    "name" : "gpa orders"
  }, {
    "name" : "velocity controls"
  }, {
    "name" : "stores"
  }, {
    "name" : "businesses"
  }, {
    "name" : "auto reloads"
  }, {
    "name" : "business transitions"
  }, {
    "name" : "offer orders"
  }, {
    "name" : "digital wallet token transitions"
  }, {
    "name" : "merchants"
  }, {
    "name" : "users"
  }, {
    "name" : "simulate"
  }, {
    "name" : "fees"
  }, {
    "name" : "digital wallet tokens"
  }, {
    "name" : "campaigns"
  }, {
    "name" : "kyc"
  }, {
    "name" : "peer transfers"
  }, {
    "name" : "cards"
  }, {
    "name" : "user transitions"
  }, {
    "name" : "program reserve"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/acceptedcountries" : {
      "get" : {
        "tags" : [ "accepted countries" ],
        "summary" : "Lists all accepted countries",
        "description" : "",
        "operationId" : "getAcceptedcountries",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of accepted countries to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "whitelist",
          "in" : "query",
          "description" : "Whitelist",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "search_type",
          "in" : "query",
          "description" : "Search type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/AcceptedCountriesListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server failure"
          }
        }
      },
      "post" : {
        "tags" : [ "accepted countries" ],
        "summary" : "Creates an accepted country",
        "description" : "",
        "operationId" : "postAcceptedcountries",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Accepted country object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/accepted_countries_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/accepted_countries_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/acceptedcountries/{token}" : {
      "get" : {
        "tags" : [ "accepted countries" ],
        "summary" : "Returns a specific accepted country",
        "description" : "",
        "operationId" : "getAcceptedcountriesToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Accepted country token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/accepted_countries_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server failure"
          },
          "404" : {
            "description" : "Accepted country not found"
          }
        }
      },
      "put" : {
        "tags" : [ "accepted countries" ],
        "summary" : "Updates an accepted country",
        "description" : "",
        "operationId" : "putAcceptedcountriesToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Accepted country",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/accepted_countries_update_model"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/accepted_countries_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/accountholdergroups" : {
      "get" : {
        "tags" : [ "account holder groups" ],
        "summary" : "Lists account holder groups",
        "description" : "",
        "operationId" : "getAccountholdergroups",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve. Count can be between 1 - 10 items.",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Indicates from what row to start returning data.",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime.",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/AccountHolderGroupListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "account holder groups" ],
        "summary" : "Creates an account holder group object",
        "description" : "",
        "operationId" : "postAccountholdergroups",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Account holder group object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/account_holder_group_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/account_holder_group_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/accountholdergroups/{token}" : {
      "get" : {
        "tags" : [ "account holder groups" ],
        "summary" : "Returns a specific account holder group object",
        "description" : "",
        "operationId" : "getAccountholdergroupsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Account holder group token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/account_holder_group_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Auto reload not found"
          }
        }
      },
      "put" : {
        "tags" : [ "account holder groups" ],
        "summary" : "Updates an account holder group object",
        "description" : "",
        "operationId" : "putAccountholdergroupsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Account holder group update object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/account_holder_group_update_request"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/account_holder_group_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/authcontrols" : {
      "get" : {
        "tags" : [ "auth controls" ],
        "summary" : "Lists all global auth control exceptions for the program",
        "description" : "",
        "operationId" : "getAuthcontrols",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "card_product",
          "in" : "query",
          "description" : "Card product token. Use \"null\" to get auth controls that are not associated with any card product.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "User token. Use \"null\" to get auth controls that are not associated with any user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve. Count can be between 1 - 10 items.",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Indicates from what row to start returning data.",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime.",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/AuthControlListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "auth controls" ],
        "summary" : "Creates an auth control exception",
        "description" : "",
        "operationId" : "postAuthcontrols",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Auth control object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/auth_control_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/auth_control_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/authcontrols/exemptmids" : {
      "get" : {
        "tags" : [ "auth controls" ],
        "summary" : "Lists all auth control exempted MIDs for the program",
        "description" : "",
        "operationId" : "getAuthcontrolsExemptmids",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "card_product",
          "in" : "query",
          "description" : "Card product token. Use \"null\" to get auth controls that are not associated with any card product.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "User token. Use \"null\" to get auth controls that are not associated with any user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve. Count can be between 1 - 10 items.",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Indicates from what row to start returning data.",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime.",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/AuthControlExemptMidsListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "auth controls" ],
        "summary" : "Creates an auth control for exempting MIDs",
        "description" : "",
        "operationId" : "postAuthcontrolsExemptmids",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Auth control exempt MID object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/auth_control_exempt_mids_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/auth_control_exempt_mids_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/authcontrols/exemptmids/{token}" : {
      "get" : {
        "tags" : [ "auth controls" ],
        "summary" : "Returns a specific auth control exemptmids",
        "description" : "",
        "operationId" : "getAuthcontrolsExemptmidsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Auth control token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/auth_control_exempt_mids_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Auth control exception MIDs not found"
          }
        }
      },
      "put" : {
        "tags" : [ "auth controls" ],
        "summary" : "Updates the status an auth control exemptmids",
        "description" : "",
        "operationId" : "putAuthcontrolsExemptmidsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Auth control token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/auth_control_exempt_mids_update_request"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/authcontrols/{token}" : {
      "get" : {
        "tags" : [ "auth controls" ],
        "summary" : "Returns a specific auth control exception",
        "description" : "",
        "operationId" : "getAuthcontrolsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Auth control token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/auth_control_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Auth control not found"
          }
        }
      },
      "put" : {
        "tags" : [ "auth controls" ],
        "summary" : "Updates an auth control exception",
        "description" : "",
        "operationId" : "putAuthcontrolsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Auth control token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Auth control object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/auth_control_update_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/auth_control_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/autoreloads" : {
      "get" : {
        "tags" : [ "auto reloads" ],
        "summary" : "Lists all auto reloads for the program",
        "description" : "",
        "operationId" : "getAutoreloads",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "card_product",
          "in" : "query",
          "description" : "Card product token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "user_token",
          "in" : "query",
          "description" : "User token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "business_token",
          "in" : "query",
          "description" : "Business token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve. Count can be between 1 - 10 items.",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Indicates from what row to start returning data.",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime.",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/AutoReloadListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "auto reloads" ],
        "summary" : "Creates an auto reload object",
        "description" : "",
        "operationId" : "postAutoreloads",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Auto reload object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/auto_reload_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/auto_reload_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/autoreloads/{token}" : {
      "get" : {
        "tags" : [ "auto reloads" ],
        "summary" : "Returns a specific auto reload object",
        "description" : "",
        "operationId" : "getAutoreloadsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Auto reload token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/auto_reload_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Auto reload not found"
          }
        }
      },
      "put" : {
        "tags" : [ "auto reloads" ],
        "summary" : "Updates a specific auto reload object",
        "description" : "",
        "operationId" : "putAutoreloadsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Auto reload object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/auto_reload_update_model"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/auto_reload_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/balances/{token}" : {
      "get" : {
        "tags" : [ "cardholder balances" ],
        "summary" : "Returns account balances for a cardholder",
        "description" : "",
        "operationId" : "getBalancesToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "User or Business token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/cardholder_balances"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/balances/{token}/msas" : {
      "get" : {
        "tags" : [ "cardholder balances" ],
        "summary" : "Returns a merchant-specific account balance",
        "description" : "",
        "operationId" : "getBalancesTokenMsas",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "User or Business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of restrictions to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "enum" : [ "name" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/cardholder_msa_balance"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/bulkissuances" : {
      "get" : {
        "tags" : [ "bulk issuances" ],
        "summary" : "Lists all bulk issuance requests",
        "description" : "",
        "operationId" : "getBulkissuances",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of requests to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/BulkCardOrderListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "bulk issuances" ],
        "summary" : "Creates a bulk issuance request for cards",
        "description" : "",
        "operationId" : "postBulkissuances",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/bulk_issuance_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/bulk_issuance_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/bulkissuances/{token}" : {
      "get" : {
        "tags" : [ "bulk issuances" ],
        "summary" : "Returns a bulk issuance request",
        "description" : "",
        "operationId" : "getBulkissuancesToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Bulk issuance token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/bulk_issuance_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Bulk issuance request not found"
          }
        }
      }
    },
    "/businesses" : {
      "get" : {
        "tags" : [ "businesses" ],
        "summary" : "Lists all businesses",
        "description" : "",
        "operationId" : "getBusinesses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of users to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "business_name_dba",
          "in" : "query",
          "description" : "Business name DBA",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "business_name_legal",
          "in" : "query",
          "description" : "Business name legal",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "search_type",
          "in" : "query",
          "description" : "Search type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/BusinessCardHolderListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "businesses" ],
        "summary" : "Creates a business",
        "description" : "",
        "operationId" : "postBusinesses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/BusinessCardHolderModel"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/business_card_holder_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/businesses/lookup" : {
      "post" : {
        "tags" : [ "businesses" ],
        "summary" : "Returns a specific business",
        "description" : "",
        "operationId" : "postBusinessesLookup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DDARequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/BusinessCardHolderModel"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Business not found"
          }
        }
      }
    },
    "/businesses/{parent_token}/children" : {
      "get" : {
        "tags" : [ "businesses" ],
        "summary" : "Lists all children of a parent business",
        "description" : "",
        "operationId" : "getBusinessesParenttokenChildren",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of users to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "parent_token",
          "in" : "path",
          "description" : "Token of parent business",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/UserCardHolderListResponse"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/businesses/{token}" : {
      "get" : {
        "tags" : [ "businesses" ],
        "summary" : "Returns a specific business",
        "description" : "",
        "operationId" : "getBusinessesToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/business_card_holder_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Business not found"
          }
        }
      },
      "put" : {
        "tags" : [ "businesses" ],
        "summary" : "Updates a specific business",
        "description" : "",
        "operationId" : "putBusinessesToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Business token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Business object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BusinessCardHolderUpdateModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/BusinessCardHolderModel"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/businesses/{token}/notes" : {
      "get" : {
        "tags" : [ "businesses" ],
        "summary" : "Lists business notes",
        "description" : "",
        "operationId" : "getBusinessesTokenNotes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of notes to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "created_by",
          "in" : "query",
          "description" : "Created by",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "created_by_user_role",
          "in" : "query",
          "description" : "Comma-delimited list of created by user roles",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "include_private",
          "in" : "query",
          "description" : "Include private notes and private fields in note response",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "search_type",
          "in" : "query",
          "description" : "Search type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CardHolderNoteListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Business not found"
          }
        }
      },
      "post" : {
        "tags" : [ "businesses" ],
        "summary" : "Creates a note for a business",
        "description" : "",
        "operationId" : "postBusinessesTokenNotes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/cardholder_note_request_model"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "description" : "Business token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/cardholder_note_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      }
    },
    "/businesses/{token}/notes/{notes_token}" : {
      "put" : {
        "tags" : [ "businesses" ],
        "summary" : "Updates a specific note for a business",
        "description" : "",
        "operationId" : "putBusinessesTokenNotesNotestoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/cardholder_note_update_request_model"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "description" : "Business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "notes_token",
          "in" : "path",
          "description" : "Notes token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/cardholder_note_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      }
    },
    "/businesses/{token}/ssn" : {
      "get" : {
        "tags" : [ "businesses" ],
        "summary" : "Returns a specific business proprietor's SSN",
        "description" : "",
        "operationId" : "getBusinessesTokenSsn",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "full_ssn",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ssn_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/businesstransitions" : {
      "post" : {
        "tags" : [ "business transitions" ],
        "summary" : "Creates a business transition",
        "description" : "",
        "operationId" : "postBusinesstransitions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/BusinessTransitionRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/BusinessTransitionResponse"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "412" : {
            "description" : "Pre-condition setup issue"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/businesstransitions/business/{business_token}" : {
      "get" : {
        "tags" : [ "business transitions" ],
        "summary" : "Returns transitions for a given business",
        "description" : "",
        "operationId" : "getBusinesstransitionsBusinessBusinesstoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "business_token",
          "in" : "path",
          "description" : "Business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of business transitions to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/BusinessTransitionListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/businesstransitions/{token}" : {
      "get" : {
        "tags" : [ "business transitions" ],
        "summary" : "Returns a business transition",
        "description" : "",
        "operationId" : "getBusinesstransitionsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Transition token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/BusinessTransitionResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Cardholder not found"
          }
        }
      }
    },
    "/campaigns" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "Lists all campaigns",
        "description" : "",
        "operationId" : "getCampaigns",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve. Recommended max is 10.",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Indicates from what row to start returning data. Used in conjunction with count.",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Field on which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or CreatedTime.",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CampaignListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Creates a campaign",
        "description" : "",
        "operationId" : "postCampaigns",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/campaign_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Campaign created successfully",
            "schema" : {
              "$ref" : "#/definitions/campaign_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/campaigns/{token}" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "Returns a specific campaign",
        "description" : "",
        "operationId" : "getCampaignsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Campaign token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/campaign_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Campaign not found"
          }
        }
      },
      "put" : {
        "tags" : [ "campaigns" ],
        "summary" : "Updates a specific campaign",
        "description" : "",
        "operationId" : "putCampaignsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Campaign token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/campaign_update_model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/campaign_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Cannot update default merchant campaign"
          }
        }
      }
    },
    "/campaigns/{token}/stores" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "Lists all stores associated with a campaign",
        "description" : "",
        "operationId" : "getCampaignsTokenStores",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Campaign token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve. Recommended max is 10.",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Indicates from what row to start returning data. Used in conjunction with count.",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Field on which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or CreatedTime.",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/StoreListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/cardproducts" : {
      "get" : {
        "tags" : [ "card products" ],
        "summary" : "Lists all card products",
        "description" : "",
        "operationId" : "getCardproducts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve. Count can be between 1 - 10 items.",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Indicates from what row to start returning data.",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CardProductListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "card products" ],
        "summary" : "Creates a card product",
        "description" : "",
        "operationId" : "postCardproducts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Card product object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/card_product_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/card_product_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/cardproducts/{token}" : {
      "get" : {
        "tags" : [ "card products" ],
        "summary" : "Returns a specific card product",
        "description" : "",
        "operationId" : "getCardproductsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Card product token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_product_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Card product not found"
          }
        }
      },
      "put" : {
        "tags" : [ "card products" ],
        "summary" : "Updates a specific card product",
        "description" : "",
        "operationId" : "putCardproductsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Card product token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Card product object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/card_product_update_model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_product_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/cards" : {
      "get" : {
        "tags" : [ "cards" ],
        "summary" : "Lists cards by the last 4 digits",
        "description" : "",
        "operationId" : "getCards",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of cards to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "last_four",
          "in" : "query",
          "description" : "Last four digits of card number",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CardListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "cards" ],
        "summary" : "Creates a card",
        "description" : "",
        "operationId" : "postCards",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/card_request"
          }
        }, {
          "name" : "show_cvv_number",
          "in" : "query",
          "description" : "Show CVV",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "show_pan",
          "in" : "query",
          "description" : "Show PAN",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/cards/barcode/{barcode}" : {
      "get" : {
        "tags" : [ "cards" ],
        "summary" : "Returns a card's metadata",
        "description" : "",
        "operationId" : "getCardsBarcodeBarcode",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "barcode",
          "in" : "path",
          "description" : "Barcode",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Card does not exist"
          }
        }
      }
    },
    "/cards/getbypan" : {
      "post" : {
        "tags" : [ "cards" ],
        "summary" : "Returns user and card tokens for the specified PAN",
        "description" : "",
        "operationId" : "postCardsGetbypan",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/pan_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/pan_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/cards/merchant/{merchant_token}" : {
      "get" : {
        "tags" : [ "cards" ],
        "summary" : "Returns a merchant onboarding card",
        "description" : "",
        "operationId" : "getCardsMerchantMerchanttoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "merchant_token",
          "in" : "path",
          "description" : "Merchant token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Card does not exist"
          }
        }
      },
      "post" : {
        "tags" : [ "cards" ],
        "summary" : "Creates a merchant onboarding card",
        "description" : "",
        "operationId" : "postCardsMerchantMerchanttoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "merchant_token",
          "in" : "path",
          "description" : "Merchant token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/merchant_card_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/cards/merchant/{merchant_token}/showpan" : {
      "get" : {
        "tags" : [ "cards" ],
        "summary" : "Returns a specific card - PAN visible",
        "description" : "",
        "operationId" : "getCardsMerchantMerchanttokenShowpan",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "merchant_token",
          "in" : "path",
          "description" : "Merchant token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "show_cvv_number",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Card does not exist"
          }
        }
      }
    },
    "/cards/user/{token}" : {
      "get" : {
        "tags" : [ "cards" ],
        "summary" : "Lists all cards for a specific user",
        "description" : "",
        "operationId" : "getCardsUserToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/cards/{token}" : {
      "get" : {
        "tags" : [ "cards" ],
        "summary" : "Returns a specific card",
        "description" : "",
        "operationId" : "getCardsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Card token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "Object to expand",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Card not found"
          }
        }
      },
      "put" : {
        "tags" : [ "cards" ],
        "summary" : "Updates a specific card",
        "description" : "",
        "operationId" : "putCardsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Card token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/card_update_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/cards/{token}/showpan" : {
      "get" : {
        "tags" : [ "cards" ],
        "summary" : "Returns a specific card - PAN visible",
        "description" : "",
        "operationId" : "getCardsTokenShowpan",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Card token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "show_cvv_number",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Card not found"
          }
        }
      }
    },
    "/cardtransitions" : {
      "post" : {
        "tags" : [ "card transitions" ],
        "summary" : "Creates a card transition object",
        "description" : "",
        "operationId" : "postCardtransitions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/card_transition_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_transition_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "422" : {
            "description" : "Cardholder not active"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/cardtransitions/card/{token}" : {
      "get" : {
        "tags" : [ "card transitions" ],
        "summary" : "Lists all card transitions",
        "description" : "",
        "operationId" : "getCardtransitionsCardToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Card token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of card transitions to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CardTransitionListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/cardtransitions/{token}" : {
      "get" : {
        "tags" : [ "card transitions" ],
        "summary" : "Returns a card transition object",
        "description" : "",
        "operationId" : "getCardtransitionsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Card transition token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_transition_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Transition not found"
          }
        }
      }
    },
    "/chargebacks" : {
      "get" : {
        "tags" : [ "chargebacks" ],
        "summary" : "List all chargebacks",
        "description" : "",
        "operationId" : "getChargebacks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of chargebacks to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "network_reference_id",
          "in" : "query",
          "description" : "Network reference ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "transaction_token",
          "in" : "query",
          "description" : "Transaction token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "Amount",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "states",
          "in" : "query",
          "description" : "Comma-delimited list of chargeback states to display e.g. INITIATED | REPRESENTMENT | PREARBITRATION | ARBITRATION | CASE_WON | CASE_LOST | NETWORK_REJECTED | WITHDRAWN | WRITTEN_OFF_ISSUER | WRITTEN_OFF_PROGRAM",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        }, {
          "name" : "network_case_id",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ChargebackListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "chargebacks" ],
        "summary" : "Creates a chargeback",
        "description" : "",
        "operationId" : "postChargebacks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/chargeback_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/chargeback_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "422" : {
            "description" : "Unable to return funds back to cardholder"
          },
          "412" : {
            "description" : "Pre-condition failed. Chargeback amount is greater than user GPA/MSA balance"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/chargebacks/allocationacknowledgement" : {
      "post" : {
        "tags" : [ "chargebacks" ],
        "summary" : "Creates a chargeback allocation acknowledgement",
        "description" : "",
        "operationId" : "postChargebackAllocationAcknowledgment",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/chargeback_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/chargeback_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/chargebacks/transitions" : {
      "post" : {
        "tags" : [ "chargebacks" ],
        "summary" : "Creates a chargeback transition",
        "description" : "",
        "operationId" : "postChargebacksTransitions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/chargeback_transition_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/chargeback_transition_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "422" : {
            "description" : "Unable to perform chargeback transition"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/chargebacks/transitions/{token}" : {
      "get" : {
        "tags" : [ "chargebacks" ],
        "summary" : "Returns a specific chargeback transition",
        "description" : "",
        "operationId" : "getChargebacksTransitionsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Chargeback transition token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/chargeback_transition_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Transition not found"
          }
        }
      }
    },
    "/chargebacks/{chargeback_token}/transitions" : {
      "get" : {
        "tags" : [ "chargebacks" ],
        "summary" : "Lists all chargeback transitions that are related to a chargeback",
        "description" : "",
        "operationId" : "getChargebacksChargebacktokenTransitions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of transitions to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        }, {
          "name" : "chargeback_token",
          "in" : "path",
          "description" : "Chargeback token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ChargebackTransitionListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/chargebacks/{token}" : {
      "get" : {
        "tags" : [ "chargebacks" ],
        "summary" : "Returns a specific chargeback",
        "description" : "",
        "operationId" : "getChargebacksToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/chargeback_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Chargeback not found"
          }
        }
      },
      "put" : {
        "tags" : [ "chargebacks" ],
        "summary" : "Updates chargeback data",
        "description" : "",
        "operationId" : "putChargebacksToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ChargebackUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/chargeback_response"
            }
          },
          "400" : {
            "description" : "Chargeback not found"
          },
          "422" : {
            "description" : "Unable to update chargeback"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/chargebacks/{token}/grantprovisionalcredit" : {
      "put" : {
        "tags" : [ "chargebacks" ],
        "summary" : "Grants provisional credit",
        "description" : "",
        "operationId" : "putChargebacksTokenGrantprovisionalcredit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/chargeback_response"
            }
          },
          "400" : {
            "description" : "Chargeback not found"
          },
          "422" : {
            "description" : "Unable to grant provisional credit"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/chargebacks/{token}/reverseprovisionalcredit" : {
      "put" : {
        "tags" : [ "chargebacks" ],
        "summary" : "Reverses provisional credit",
        "description" : "",
        "operationId" : "putChargebacksTokenReverseprovisionalcredit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/chargeback_response"
            }
          },
          "400" : {
            "description" : "Chargeback not found; chargeback at terminal state"
          },
          "422" : {
            "description" : "Unable to reverse provisional credit"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/commandomodes" : {
      "get" : {
        "tags" : [ "commando modes" ],
        "summary" : "Lists all commando mode control sets",
        "description" : "",
        "operationId" : "getCommandomodes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of commando modes to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CommandoModeListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/commandomodes/transitions/{token}" : {
      "get" : {
        "tags" : [ "commando modes" ],
        "summary" : "Returns a specific commando mode transition",
        "description" : "",
        "operationId" : "getCommandomodesTransitionsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Commando mode transition token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/commando_mode_transition_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Transition not found"
          }
        }
      }
    },
    "/commandomodes/{commandomode_token}/transitions" : {
      "get" : {
        "tags" : [ "commando modes" ],
        "summary" : "Lists all commando mode transitions related to a commando mode control set",
        "description" : "",
        "operationId" : "getCommandomodesCommandomodetokenTransitions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of transitions to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        }, {
          "name" : "commandomode_token",
          "in" : "path",
          "description" : "Commando mode token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CommandoModeTransitionListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/commandomodes/{token}" : {
      "get" : {
        "tags" : [ "commando modes" ],
        "summary" : "Returns a specific commando mode control set",
        "description" : "",
        "operationId" : "getCommandomodesToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/commando_mode_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Commando mode not found"
          }
        }
      }
    },
    "/depositaccounts" : {
      "post" : {
        "tags" : [ "direct deposit accounts" ],
        "summary" : "Creates new direct deposit account for cardholder.",
        "description" : "",
        "operationId" : "createAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Create direct deposit account for cardholder",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/direct_deposit_account_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/direct_deposit_account_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/depositaccounts/account/{account_number}/user" : {
      "get" : {
        "tags" : [ "direct deposit accounts" ],
        "summary" : "Get User for Plain Text Account Number",
        "description" : "",
        "operationId" : "getUserForDirectDepositAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "account_number",
          "in" : "path",
          "description" : "Get user associated with direct deposit account number",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/direct_deposit_account_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/depositaccounts/transitions" : {
      "post" : {
        "tags" : [ "direct deposit accounts" ],
        "summary" : "Creates new transition for a direct deposit account.",
        "description" : "",
        "operationId" : "createTransition",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Create transition for direct deposit account",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/direct_deposit_account_transition_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/direct_deposit_account_transition_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/depositaccounts/transitions/{token}" : {
      "get" : {
        "tags" : [ "direct deposit accounts" ],
        "summary" : "Get direct deposit account transition.",
        "description" : "",
        "operationId" : "getDirectDepositAccountTransition",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Get specific direct deposit account transition",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/direct_deposit_account_transition_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/depositaccounts/user/{token}" : {
      "get" : {
        "tags" : [ "direct deposit accounts" ],
        "summary" : "List all specific direct deposit accounts.",
        "description" : "",
        "operationId" : "getUserDirectDepositAccounts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of users to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Direct deposit account status",
          "required" : false,
          "type" : "string",
          "enum" : [ "ACTIVE", "SUSPENDED", "TERMINATED", "UNSUPPORTED", "UNACTIVATED" ]
        }, {
          "name" : "token",
          "in" : "path",
          "description" : "Get specific direct deposit account",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/DirectDepositAccountListResponse"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/depositaccounts/{token}" : {
      "get" : {
        "tags" : [ "direct deposit accounts" ],
        "summary" : "Get direct deposit account.",
        "description" : "",
        "operationId" : "getDirectDepositAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Get specific direct deposit account",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/direct_deposit_account_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "put" : {
        "tags" : [ "direct deposit accounts" ],
        "summary" : "Update direct deposit account.",
        "description" : "",
        "operationId" : "update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Update direct deposit account",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DepositAccountUpdateRequest"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/direct_deposit_account_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/depositaccounts/{user_token}/transitions" : {
      "get" : {
        "tags" : [ "direct deposit accounts" ],
        "summary" : "Get direct deposit account transition list for card holder.",
        "description" : "",
        "operationId" : "getTransitionList",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of users to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        }, {
          "name" : "user_token",
          "in" : "path",
          "description" : "Get direct deposit account transition list for user",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/direct_deposit_account_transition_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/digitalwalletprovisionrequests/androidpay" : {
      "post" : {
        "tags" : [ "digital wallet provision requests" ],
        "summary" : "Validates and creates Android-specific provisioning request data",
        "description" : "",
        "operationId" : "postDigitalwalletprovisionrequestsAndroidpay",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/digital_wallet_android_pay_provision_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/digital_wallet_android_pay_provision_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Card not found"
          }
        }
      }
    },
    "/digitalwalletprovisionrequests/applepay" : {
      "post" : {
        "tags" : [ "digital wallet provision requests" ],
        "summary" : "Validates Apple certificates and creates Apple-specific provisioning request data",
        "description" : "",
        "operationId" : "postDigitalwalletprovisionrequestsApplepay",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/digital_wallet_apple_pay_provision_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/digital_wallet_apple_pay_provision_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Card not found"
          }
        }
      }
    },
    "/digitalwallettokens" : {
      "get" : {
        "tags" : [ "digital wallet tokens" ],
        "summary" : "Returns digital wallet tokens",
        "description" : "",
        "operationId" : "getDigitalwallettokens",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of digital wallet tokens to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "Start date (yyyy-MM-dd)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "End date (yyyy-MM-dd)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pan_reference_id",
          "in" : "query",
          "description" : "PAN reference ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "token_reference_id",
          "in" : "query",
          "description" : "Token reference ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "correlation_id",
          "in" : "query",
          "description" : "Correlation ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "token_type",
          "in" : "query",
          "description" : "Comma-delimited list of digital wallet token types to display e.g. DEVICE_SECURE_ELEMENT | MERCHANT_CARD_ON_FILE | DEVICE_CLOUD_BASED | ECOMMERCE_DIGITAL_WALLET | PSEUDO_ACCOUNT",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "token_requestor_name",
          "in" : "query",
          "description" : "Comma-delimited list of digital wallet token wallet providers to display e.g. APPLE_PAY | ANDROID_PAY| SAMSUNG_PAY | MICROSOFT_PAY | VISA_CHECKOUT | FACEBOOK | NETFLIX | UNKNOWN",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Comma-delimited list of digital wallet token states to display e.g. REQUESTED | REQUEST_DECLINED | TERMINATED | SUSPENDED | ACTIVE",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "embed",
          "in" : "query",
          "description" : "Embed",
          "required" : false,
          "type" : "string",
          "enum" : [ "user" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/DigitalWalletTokenListResponse"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/digitalwallettokens/card/{card_token}" : {
      "get" : {
        "tags" : [ "digital wallet tokens" ],
        "summary" : "Returns a list of digital wallet tokens for the specified card",
        "description" : "",
        "operationId" : "getDigitalwallettokensCardCardtoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "card_token",
          "in" : "path",
          "description" : "Card token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/DigitalWalletTokenListResponse"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Card not found"
          }
        }
      }
    },
    "/digitalwallettokens/{token}" : {
      "get" : {
        "tags" : [ "digital wallet tokens" ],
        "summary" : "Returns a specific digital wallet token",
        "description" : "",
        "operationId" : "getDigitalwallettokensToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Digital wallet token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/digital_wallet_token"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Card not found"
          }
        }
      }
    },
    "/digitalwallettokens/{token}/showtokenpan" : {
      "get" : {
        "tags" : [ "digital wallet tokens" ],
        "summary" : "Returns a specific digital wallet token PAN visible",
        "description" : "",
        "operationId" : "getDigitalwallettokensTokenShowtokenpan",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Digital wallet token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/digital_wallet_token"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Card not found"
          }
        }
      }
    },
    "/digitalwallettokentransitions" : {
      "post" : {
        "tags" : [ "digital wallet token transitions" ],
        "summary" : "Creates a digital wallet token transition",
        "description" : "",
        "operationId" : "postDigitalwallettokentransitions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/digital_wallet_token_transition_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/digital_wallet_token_transition_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/digitalwallettokentransitions/digitalwallettoken/{token}" : {
      "get" : {
        "tags" : [ "digital wallet token transitions" ],
        "summary" : "Lists all digital wallet token transitions",
        "description" : "",
        "operationId" : "getDigitalwallettokentransitionsDigitalwallettokenToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Digital wallet token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of digital wallet transitions to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/DigitalWalletTokenTransitionListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/digitalwallettokentransitions/{token}" : {
      "get" : {
        "tags" : [ "digital wallet token transitions" ],
        "summary" : "Returns a digital wallet transition object",
        "description" : "",
        "operationId" : "getDigitalwallettokentransitionsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Digital wallet transition token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/digital_wallet_token_transition_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Transition not found"
          }
        }
      }
    },
    "/directdeposits" : {
      "get" : {
        "tags" : [ "direct deposits" ],
        "summary" : "Lists all direct deposits",
        "description" : "",
        "operationId" : "getDirectdeposits",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of direct deposits to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "maximum" : 100.0,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "reversed_after_grace_period",
          "in" : "query",
          "description" : "Reversed after grace period",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "user_token",
          "in" : "query",
          "description" : "User token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "business_token",
          "in" : "query",
          "description" : "Business token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "direct_deposit_state",
          "in" : "query",
          "description" : "Direct deposit state",
          "required" : false,
          "type" : "string",
          "enum" : [ "PENDING", "APPLIED", "REVERSED", "REJECTED" ]
        }, {
          "name" : "start_settlement_date",
          "in" : "query",
          "description" : "Start settlement date",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "end_settlement_date",
          "in" : "query",
          "description" : "End settlement date",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/DirectDepositListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/directdeposits/accounts/{user_or_business_token}" : {
      "get" : {
        "tags" : [ "direct deposits" ],
        "summary" : "Returns an account and routing number which can be used for direct deposit",
        "description" : "",
        "operationId" : "getDirectdepositsAccountsUserorbusinesstoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_or_business_token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/deposit_account"
            }
          },
          "400" : {
            "description" : "Cardholder not found"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Account not found"
          }
        }
      },
      "put" : {
        "tags" : [ "direct deposits" ],
        "summary" : "Updates a specific direct deposit account",
        "description" : "",
        "operationId" : "putDirectdepositsAccountsUserorbusinesstoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_or_business_token",
          "in" : "path",
          "description" : "User or business token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Deposit account update request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/deposit_account_update_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/deposit_account"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/directdeposits/transitions" : {
      "get" : {
        "tags" : [ "direct deposits" ],
        "summary" : "Returns a list of direct deposit transitions",
        "description" : "",
        "operationId" : "getDirectdepositsTransitions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of direct deposit transitions to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "maximum" : 100.0,
          "format" : "int32"
        }, {
          "name" : "user_token",
          "in" : "query",
          "description" : "User token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "business_token",
          "in" : "query",
          "description" : "Business token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "direct_deposit_token",
          "in" : "query",
          "description" : "Direct deposit token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        }, {
          "name" : "states",
          "in" : "query",
          "description" : "Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED ",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/DirectDepositTransitionListResponse"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "post" : {
        "tags" : [ "direct deposits" ],
        "summary" : "Creates a direct deposit transition",
        "description" : "",
        "operationId" : "postDirectdepositsTransitions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DirectDepositTransitionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/DirectDepositTransitionResponse"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/directdeposits/transitions/{token}" : {
      "get" : {
        "tags" : [ "direct deposits" ],
        "summary" : "Returns a direct deposit transition",
        "description" : "",
        "operationId" : "getDirectdepositsTransitionsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/DirectDepositTransitionResponse"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Direct deposit transition not found"
          }
        }
      }
    },
    "/directdeposits/{token}" : {
      "get" : {
        "tags" : [ "direct deposits" ],
        "summary" : "Returns a direct deposit entry",
        "description" : "",
        "operationId" : "getDirectdepositsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/DepositDepositResponse"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Direct deposit entry not found"
          }
        }
      }
    },
    "/fees" : {
      "get" : {
        "tags" : [ "fees" ],
        "summary" : "Lists all fees",
        "description" : "",
        "operationId" : "getFees",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of fees to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/fee"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "fees" ],
        "summary" : "Creates a fee",
        "description" : "",
        "operationId" : "postFees",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/fee_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/fee"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/fees/{token}" : {
      "get" : {
        "tags" : [ "fees" ],
        "summary" : "Returns a specific fee",
        "description" : "",
        "operationId" : "getFeesToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Fee token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/fee"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Fee not found"
          }
        }
      },
      "put" : {
        "tags" : [ "fees" ],
        "summary" : "Updates a specific fee",
        "description" : "",
        "operationId" : "putFeesToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Fee token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/fee_update_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/fee"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/feetransfers" : {
      "post" : {
        "tags" : [ "fee transfers" ],
        "summary" : "Creates a fee transfer",
        "description" : "",
        "operationId" : "postFeetransfers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/fee_transfer_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/fee_transfer_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "422" : {
            "description" : "Rule violations"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/feetransfers/{token}" : {
      "get" : {
        "tags" : [ "fee transfers" ],
        "summary" : "Returns a fee transfer",
        "description" : "",
        "operationId" : "getFeetransfersToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/fee_transfer_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Fee transfer not found"
          }
        }
      }
    },
    "/fundingsources/ach" : {
      "post" : {
        "tags" : [ "funding sources" ],
        "summary" : "Registers an ACH funding source",
        "description" : "",
        "operationId" : "postFundingsourcesAch",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ach_model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ach_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/fundingsources/ach/{funding_source_token}" : {
      "get" : {
        "tags" : [ "funding sources" ],
        "summary" : "Returns a user ACH account",
        "description" : "",
        "operationId" : "getFundingsourcesAchFundingsourcetoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funding_source_token",
          "in" : "path",
          "description" : "Funding account token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ach_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "put" : {
        "tags" : [ "funding sources" ],
        "summary" : "Verifies a bank account as a funding source",
        "description" : "",
        "operationId" : "putFundingsourcesAchFundingsourcetoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funding_source_token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ach_verification_model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ach_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/fundingsources/ach/{funding_source_token}/verificationamounts" : {
      "get" : {
        "tags" : [ "funding sources" ],
        "summary" : "Returns the dollar amounts used to verify the ACH account",
        "description" : "",
        "operationId" : "getFundingsourcesAchFundingsourcetokenVerificationamounts",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funding_source_token",
          "in" : "path",
          "description" : "Funding account token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ach_verification_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/fundingsources/addresses" : {
      "post" : {
        "tags" : [ "funding sources" ],
        "summary" : "Creates an account holder address for a funding source",
        "description" : "",
        "operationId" : "postFundingsourcesAddresses",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/card_holder_address_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/CardholderAddressResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/fundingsources/addresses/business/{business_token}" : {
      "get" : {
        "tags" : [ "funding sources" ],
        "summary" : "Lists all addresses for a business",
        "description" : "",
        "operationId" : "getFundingsourcesAddressesBusinessBusinesstoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "business_token",
          "in" : "path",
          "description" : "Business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CardholderAddressListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/fundingsources/addresses/user/{user_token}" : {
      "get" : {
        "tags" : [ "funding sources" ],
        "summary" : "Lists all addresses for a user",
        "description" : "",
        "operationId" : "getFundingsourcesAddressesUserUsertoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CardholderAddressListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/fundingsources/addresses/{funding_source_address_token}" : {
      "get" : {
        "tags" : [ "funding sources" ],
        "summary" : "Returns a user address for a funding source",
        "description" : "",
        "operationId" : "getFundingsourcesAddressesFundingsourceaddresstoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funding_source_address_token",
          "in" : "path",
          "description" : "Funding source address token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CardholderAddressResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "put" : {
        "tags" : [ "funding sources" ],
        "summary" : "Updates the account holder address for a funding source",
        "description" : "",
        "operationId" : "putFundingsourcesAddressesFundingsourceaddresstoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funding_source_address_token",
          "in" : "path",
          "description" : "Funding source address token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/card_holder_address_update_model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CardholderAddressResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/fundingsources/business/{business_token}" : {
      "get" : {
        "tags" : [ "funding sources" ],
        "summary" : "Lists all funding sources for a business",
        "description" : "",
        "operationId" : "getFundingsourcesBusinessBusinesstoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "business_token",
          "in" : "path",
          "description" : "Business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type, such as a payment card or ACH",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/FundingAccountListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "No funding accounts found"
          }
        }
      }
    },
    "/fundingsources/paymentcard" : {
      "post" : {
        "tags" : [ "funding sources" ],
        "summary" : "Registers a payment card funding source",
        "description" : "",
        "operationId" : "postFundingsourcesPaymentcard",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/token_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/payment_card_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/fundingsources/paymentcard/{funding_source_token}" : {
      "get" : {
        "tags" : [ "funding sources" ],
        "summary" : "Returns a specific payment card",
        "description" : "",
        "operationId" : "getFundingsourcesPaymentcardFundingsourcetoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funding_source_token",
          "in" : "path",
          "description" : "Funding token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/payment_card_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "put" : {
        "tags" : [ "funding sources" ],
        "summary" : "Updates a specific payment card ",
        "description" : "",
        "operationId" : "putFundingsourcesFundingsourcetoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funding_source_token",
          "in" : "path",
          "description" : "Funding account token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Payment card",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/token_update_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/payment_card_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/fundingsources/program" : {
      "post" : {
        "tags" : [ "funding sources" ],
        "summary" : "Creates a program funding source",
        "description" : "",
        "operationId" : "postFundingsourcesProgram",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/program_funding_source_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/program_funding_source_response"
            }
          },
          "400" : {
            "description" : "Invalid fields detected"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/fundingsources/program/ach" : {
      "get" : {
        "tags" : [ "funding sources" ],
        "summary" : "Returns a list of Program ACH funding sources",
        "description" : "",
        "operationId" : "getAllACHFundingSources",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve. Count can be between 1 - 10 items.",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Indicates from what row to start returning data.",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma delimited list of fields to return (e.g. field_1,field_2,..)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/base_ach_response_model"
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "funding sources" ],
        "summary" : "Registers an ACH funding source for a program",
        "description" : "",
        "operationId" : "postFundingsourcesProgramAch",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/base_ach_request_model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/base_ach_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/fundingsources/program/{token}" : {
      "get" : {
        "tags" : [ "funding sources" ],
        "summary" : "Returns a specific program funding source",
        "description" : "",
        "operationId" : "getFundingsourcesProgramToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Program funding source token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/program_funding_source_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Program funding source not found"
          }
        }
      },
      "put" : {
        "tags" : [ "funding sources" ],
        "summary" : "Updates a specific program funding source",
        "description" : "",
        "operationId" : "putFundingsourcesProgramToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Program funding source token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/program_funding_source_update_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/program_funding_source_response"
            }
          },
          "400" : {
            "description" : "Invalid fields detected"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/fundingsources/programgateway" : {
      "post" : {
        "tags" : [ "funding sources" ],
        "summary" : "Creates a gateway program funding source",
        "description" : "",
        "operationId" : "postFundingsourcesProgramgateway",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/gateway_program_funding_source_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/gateway_program_funding_source_response"
            }
          },
          "400" : {
            "description" : "Invalid fields detected"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/fundingsources/programgateway/customheaders/{token}" : {
      "put" : {
        "tags" : [ "funding sources" ],
        "summary" : "Updates a specific gateway program funding source Custom headers",
        "description" : "",
        "operationId" : "putFundingsourcesProgramgatewayCustomHeaderToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Gateway program funding source token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/gateway_program_custom_header_update_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/gateway_program_funding_source_response"
            }
          },
          "400" : {
            "description" : "Invalid fields detected"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/fundingsources/programgateway/{token}" : {
      "get" : {
        "tags" : [ "funding sources" ],
        "summary" : "Returns a gateway program funding source",
        "description" : "",
        "operationId" : "getFundingsourcesProgramgatewayToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Gateway program funding source token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/gateway_program_funding_source_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Gateway program funding source not found"
          }
        }
      },
      "put" : {
        "tags" : [ "funding sources" ],
        "summary" : "Updates a specific gateway program funding source",
        "description" : "",
        "operationId" : "putFundingsourcesProgramgatewayToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Gateway program funding source token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/gateway_program_funding_source_update_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/gateway_program_funding_source_response"
            }
          },
          "400" : {
            "description" : "Invalid fields detected"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/fundingsources/user/{user_token}" : {
      "get" : {
        "tags" : [ "funding sources" ],
        "summary" : "Lists all funding sources for a user",
        "description" : "",
        "operationId" : "getFundingsourcesUserUsertoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type, such as a payment card or ACH",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/FundingAccountListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "No funding accounts found"
          }
        }
      }
    },
    "/fundingsources/{funding_source_token}/default" : {
      "put" : {
        "tags" : [ "funding sources" ],
        "summary" : "Configures a default funding source",
        "description" : "",
        "operationId" : "putFundingsourcesFundingsourcetokenDefault",
        "consumes" : [ "text/plain", "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funding_source_token",
          "in" : "path",
          "description" : "Funding account",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/payment_card_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/gpaorders" : {
      "post" : {
        "tags" : [ "gpa orders" ],
        "summary" : "Funds a user's GPA account",
        "description" : "",
        "operationId" : "postGpaorders",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/gpa_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/gpa_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "422" : {
            "description" : "Rule violations or declined transactions from funding source"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/gpaorders/unloads" : {
      "get" : {
        "tags" : [ "gpa orders" ],
        "summary" : "Lists all GPA returns",
        "description" : "",
        "operationId" : "getGpaordersUnloads",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of GPA unloads to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        }, {
          "name" : "user_token",
          "in" : "query",
          "description" : "User token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "business_token",
          "in" : "query",
          "description" : "Business token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "original_order_token",
          "in" : "query",
          "description" : "Original order token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/GPAUnloadListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "gpa orders" ],
        "summary" : "Returns a GPA order",
        "description" : "",
        "operationId" : "postGpaordersUnloads",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/unload_request_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/gpa_returns"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "412" : {
            "description" : "Pre-condition failed. Unload amount is greater than load amount"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "GPA order token not found"
          }
        }
      }
    },
    "/gpaorders/unloads/{unload_token}" : {
      "get" : {
        "tags" : [ "gpa orders" ],
        "summary" : "Returns a specific GPA return",
        "description" : "",
        "operationId" : "getGpaordersUnloadsUnloadtoken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "unload_token",
          "in" : "path",
          "description" : "Unload token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/gpa_returns"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Return not found"
          }
        }
      }
    },
    "/gpaorders/{token}" : {
      "get" : {
        "tags" : [ "gpa orders" ],
        "summary" : "Returns a GPA order",
        "description" : "",
        "operationId" : "getGpaordersToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/gpa_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "GPA order token not found"
          }
        }
      }
    },
    "/kyc" : {
      "post" : {
        "tags" : [ "kyc" ],
        "summary" : "Performs a KYC",
        "description" : "",
        "operationId" : "postKyc",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/kyc_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/kyc_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/kyc/business/{business_token}" : {
      "get" : {
        "tags" : [ "kyc" ],
        "summary" : "Lists all KYC results for a business",
        "description" : "",
        "operationId" : "getKycBusinessBusinesstoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "business_token",
          "in" : "path",
          "description" : "Business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/KYCListResponse"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/kyc/user/{user_token}" : {
      "get" : {
        "tags" : [ "kyc" ],
        "summary" : "Lists all KYC results for a user",
        "description" : "",
        "operationId" : "getKycUserUsertoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/KYCListResponse"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/kyc/{token}" : {
      "get" : {
        "tags" : [ "kyc" ],
        "summary" : "Returns a specific KYC result",
        "description" : "",
        "operationId" : "getKycToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "KYC token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/kyc_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "KYC not found"
          }
        }
      },
      "put" : {
        "tags" : [ "kyc" ],
        "summary" : "Accepts KYC answers for questions from initial request",
        "description" : "",
        "operationId" : "putKycToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "KYC token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/KYCSubmitAnswersRequestModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/kyc_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/mccgroups" : {
      "get" : {
        "tags" : [ "mcc groups" ],
        "summary" : "Lists all MCC groups",
        "description" : "",
        "operationId" : "getMccgroups",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "mcc",
          "in" : "query",
          "description" : "MCC",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve. Count can be between 1 - 10 items.",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Indicates from what row to start returning data.",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime.",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/MCCGroupListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "mcc groups" ],
        "summary" : "Creates an MCC group",
        "description" : "",
        "operationId" : "postMccgroups",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "MCC group",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/mcc_group_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/mcc_group_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/mccgroups/{token}" : {
      "get" : {
        "tags" : [ "mcc groups" ],
        "summary" : "Returns a specific MCC group",
        "description" : "",
        "operationId" : "getMccgroupsToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "MCC group token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/mcc_group_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "MCC group not found"
          }
        }
      },
      "put" : {
        "tags" : [ "mcc groups" ],
        "summary" : "Updates an MCC group",
        "description" : "",
        "operationId" : "putMccgroupsToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "MCC group",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/mcc_group_update_model"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/mcc_group_update_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/merchants" : {
      "get" : {
        "tags" : [ "merchants" ],
        "summary" : "Lists all merchants",
        "description" : "",
        "operationId" : "getMerchants",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/MerchantListResponse"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "merchants" ],
        "summary" : "Creates a merchant",
        "description" : "",
        "operationId" : "postMerchants",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/merchant_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/merchant_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/merchants/{token}" : {
      "get" : {
        "tags" : [ "merchants" ],
        "summary" : "Returns a specific merchant",
        "description" : "",
        "operationId" : "getMerchantsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Merchant token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/merchant_response_model"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Merchant does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "merchants" ],
        "summary" : "Updates a specific merchant",
        "description" : "",
        "operationId" : "putMerchantsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Merchant token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/merchant_update_model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/merchant_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/merchants/{token}/stores" : {
      "get" : {
        "tags" : [ "merchants" ],
        "summary" : "Lists the stores associated with a specific merchant",
        "description" : "",
        "operationId" : "getMerchantsTokenStores",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Merchant token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/StoreListResponse"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/msaorders" : {
      "post" : {
        "tags" : [ "msa orders" ],
        "summary" : "Creates a merchant-specific account order",
        "description" : "",
        "operationId" : "postMsaorders",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/msa_order_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/msa_order_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "422" : {
            "description" : "Rule violations or funding errors"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/msaorders/unloads" : {
      "get" : {
        "tags" : [ "msa orders" ],
        "summary" : "Lists all MSA unloads",
        "description" : "",
        "operationId" : "getMsaordersUnloads",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of MSA unloads to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        }, {
          "name" : "user_token",
          "in" : "query",
          "description" : "User token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "business_token",
          "in" : "query",
          "description" : "Business token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "original_order_token",
          "in" : "query",
          "description" : "Original order token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/MSAUnloadListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "msa orders" ],
        "summary" : "Returns an MSA order",
        "description" : "",
        "operationId" : "postMsaordersUnloads",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/msa_unload_request_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/msa_returns"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "MSA order token not found"
          }
        }
      }
    },
    "/msaorders/unloads/{unload_token}" : {
      "get" : {
        "tags" : [ "msa orders" ],
        "summary" : "Returns a specific MSA unload",
        "description" : "",
        "operationId" : "getMsaordersUnloadsUnloadtoken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "unload_token",
          "in" : "path",
          "description" : "Unload token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/msa_returns"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Return not found"
          }
        }
      }
    },
    "/msaorders/{token}" : {
      "get" : {
        "tags" : [ "msa orders" ],
        "summary" : "Returns an MSA order ",
        "description" : "",
        "operationId" : "getMsaordersToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Order token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/msa_order_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Order not found"
          }
        }
      },
      "put" : {
        "tags" : [ "msa orders" ],
        "summary" : "Updates a specific merchant-specific account order",
        "description" : "",
        "operationId" : "putMsaordersToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Order token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/msa_order_update_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/msa_order_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/offerorders" : {
      "post" : {
        "tags" : [ "offer orders" ],
        "summary" : "Creates an offer order",
        "description" : "",
        "operationId" : "postOfferorders",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/offer_order_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/offer_order_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/offerorders/{token}" : {
      "get" : {
        "tags" : [ "offer orders" ],
        "summary" : "Returns a purchase order for a specific offer",
        "description" : "",
        "operationId" : "getOfferordersToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Order token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/offer_order_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Order not found"
          }
        }
      }
    },
    "/offers" : {
      "get" : {
        "tags" : [ "offers" ],
        "summary" : "Lists all offers",
        "description" : "",
        "operationId" : "getOffers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/OfferListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "offers" ],
        "summary" : "Creates an offer",
        "description" : "",
        "operationId" : "postOffers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/offer_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/offer_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/offers/{token}" : {
      "get" : {
        "tags" : [ "offers" ],
        "summary" : "Returns a specific offer",
        "description" : "",
        "operationId" : "getOffersToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Offer token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/offer_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Offer not found"
          }
        }
      },
      "put" : {
        "tags" : [ "offers" ],
        "summary" : "Updates an offer",
        "description" : "",
        "operationId" : "putOffersToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Offer token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/offer_update_model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/offer_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/peertransfers" : {
      "post" : {
        "tags" : [ "peer transfers" ],
        "summary" : "Performs a peer transfer from one user to another",
        "description" : "",
        "operationId" : "postPeertransfers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/peer_transfer_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/peer_transfer_response"
            }
          },
          "400" : {
            "description" : "Invalid fields detected: either sender or recipient is not found"
          },
          "422" : {
            "description" : "Rule violations"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/peertransfers/user/{user_or_business_token}" : {
      "get" : {
        "tags" : [ "peer transfers" ],
        "summary" : "Returns all peer transfers for a user",
        "description" : "",
        "operationId" : "getPeertransfersUserUserorbusinesstoken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_or_business_token",
          "in" : "path",
          "description" : "User or business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of transfers to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 25,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/peer_transfer_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/peertransfers/user/{user_or_business_token}/recipient" : {
      "get" : {
        "tags" : [ "peer transfers" ],
        "summary" : "Returns received peer transfers for a user",
        "description" : "",
        "operationId" : "getPeertransfersUserUserorbusinesstokenRecipient",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_or_business_token",
          "in" : "path",
          "description" : "User or business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of transfers to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 25,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/peer_transfer_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "User token not found"
          }
        }
      }
    },
    "/peertransfers/user/{user_or_business_token}/sender" : {
      "get" : {
        "tags" : [ "peer transfers" ],
        "summary" : "Returns sent peer transfers for a user",
        "description" : "",
        "operationId" : "getPeertransfersUserUserorbusinesstokenSender",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_or_business_token",
          "in" : "path",
          "description" : "User or business token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of transfers to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 25,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/peer_transfer_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/peertransfers/{token}" : {
      "get" : {
        "tags" : [ "peer transfers" ],
        "summary" : "Returns details of a previous transfer",
        "description" : "",
        "operationId" : "getPeertransfersToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/peer_transfer_response"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Transfer token not found"
          }
        }
      }
    },
    "/ping" : {
      "get" : {
        "tags" : [ "ping" ],
        "summary" : "Returns a heartbeat to the consumer",
        "description" : "Tests if the Marqeta server is available and responsive.",
        "operationId" : "getPing",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ping_response"
            }
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "ping" ],
        "summary" : "Echo test for sending payload to server",
        "description" : "",
        "operationId" : "postPing",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/echo_ping_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/echo_ping_response"
            }
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/pins" : {
      "put" : {
        "tags" : [ "pins" ],
        "summary" : "Updates the PIN control token",
        "description" : "Updates a PIN identified by its control token.",
        "operationId" : "putPins",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/pin_request"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad request"
          },
          "412" : {
            "description" : "Weak PIN"
          },
          "500" : {
            "description" : "Server error"
          },
          "204" : {
            "description" : "PIN was successfully set"
          }
        }
      }
    },
    "/pins/controltoken" : {
      "post" : {
        "tags" : [ "pins" ],
        "summary" : "Creates a new control token for a PIN",
        "description" : "Creates a new control token for a PIN for the specified card for PIN debit or ATM transactions.",
        "operationId" : "postPinsControltoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/control_token_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Control token created",
            "schema" : {
              "$ref" : "#/definitions/control_token_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/programreserve/balances" : {
      "get" : {
        "tags" : [ "program reserve" ],
        "summary" : "Returns the latest balance in the program reserve account",
        "description" : "",
        "operationId" : "getProgramreserveBalances",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/program_reserve_account_balance"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/programreserve/deposits" : {
      "get" : {
        "tags" : [ "program reserve" ],
        "operationId" : "getProgramReserveDeposits",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "post" : {
        "tags" : [ "program reserve" ],
        "operationId" : "deposit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/program_reserve_deposit_request"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/programreserve/transactions" : {
      "get" : {
        "tags" : [ "program reserve" ],
        "summary" : "Returns a list of program reserve transactions (credits and debits)",
        "description" : "",
        "operationId" : "getProgramreserveTransactions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Type",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/program_reserve_transaction_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "program reserve" ],
        "summary" : "Credits or debits the program reserve account",
        "description" : "",
        "operationId" : "postProgramreserveTransactions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/program_reserve_transaction_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/program_reserve_transaction_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/programtransfers" : {
      "get" : {
        "tags" : [ "program transfers" ],
        "summary" : "Lists all program transfers",
        "description" : "",
        "operationId" : "getProgramtransfers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of program transfers to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        }, {
          "name" : "user_token",
          "in" : "query",
          "description" : "User token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "business_token",
          "in" : "query",
          "description" : "Business token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type_token",
          "in" : "query",
          "description" : "Program type token",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ProgramTransferListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "program transfers" ],
        "summary" : "Transfers to a program funding source",
        "description" : "",
        "operationId" : "postProgramtransfers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/program_transfer"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/program_transfer_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "412" : {
            "description" : "Pre-condition failed. Unload amount is greater than load amount"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Not found"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/programtransfers/types" : {
      "get" : {
        "tags" : [ "program transfers" ],
        "summary" : "Lists all program transfer types",
        "description" : "",
        "operationId" : "getProgramtransfersTypes",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of program transfer types to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ProgramTransferTypeListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "program transfers" ],
        "summary" : "Creates a program transfer type",
        "description" : "",
        "operationId" : "postProgramtransfersTypes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/program_transfer_type_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/program_transfer_type_reponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Program funding source not found"
          },
          "409" : {
            "description" : "Token already used"
          }
        }
      }
    },
    "/programtransfers/types/{type_token}" : {
      "get" : {
        "tags" : [ "program transfers" ],
        "summary" : "Returns a specific program transfer type",
        "description" : "",
        "operationId" : "getProgramtransfersTypesTypetoken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_token",
          "in" : "path",
          "description" : "Type token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/program_transfer_type_reponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Program transfer type not found"
          }
        }
      },
      "put" : {
        "tags" : [ "program transfers" ],
        "summary" : "Updates a specific program transfer type",
        "description" : "",
        "operationId" : "putProgramtransfersTypesTypetoken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_token",
          "in" : "path",
          "description" : "Type token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/program_transfer_type_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/program_transfer_type_reponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Program transfer type not found"
          }
        }
      }
    },
    "/programtransfers/{token}" : {
      "get" : {
        "tags" : [ "program transfers" ],
        "summary" : "Returns a specific program transfer",
        "description" : "",
        "operationId" : "getProgramtransfersToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Program transfer token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/program_transfer_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Return not found"
          }
        }
      }
    },
    "/pushtocards/disburse" : {
      "get" : {
        "tags" : [ "push to card" ],
        "summary" : "Lists all push-to-card disbursements",
        "description" : "",
        "operationId" : "getPushtocardsDisburse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of push-to-card disbursements to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/PushToCardDisburseListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "push to card" ],
        "summary" : "Initiates a push-to-card money disbursement",
        "description" : "",
        "operationId" : "postPushtocardsDisburse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/push_to_card_disburse_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/push_to_card_disbursement_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "422" : {
            "description" : "Payment instrument is not active"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/pushtocards/disburse/{token}" : {
      "get" : {
        "tags" : [ "push to card" ],
        "summary" : "Returns a specific push-to-card disbursement",
        "description" : "",
        "operationId" : "getPushtocardsDisburseToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Push-to-card disbursement token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/push_to_card_disbursement_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Push-to-card disbursement not found"
          }
        }
      }
    },
    "/pushtocards/paymentcard" : {
      "get" : {
        "tags" : [ "push to card" ],
        "summary" : "Returns all push-to-card payment card details",
        "description" : "",
        "operationId" : "getPushtocardsPaymentcard",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of push-to-card payment cards to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "user_token",
          "in" : "query",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/PushToCardListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "push to card" ],
        "summary" : "Adds an external card to which funds will be pushed",
        "description" : "",
        "operationId" : "postPushtocardsPaymentcard",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/push_to_card_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/push_to_card_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "422" : {
            "description" : "Push-to-card information is invalid"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/pushtocards/paymentcard/{token}" : {
      "get" : {
        "tags" : [ "push to card" ],
        "summary" : "Returns a specific paymentcard object",
        "description" : "",
        "operationId" : "getPushtocardsPaymentcardToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Push-to-card token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/push_to_card_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Push-to-card details not found"
          }
        }
      }
    },
    "/realtimefeegroups" : {
      "get" : {
        "tags" : [ "real time fee groups" ],
        "summary" : "Lists all real-time fee groups",
        "description" : "",
        "operationId" : "getRealtimefeegroups",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of real-time fee groups to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/real_time_fee_group"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "real time fee groups" ],
        "summary" : "Creates a real-time fee group",
        "description" : "",
        "operationId" : "postRealtimefeegroups",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/real_time_fee_group_create_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/real_time_fee_group"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/realtimefeegroups/{token}" : {
      "get" : {
        "tags" : [ "real time fee groups" ],
        "summary" : "Returns a specific real-time fee group",
        "description" : "",
        "operationId" : "getRealtimefeegroupsToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Real-time fee group token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/real_time_fee_group"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Real-time fee group not found"
          }
        }
      },
      "put" : {
        "tags" : [ "real time fee groups" ],
        "summary" : "Updates a specific real-time fee group",
        "description" : "",
        "operationId" : "putRealtimefeegroupsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Real-time fee group token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/real_time_fee_group_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/real_time_fee_group"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/simulate/authorization" : {
      "post" : {
        "tags" : [ "simulate" ],
        "summary" : "Simulates an authorization",
        "description" : "",
        "operationId" : "postSimulateAuthorization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/auth_request_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/simulation_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/simulate/authorization/advice" : {
      "post" : {
        "tags" : [ "simulate" ],
        "summary" : "Simulates an authorization advice transaction",
        "description" : "",
        "operationId" : "postSimulateAuthorizationAdvice",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/authorization_advice_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/simulation_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Original transaction not found"
          }
        }
      }
    },
    "/simulate/clearing" : {
      "post" : {
        "tags" : [ "simulate" ],
        "summary" : "Simulates a clearing/settlement transaction",
        "description" : "",
        "operationId" : "postSimulateClearing",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ClearingModel"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/simulation_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Original transaction not found"
          }
        }
      }
    },
    "/simulate/directdeposits" : {
      "post" : {
        "tags" : [ "simulate" ],
        "summary" : "Simulates the creation of direct deposit",
        "description" : "",
        "operationId" : "postSimulateDirectdeposits",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Direct deposit simulate request model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DirectDepositRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/DepositDepositResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/simulate/financial" : {
      "post" : {
        "tags" : [ "simulate" ],
        "summary" : "Simulates a financial request (PIN debit) transaction with optional cash back",
        "description" : "",
        "operationId" : "postSimulateFinancial",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Financial request model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/financial_request_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/simulation_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/simulate/financial/advice" : {
      "post" : {
        "tags" : [ "simulate" ],
        "summary" : "Simulates a financial advice transaction",
        "description" : "",
        "operationId" : "postSimulateFinancialAdvice",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Financial advice request model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/authorization_advice_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/simulation_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Original transaction not found"
          }
        }
      }
    },
    "/simulate/financial/balanceinquiry" : {
      "post" : {
        "tags" : [ "simulate" ],
        "summary" : "Simulates a balance inquiry",
        "description" : "",
        "operationId" : "postSimulateFinancialBalanceinquiry",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Balance inquiry request model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/balance_inquiry_request_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/simulation_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/simulate/financial/originalcredit" : {
      "post" : {
        "tags" : [ "simulate" ],
        "summary" : "Simulates an orignal credit transaction",
        "description" : "",
        "operationId" : "postSimulateFinancialOriginalcredit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Orignal Credit request model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/orignalcredit_request_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/simulation_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/simulate/financial/withdrawal" : {
      "post" : {
        "tags" : [ "simulate" ],
        "summary" : "Simulates an ATM withdrawal transaction",
        "description" : "",
        "operationId" : "postSimulateFinancialWithdrawal",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "ATM withdrawal request model",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/withdrawal_request_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/simulation_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/simulate/reversal" : {
      "post" : {
        "tags" : [ "simulate" ],
        "summary" : "Simulates a reversal transaction",
        "description" : "",
        "operationId" : "postSimulateReversal",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ReversalModel"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/simulation_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Original transaction not found"
          }
        }
      }
    },
    "/stores" : {
      "get" : {
        "tags" : [ "stores" ],
        "summary" : "Lists all stores",
        "description" : "",
        "operationId" : "getStores",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of stores to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/StoreListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "stores" ],
        "summary" : "Creates a store",
        "description" : "",
        "operationId" : "postStores",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/store_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/store_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/stores/mid/{mid}" : {
      "get" : {
        "tags" : [ "stores" ],
        "summary" : "Returns a store specified by its MID",
        "description" : "",
        "operationId" : "getStoresMidMid",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "mid",
          "in" : "path",
          "description" : "Store MID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/store_response_model"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Store does not exist"
          }
        }
      }
    },
    "/stores/{token}" : {
      "get" : {
        "tags" : [ "stores" ],
        "summary" : "Returns a specific store",
        "description" : "",
        "operationId" : "getStoresToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Store token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leaveblank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/store_response_model"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Store not found"
          }
        }
      },
      "put" : {
        "tags" : [ "stores" ],
        "summary" : "Updates a store",
        "description" : "",
        "operationId" : "putStoresToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Store token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/store_update_model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/store_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/transactions" : {
      "get" : {
        "tags" : [ "transactions" ],
        "summary" : "Returns transactions",
        "description" : "",
        "operationId" : "getTransactions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of transactions to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-user_transaction_time",
          "enum" : [ "-created_time", "created_time", "-user_transaction_time", "user_transaction_time" ]
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Comma-delimited list of transaction types to include",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "user_token",
          "in" : "query",
          "description" : "User token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "business_token",
          "in" : "query",
          "description" : "Business token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "acting_user_token",
          "in" : "query",
          "description" : "Acting user token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "card_token",
          "in" : "query",
          "description" : "Card token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "merchant_token",
          "in" : "query",
          "description" : "Merchant token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "campaign_token",
          "in" : "query",
          "description" : "Campaign token",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | DECLINED | ERROR | ALL",
          "required" : false,
          "type" : "string",
          "default" : "PENDING,COMPLETION"
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "verbose",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/transaction_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/transactions/fundingsource/{funding_source_token}" : {
      "get" : {
        "tags" : [ "transactions" ],
        "summary" : "Returns transactions for a specific funding account",
        "description" : "",
        "operationId" : "getTransactionsFundingsourceFundingsourcetoken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funding_source_token",
          "in" : "path",
          "description" : "Funding account token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of transactions to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-user_transaction_time",
          "enum" : [ "-created_time", "created_time", "-user_transaction_time", "user_transaction_time" ]
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "Start date (yyyy-MM-dd)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "End date (yyyy-MM-dd)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Comma-delimited list of transaction types to include",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "polarity",
          "in" : "query",
          "description" : "Type of transactions to retrieve: CREDIT or DEBIT",
          "required" : false,
          "type" : "string",
          "enum" : [ "CREDIT", "DEBIT", "PENDING_CREDIT", "PENDING_DEBIT" ]
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "verbose",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/transaction_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/transactions/{token}" : {
      "get" : {
        "tags" : [ "transactions" ],
        "summary" : "Returns a transaction",
        "description" : "",
        "operationId" : "getTransactionsToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Transaction token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "verbose",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/transaction_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Transaction token not found"
          }
        }
      }
    },
    "/transactions/{token}/related" : {
      "get" : {
        "tags" : [ "transactions" ],
        "summary" : "Returns related transactions",
        "description" : "",
        "operationId" : "getTransactionsTokenRelated",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Transaction token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of transactions to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-user_transaction_time",
          "enum" : [ "-created_time", "created_time", "-user_transaction_time", "user_transaction_time" ]
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Comma-delimited list of transaction types to include",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | ALL",
          "required" : false,
          "type" : "string",
          "default" : "ALL"
        }, {
          "name" : "version",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "verbose",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/transaction_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Lists all users",
        "description" : "",
        "operationId" : "getUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of users to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "search_type",
          "in" : "query",
          "description" : "Search type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/UserCardHolderListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Creates a user",
        "description" : "",
        "operationId" : "postUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/card_holder_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/user_card_holder_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "412" : {
            "description" : "Pre-condition setup issue"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/users/auth/changepassword" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Updates a user password",
        "description" : "",
        "operationId" : "postUsersAuthChangepassword",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Password update object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/password_update_model"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "User input error/Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/users/auth/clientaccesstoken" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Creates a client access token",
        "description" : "",
        "operationId" : "postUsersAuthClientaccesstoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/client_access_token_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/client_access_token_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/users/auth/clientaccesstoken/{token}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Returns a client access token",
        "description" : "",
        "operationId" : "getUsersAuthClientaccesstokenToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Client access token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "application_token",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/client_access_token_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      }
    },
    "/users/auth/login" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Logs in a user",
        "description" : "",
        "operationId" : "postUsersAuthLogin",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "User login object",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/login_request_model"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "User input error/Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "204" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/login_response_model"
            }
          }
        }
      }
    },
    "/users/auth/logout" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Logs out a user",
        "description" : "",
        "operationId" : "postUsersAuthLogout",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "400" : {
            "description" : "User input error/Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/users/auth/onetime" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Creates a one-time token",
        "description" : "",
        "operationId" : "postUsersAuthOnetime",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "One-time object",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/one_time_request_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/access_token_response"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/users/auth/resetpassword" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Generates a reset password email",
        "description" : "",
        "operationId" : "postUsersAuthResetpassword",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/reset_user_password_email_model"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "User input error/Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/users/auth/resetpassword/{token}" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Resets a user password",
        "description" : "",
        "operationId" : "postUsersAuthResetpasswordToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/reset_user_password_model"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "description" : "Reset password verification token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "User input error/Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/users/auth/verifyemail" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Generates an email verification request",
        "description" : "",
        "operationId" : "postUsersAuthVerifyemail",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "400" : {
            "description" : "User input error/Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/users/auth/verifyemail/{token}" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Verifies the email token",
        "description" : "",
        "operationId" : "postUsersAuthVerifyemailToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Email verification token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "User input error/Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/users/lookup" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Lists all users",
        "description" : "",
        "operationId" : "postUsersLookup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/user_card_holder_search_model"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of users to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "search_type",
          "in" : "query",
          "description" : "Search type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/UserCardHolderListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/users/phonenumber/{phone_number}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Lists all users who match a phone number",
        "description" : "",
        "operationId" : "getUsersPhonenumberPhonenumber",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "phone_number",
          "in" : "path",
          "description" : "Phone number",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of users to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/UserCardHolderListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/users/{parent_token}/children" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Lists all children of a parent user",
        "description" : "",
        "operationId" : "getUsersParenttokenChildren",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Number of users to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "parent_token",
          "in" : "path",
          "description" : "Token of parent cardholder",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/UserCardHolderListResponse"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/users/{token}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Returns a specific user",
        "description" : "",
        "operationId" : "getUsersToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/user_card_holder_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Cardholder not found"
          }
        }
      },
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Updates a specific user",
        "description" : "",
        "operationId" : "putUsersToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserCardHolderUpdateModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/card_holder_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/users/{token}/notes" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Lists cardholder notes",
        "description" : "",
        "operationId" : "getUsersTokenNotes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of notes to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "created_by",
          "in" : "query",
          "description" : "Created by",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "created_by_user_role",
          "in" : "query",
          "description" : "Comma-delimited list of created by user roles",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "include_private",
          "in" : "query",
          "description" : "Include private notes and private fields in note response",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "search_type",
          "in" : "query",
          "description" : "Search type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/CardHolderNoteListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Cardholder not found"
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Creates a note for the cardholder",
        "description" : "",
        "operationId" : "postUsersTokenNotes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/cardholder_note_request_model"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/cardholder_note_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      }
    },
    "/users/{token}/notes/{notes_token}" : {
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Updates a specific note for a cardholder",
        "description" : "",
        "operationId" : "putUsersTokenNotesNotestoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/cardholder_note_update_request_model"
          }
        }, {
          "name" : "token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "notes_token",
          "in" : "path",
          "description" : "Notes token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/cardholder_note_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error"
          },
          "403" : {
            "description" : "Forbidden"
          }
        }
      }
    },
    "/users/{token}/ssn" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Returns a specific user's SSN",
        "description" : "",
        "operationId" : "getUsersTokenSsn",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "full_ssn",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ssn_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/usertransitions" : {
      "post" : {
        "tags" : [ "user transitions" ],
        "summary" : "Creates a user transition",
        "description" : "",
        "operationId" : "postUsertransitions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserTransitionRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/UserTransitionResponse"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "412" : {
            "description" : "Pre-condition setup issue"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/usertransitions/user/{user_token}" : {
      "get" : {
        "tags" : [ "user transitions" ],
        "summary" : "Returns transitions for a specific user",
        "description" : "",
        "operationId" : "getUsertransitionsUserUsertoken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of user transitions to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/UserTransitionListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/usertransitions/{token}" : {
      "get" : {
        "tags" : [ "user transitions" ],
        "summary" : "Returns a user transition",
        "description" : "",
        "operationId" : "getUsertransitionsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Transition token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/UserTransitionResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Cardholder not found"
          }
        }
      }
    },
    "/velocitycontrols" : {
      "get" : {
        "tags" : [ "velocity controls" ],
        "summary" : "Queries velocity controls",
        "description" : "",
        "operationId" : "getVelocitycontrols",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "card_product",
          "in" : "query",
          "description" : "Card product token. Use \"null\" to get velocity controls that are not associated with any card product.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "User token. Use \"null\" to get velocity controls that are not associated with any user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve. Count can be between 1 - 10 items.",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Indicates from what row to start returning data.",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime.",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/VelocityControlListResponse"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "velocity controls" ],
        "summary" : "Creates a velocity control",
        "description" : "",
        "operationId" : "postVelocitycontrols",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Velocity control object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/velocity_control_request"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/velocity_control_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Token already associated with a different payload"
          }
        }
      }
    },
    "/velocitycontrols/user/{user_token}/available" : {
      "get" : {
        "tags" : [ "velocity controls" ],
        "summary" : "Queries a user's velocity control balances",
        "description" : "",
        "operationId" : "getVelocitycontrolsUserUsertokenAvailable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_token",
          "in" : "path",
          "description" : "User token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of items to retrieve. Count can be between 1 - 10 items.",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Indicates from what row to start returning data.",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Field by which to sort the returned items. Use any field in the model, or system fields lastModifiedTime or createdTime.",
          "required" : false,
          "type" : "string",
          "default" : "-lastModifiedTime"
        }, {
          "name" : "force_dto",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/velocity_control_balance_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/velocitycontrols/{token}" : {
      "get" : {
        "tags" : [ "velocity controls" ],
        "summary" : "Returns a specific velocity control",
        "description" : "",
        "operationId" : "getVelocitycontrolsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Velocity control token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/velocity_control_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Velocity control not found"
          }
        }
      },
      "put" : {
        "tags" : [ "velocity controls" ],
        "summary" : "Updates a specific velocity control",
        "description" : "",
        "operationId" : "putVelocitycontrolsToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Velocity control token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Velocity control object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/velocity_control_update_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/velocity_control_response"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      }
    },
    "/webhooks" : {
      "get" : {
        "tags" : [ "webhooks" ],
        "summary" : "Returns a list of webhook configurations",
        "description" : "",
        "operationId" : "getWebhooks",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "active",
          "in" : "query",
          "description" : "Return only active webhook configurations",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of reward programs to retrieve",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "format" : "int32"
        }, {
          "name" : "start_index",
          "in" : "query",
          "description" : "Start index",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Sort order",
          "required" : false,
          "type" : "string",
          "default" : "-createdTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/webhook_response_model"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "500" : {
            "description" : "Server error"
          }
        }
      },
      "post" : {
        "tags" : [ "webhooks" ],
        "summary" : "Creates a webhook configuration",
        "description" : "",
        "operationId" : "postWebhooks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/webhook_request_model"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/webhook_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "409" : {
            "description" : "Request already processed with a different payload"
          }
        }
      }
    },
    "/webhooks/customheaders/{token}" : {
      "put" : {
        "tags" : [ "webhooks" ],
        "summary" : "Updates a specific webhook configuration",
        "description" : "",
        "operationId" : "putWebhooksToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Webhook token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/WebhookUpdateCustomHeaderRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/webhook_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Resource not found"
          }
        }
      }
    },
    "/webhooks/{token}" : {
      "get" : {
        "tags" : [ "webhooks" ],
        "summary" : "Returns a webhook configuration",
        "description" : "",
        "operationId" : "getWebhooksToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Webhook token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/webhook_response_model"
            }
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Resource not found"
          }
        }
      },
      "put" : {
        "tags" : [ "webhooks" ],
        "summary" : "Updates a specific webhook configuration",
        "description" : "",
        "operationId" : "putWebhooksToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Webhook token",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/webhook_base_model"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/webhook_response_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Resource not found"
          }
        }
      }
    },
    "/webhooks/{token}/ping" : {
      "post" : {
        "tags" : [ "webhooks" ],
        "summary" : "Pings a webhook",
        "description" : "Endpoints must respond with a 200 status code.",
        "operationId" : "postWebhooksTokenPing",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Ping a webhook",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/webhook_ping_model"
            }
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Resource not found"
          }
        }
      }
    },
    "/webhooks/{token}/{event_type}/{event_token}" : {
      "post" : {
        "tags" : [ "webhooks" ],
        "summary" : "Replays an event to a webhook",
        "description" : "",
        "operationId" : "postWebhooksTokenEventtypeEventtoken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "description" : "Webhook token",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "event_type",
          "in" : "path",
          "description" : "Event type",
          "required" : true,
          "type" : "string",
          "enum" : [ "chargebacktransition", "digitalwallettokentransition", "cardtransition", "usertransition", "businesstransition", "transaction" ]
        }, {
          "name" : "event_token",
          "in" : "path",
          "description" : "Event token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "User input error/Bad request"
          },
          "500" : {
            "description" : "Server error"
          },
          "404" : {
            "description" : "Resource not found"
          }
        }
      }
    }
  },
  "definitions" : {
    "card_product_update_model" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "start_date" : {
          "type" : "string",
          "description" : "yyyy-MM-dd"
        },
        "end_date" : {
          "type" : "string",
          "description" : "yyyy-MM-dd"
        },
        "config" : {
          "$ref" : "#/definitions/card_product_config"
        }
      }
    },
    "msa_order_request" : {
      "type" : "object",
      "required" : [ "campaign_token", "currency_code", "funding_source_token", "purchase_amount" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "campaign_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "currency_code" : {
          "type" : "string"
        },
        "purchase_amount" : {
          "type" : "number"
        },
        "reward_amount" : {
          "type" : "number",
          "description" : "default is 0.00"
        },
        "reward_trigger_amount" : {
          "type" : "number",
          "description" : "default is 0.01"
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "funding_source_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "funding_source_address_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "msa_order_request"
      }
    },
    "address_verification_model" : {
      "type" : "object",
      "properties" : {
        "request" : {
          "$ref" : "#/definitions/avs_information"
        },
        "on_file" : {
          "$ref" : "#/definitions/avs_information"
        },
        "response" : {
          "$ref" : "#/definitions/response"
        }
      },
      "xml" : {
        "name" : "address_verification_model"
      }
    },
    "UserValidationResponse" : {
      "type" : "object",
      "required" : [ "birth_date", "phone", "random_name_line1_postfix", "ssn" ],
      "properties" : {
        "birth_date" : {
          "type" : "boolean",
          "description" : "yyyy-MM-dd",
          "default" : false
        },
        "phone" : {
          "type" : "boolean",
          "description" : "10 char max, phone number",
          "default" : false
        },
        "ssn" : {
          "type" : "boolean",
          "description" : "Last four digits of SSN",
          "default" : false
        },
        "random_name_line1_postfix" : {
          "type" : "boolean",
          "description" : "Six-char random name postfix",
          "default" : false
        }
      }
    },
    "ach_response_model" : {
      "type" : "object",
      "required" : [ "account_suffix", "account_type", "active", "created_time", "last_modified_time", "name_on_account", "token" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "token" : {
          "type" : "string"
        },
        "account_suffix" : {
          "type" : "string"
        },
        "verification_status" : {
          "type" : "string"
        },
        "account_type" : {
          "type" : "string"
        },
        "name_on_account" : {
          "type" : "string"
        },
        "bank_name" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "date_sent_for_verification" : {
          "type" : "string",
          "format" : "date-time"
        },
        "is_default_account" : {
          "type" : "boolean",
          "default" : false
        },
        "date_verified" : {
          "type" : "string",
          "format" : "date-time"
        },
        "verification_override" : {
          "type" : "boolean",
          "default" : false
        },
        "verification_notes" : {
          "type" : "string"
        },
        "user_token" : {
          "type" : "string"
        },
        "business_token" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "ach_response_model"
      }
    },
    "velocity_control_balance_response" : {
      "type" : "object",
      "required" : [ "amount_limit", "available", "currency_code", "velocity_window" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "association" : {
          "$ref" : "#/definitions/spend_control_association"
        },
        "merchant_scope" : {
          "$ref" : "#/definitions/merchant_scope"
        },
        "usage_limit" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : -1.0
        },
        "approvals_only" : {
          "type" : "boolean",
          "default" : false
        },
        "include_purchases" : {
          "type" : "boolean",
          "default" : false
        },
        "include_withdrawals" : {
          "type" : "boolean",
          "default" : false
        },
        "include_transfers" : {
          "type" : "boolean",
          "default" : false
        },
        "include_cashback" : {
          "type" : "boolean",
          "default" : false
        },
        "include_credits" : {
          "type" : "boolean",
          "default" : false
        },
        "currency_code" : {
          "type" : "string"
        },
        "amount_limit" : {
          "type" : "number",
          "minimum" : 0.0
        },
        "velocity_window" : {
          "type" : "string",
          "enum" : [ "DAY", "WEEK", "MONTH", "LIFETIME", "TRANSACTION" ]
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "available" : {
          "description" : "Available balance",
          "$ref" : "#/definitions/available"
        }
      },
      "xml" : {
        "name" : "velocity_control_balance_response"
      }
    },
    "velocity_control_response" : {
      "type" : "object",
      "required" : [ "amount_limit", "currency_code", "velocity_window" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "association" : {
          "$ref" : "#/definitions/spend_control_association"
        },
        "merchant_scope" : {
          "$ref" : "#/definitions/merchant_scope"
        },
        "usage_limit" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : -1.0
        },
        "approvals_only" : {
          "type" : "boolean",
          "default" : false
        },
        "include_purchases" : {
          "type" : "boolean",
          "default" : false
        },
        "include_withdrawals" : {
          "type" : "boolean",
          "default" : false
        },
        "include_transfers" : {
          "type" : "boolean",
          "default" : false
        },
        "include_cashback" : {
          "type" : "boolean",
          "default" : false
        },
        "include_credits" : {
          "type" : "boolean",
          "default" : false
        },
        "currency_code" : {
          "type" : "string"
        },
        "amount_limit" : {
          "type" : "number",
          "minimum" : 0.0
        },
        "velocity_window" : {
          "type" : "string",
          "enum" : [ "DAY", "WEEK", "MONTH", "LIFETIME", "TRANSACTION" ]
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "velocity_control_response"
      }
    },
    "digital_wallet_token_transition_request" : {
      "type" : "object",
      "required" : [ "digital_wallet_token", "state" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "reason_code" : {
          "type" : "string",
          "enum" : [ "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21" ]
        },
        "token_reference_id" : {
          "type" : "string"
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "TOKEN_SERVICE_PROVIDER", "TOKEN_SERVICE_PROVIDER_API", "DIGITAL_WALLET", "API", "IVR", "FRAUD", "ADMIN", "SYSTEM" ]
        },
        "digital_wallet_token" : {
          "$ref" : "#/definitions/digital_wallet_token_hash"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "SUSPENDED", "TERMINATED" ]
        },
        "reason" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "override_tsp_error" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "digital_wallet_token_transition_request"
      }
    },
    "cardholder_metadata" : {
      "type" : "object",
      "properties" : {
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "cardholder_metadata"
      }
    },
    "auto_commando_mode_request" : {
      "type" : "object",
      "required" : [ "gateway_response", "program_gateway_funding_source", "velocity_control_request" ],
      "properties" : {
        "program_gateway_funding_source" : {
          "$ref" : "#/definitions/internal_funding_source"
        },
        "gateway_response" : {
          "$ref" : "#/definitions/InternalGatewayResponse"
        },
        "velocity_control_request" : {
          "$ref" : "#/definitions/velocity_control_check_request"
        },
        "mcc_groups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "PushToCardListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/push_to_card_response"
          }
        }
      }
    },
    "cardholder_note_update_request_model" : {
      "type" : "object",
      "required" : [ "description" ],
      "properties" : {
        "description" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "cardholder_note_update_request_model"
      }
    },
    "merchant_model" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "contact" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "contact_email" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "longitude" : {
          "type" : "number",
          "format" : "float"
        },
        "latitude" : {
          "type" : "number",
          "format" : "float"
        },
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2
        },
        "province" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "token" : {
          "type" : "string",
          "description" : "The unique identifier of the merchant",
          "minLength" : 1,
          "maxLength" : 36
        },
        "partial_auth_flag" : {
          "type" : "boolean",
          "default" : true
        }
      },
      "xml" : {
        "name" : "merchant_model"
      }
    },
    "Bill Payment Completion Request" : {
      "type" : "object",
      "required" : [ "network_reference_id", "original_transaction_token" ],
      "properties" : {
        "network_reference_id" : {
          "type" : "string"
        },
        "original_transaction_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      }
    },
    "calculation_schedule" : {
      "type" : "object",
      "required" : [ "name", "step_values", "steps", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "value_type" : {
          "type" : "string",
          "enum" : [ "AMOUNT", "PERCENT" ],
          "default" : "PERCENT"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 32
        },
        "steps" : {
          "type" : "array",
          "items" : {
            "type" : "number"
          }
        },
        "step_values" : {
          "type" : "array",
          "items" : {
            "type" : "number"
          }
        }
      },
      "xml" : {
        "name" : "calculation_schedule"
      }
    },
    "commando_mode_request" : {
      "type" : "object",
      "required" : [ "commando_mode_enables", "program_gateway_funding_source_token" ],
      "properties" : {
        "program_gateway_funding_source_token" : {
          "type" : "string"
        },
        "real_time_standin_criteria" : {
          "$ref" : "#/definitions/real_time_standin_criteria"
        },
        "commando_mode_enables" : {
          "$ref" : "#/definitions/commando_mode_enables"
        },
        "token" : {
          "type" : "string"
        }
      }
    },
    "digital_wallet_android_pay_provision_request" : {
      "type" : "object",
      "required" : [ "card_token", "device_id", "device_type", "provisioning_app_version", "wallet_account_id" ],
      "properties" : {
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "device_type" : {
          "type" : "string",
          "enum" : [ "MOBILE_PHONE", "WATCH", "TABLET" ]
        },
        "provisioning_app_version" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "wallet_account_id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "device_id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 24
        }
      },
      "xml" : {
        "name" : "digital_wallet_android_pay_provision_request"
      }
    },
    "DepositAccountUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "allow_immediate_credit" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "BusinessCardHolderModel" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "notes" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "ip_address" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 39
        },
        "password" : {
          "type" : "string",
          "description" : "Strong password required",
          "minLength" : 1,
          "maxLength" : 255
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "account_holder_group_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "identifications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdentificationRequestModel"
          }
        },
        "business_name_legal" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "business_name_dba" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "office_location" : {
          "$ref" : "#/definitions/AddressRequestModel"
        },
        "in_current_location_since" : {
          "type" : "string",
          "format" : "date-time"
        },
        "website" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "date_established" : {
          "type" : "string",
          "format" : "date-time"
        },
        "general_business_description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "history" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "business_type" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "international_office_locations" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "taxpayer_id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "duns_number" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "primary_contact" : {
          "$ref" : "#/definitions/PrimaryContactInfoModel"
        },
        "incorporation" : {
          "$ref" : "#/definitions/BusinessIncorporationRequestModel"
        },
        "proprietor_or_officer" : {
          "$ref" : "#/definitions/BusinessProprietorRequestModel"
        }
      }
    },
    "card_inventory_response" : {
      "type" : "object",
      "required" : [ "created_time", "package_id", "starting_inventory" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "token" : {
          "type" : "string"
        },
        "package_id" : {
          "type" : "string"
        },
        "starting_inventory" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "xml" : {
        "name" : "card_inventory_response"
      }
    },
    "cardholder_balance" : {
      "type" : "object",
      "required" : [ "available_balance", "balances", "credit_balance", "currency_code", "ledger_balance", "pending_credits" ],
      "properties" : {
        "currency_code" : {
          "type" : "string"
        },
        "ledger_balance" : {
          "type" : "number"
        },
        "available_balance" : {
          "type" : "number"
        },
        "credit_balance" : {
          "type" : "number"
        },
        "pending_credits" : {
          "type" : "number"
        },
        "impacted_amount" : {
          "type" : "number"
        },
        "balances" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/cardholder_balance"
          }
        }
      },
      "xml" : {
        "name" : "cardholder_balance"
      }
    },
    "avs_information" : {
      "type" : "object",
      "properties" : {
        "street_address" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string"
        },
        "postal_code" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "avs_information"
      }
    },
    "digital_wallet_token_transition_response" : {
      "type" : "object",
      "required" : [ "channel", "digital_wallet_token", "fulfillment_status", "state", "token", "type" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "digital_wallet_token" : {
          "$ref" : "#/definitions/digital_wallet_token_hash"
        },
        "card_swap" : {
          "$ref" : "#/definitions/card_swap_hash"
        },
        "type" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "TOKEN_SERVICE_PROVIDER", "DIGITAL_WALLET", "API", "IVR", "FRAUD", "ADMIN", "SYSTEM" ]
        },
        "state" : {
          "type" : "string",
          "enum" : [ "REQUESTED", "REQUEST_DECLINED", "ACTIVE", "SUSPENDED", "TERMINATED" ]
        },
        "fulfillment_status" : {
          "type" : "string",
          "enum" : [ "DECISION_RED", "DECISION_YELLOW", "DECISION_GREEN", "REJECTED", "PROVISIONED" ]
        },
        "reason" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "reason_code" : {
          "type" : "string",
          "enum" : [ "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21" ]
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "xml" : {
        "name" : "digital_wallet_token_transition_response"
      }
    },
    "control_token_response" : {
      "type" : "object",
      "required" : [ "control_token" ],
      "properties" : {
        "control_token" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "control_token_response"
      }
    },
    "webhook_base_model" : {
      "type" : "object",
      "required" : [ "config", "events", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "config" : {
          "$ref" : "#/definitions/webhook_config_model"
        },
        "events" : {
          "type" : "array",
          "description" : "An array of event types",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "one_time_request_model" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "password" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "one_time_request_model"
      }
    },
    "push_to_card_request" : {
      "type" : "object",
      "required" : [ "address_1", "city", "country", "cvv", "exp_date", "pan", "state", "user_token", "zip" ],
      "properties" : {
        "address_1" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "address_2" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 2
        },
        "zip" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name_on_card" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50
        },
        "pan" : {
          "type" : "string"
        },
        "cvv" : {
          "type" : "string"
        },
        "exp_date" : {
          "type" : "string"
        }
      }
    },
    "card_product_request" : {
      "type" : "object",
      "required" : [ "name", "start_date" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 40
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "config" : {
          "$ref" : "#/definitions/card_product_config"
        }
      },
      "xml" : {
        "name" : "card_product_request"
      }
    },
    "UserTransitionListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserTransitionResponse"
          }
        }
      }
    },
    "AcceptedCountriesListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/accepted_countries_model"
          }
        }
      }
    },
    "ReversalModel" : {
      "type" : "object",
      "required" : [ "amount", "original_transaction_token" ],
      "properties" : {
        "network_fees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/network_fee_model"
          }
        },
        "webhook" : {
          "$ref" : "#/definitions/webhook"
        },
        "original_transaction_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number"
        },
        "find_original_window_days" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_advice" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "kyc_response" : {
      "type" : "object",
      "required" : [ "created_time", "last_modified_time" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "token" : {
          "type" : "string"
        },
        "user_token" : {
          "type" : "string"
        },
        "business_token" : {
          "type" : "string"
        },
        "result" : {
          "$ref" : "#/definitions/result"
        },
        "manual_override" : {
          "type" : "boolean",
          "default" : false
        },
        "notes" : {
          "type" : "string"
        },
        "questions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/KYCQuestion"
          }
        },
        "reference_id" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "kyc_response"
      }
    },
    "result" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string"
        },
        "codes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/result_code"
          }
        },
        "failed_questions_count" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "xml" : {
        "name" : "result"
      }
    },
    "ShippingInformationResponse" : {
      "type" : "object",
      "properties" : {
        "method" : {
          "type" : "string",
          "enum" : [ "FEDEX_EXPEDITED", "FEDEX_REGULAR", "UPS_EXPEDITED", "UPS_REGULAR", "USPS_EXPEDITED", "USPS_REGULAR" ]
        },
        "return_address" : {
          "$ref" : "#/definitions/FulfillmentAddressResponse"
        },
        "recipient_address" : {
          "$ref" : "#/definitions/FulfillmentAddressResponse"
        },
        "care_of_line" : {
          "type" : "string",
          "description" : "255 char max"
        }
      }
    },
    "ValidationsRequest" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "$ref" : "#/definitions/UserValidationRequest"
        }
      }
    },
    "base_ach_extended_response_model" : {
      "type" : "object",
      "required" : [ "account_suffix", "account_type", "active", "created_time", "last_modified_time", "name_on_account", "token" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "token" : {
          "type" : "string"
        },
        "account_suffix" : {
          "type" : "string"
        },
        "verification_status" : {
          "type" : "string"
        },
        "account_type" : {
          "type" : "string"
        },
        "name_on_account" : {
          "type" : "string"
        },
        "bank_name" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "date_sent_for_verification" : {
          "type" : "string",
          "format" : "date-time"
        },
        "is_default_account" : {
          "type" : "boolean",
          "default" : false
        },
        "date_verified" : {
          "type" : "string",
          "format" : "date-time"
        },
        "verification_override" : {
          "type" : "boolean",
          "default" : false
        },
        "verification_notes" : {
          "type" : "string"
        },
        "routing_number" : {
          "type" : "string"
        },
        "account_number" : {
          "type" : "string"
        }
      }
    },
    "direct_deposit_account_transition_request" : {
      "type" : "object",
      "required" : [ "account_token", "channel" ],
      "properties" : {
        "account_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "state" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "SUSPENDED", "TERMINATED", "UNSUPPORTED", "UNACTIVATED" ]
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "IVR", "FRAUD", "ADMIN", "SYSTEM", "NETWORK", "PROD_SUPPORT", "UNSUPPORTED" ]
        },
        "reason" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      }
    },
    "withdrawal_request_model" : {
      "type" : "object",
      "required" : [ "amount", "card_token", "mid" ],
      "properties" : {
        "account_type" : {
          "type" : "string",
          "enum" : [ "checking", "savings", "credit" ]
        },
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "pin" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 15
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "amount" : {
          "type" : "number"
        },
        "card_acceptor" : {
          "$ref" : "#/definitions/card_acceptor_model"
        },
        "webhook" : {
          "$ref" : "#/definitions/webhook"
        }
      },
      "xml" : {
        "name" : "withdrawal_request_model"
      }
    },
    "card_inventory_request" : {
      "type" : "object",
      "required" : [ "package_id", "starting_inventory" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "package_id" : {
          "type" : "string",
          "description" : "Package ID assigned by card fulfillment"
        },
        "starting_inventory" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 1.0
        }
      },
      "xml" : {
        "name" : "card_inventory_request"
      }
    },
    "ReplacementAmount" : {
      "type" : "object",
      "properties" : {
        "transaction_amount" : {
          "type" : "number"
        },
        "settlement_amount" : {
          "type" : "number"
        },
        "transaction_fee" : {
          "type" : "number"
        },
        "settlement_fee" : {
          "type" : "number"
        }
      }
    },
    "auto_reload_response_model" : {
      "type" : "object",
      "required" : [ "created_time", "currency_code", "last_modified_time", "order_scope" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "funding_source_token" : {
          "type" : "string",
          "description" : "Required when order scope is GPA",
          "minLength" : 1,
          "maxLength" : 36
        },
        "funding_source_address_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "association" : {
          "$ref" : "#/definitions/auto_reload_association"
        },
        "order_scope" : {
          "description" : "either GPA or MSA is required",
          "$ref" : "#/definitions/order_scope"
        },
        "currency_code" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "auto_reload_response_model"
      }
    },
    "card_reorder_request" : {
      "type" : "object",
      "properties" : {
        "card_batch_label" : {
          "type" : "string",
          "description" : "May only contain alphanumeric, hyphens, and underscore characters",
          "minLength" : 1,
          "maxLength" : 50,
          "pattern" : "^[\\w-]*$"
        }
      }
    },
    "jit_funding_paymentcard_funding_source" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "refunds_destination" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50,
          "enum" : [ "GATEWAY", "GPA", "WATERFALL" ]
        }
      }
    },
    "config" : {
      "type" : "object",
      "properties" : {
        "authorization_controls" : {
          "$ref" : "#/definitions/authorization_controls"
        }
      },
      "xml" : {
        "name" : "config"
      }
    },
    "gpa_returns" : {
      "type" : "object",
      "required" : [ "amount", "created_time", "funding", "funding_source_token", "last_modified_time", "response", "state", "token", "transaction_token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "tags" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "transaction_token" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "response" : {
          "$ref" : "#/definitions/response"
        },
        "funding" : {
          "$ref" : "#/definitions/funding"
        },
        "funding_source_token" : {
          "type" : "string"
        },
        "funding_source_address_token" : {
          "type" : "string"
        },
        "jit_funding" : {
          "$ref" : "#/definitions/jit_funding_api"
        },
        "original_order_token" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "gpa_returns"
      }
    },
    "transaction_controls" : {
      "type" : "object",
      "properties" : {
        "accepted_countries_token" : {
          "type" : "string",
          "description" : "50 char max (default = accept_us_only)"
        },
        "always_require_pin" : {
          "type" : "boolean",
          "default" : false
        },
        "always_require_icc" : {
          "type" : "boolean",
          "default" : false
        },
        "allow_gpa_auth" : {
          "type" : "boolean",
          "default" : false
        },
        "require_card_not_present_card_security_code" : {
          "type" : "boolean",
          "default" : false
        },
        "allow_mcc_group_authorization_controls" : {
          "type" : "boolean",
          "default" : false
        },
        "allow_first_pin_set_via_financial_transaction" : {
          "type" : "boolean",
          "default" : false
        },
        "ignore_card_suspended_state" : {
          "type" : "boolean",
          "default" : false
        },
        "allow_chip_fallback" : {
          "type" : "boolean",
          "default" : false
        },
        "allow_network_load" : {
          "type" : "boolean",
          "default" : false
        },
        "allow_network_load_card_activation" : {
          "type" : "boolean",
          "default" : false
        },
        "allow_quasi_cash" : {
          "type" : "boolean",
          "default" : false
        },
        "enable_partial_auth_approval" : {
          "type" : "boolean",
          "default" : false
        },
        "address_verification" : {
          "$ref" : "#/definitions/avs_controls"
        }
      }
    },
    "ChargebackUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "reason_description" : {
          "type" : "string",
          "description" : "Either 'reason_description' or 'reason_code' is required",
          "enum" : [ "SERVICE_NOT_PROVIDED_MERCHANDISE_NOT_RECEIVED", "CANCELLED_RECURRING_TRANSACTION", "NOT_AS_DESCRIBED_OR_DEFECTIVE_MERCHANDISE", "FRAUD_MULTIPLE_TRANSACTIONS", "FRAUD_TRANSACTION", "NO_AUTHORIZATION", "LATE_PRESENTMENT", "TRANSACTION_NOT_RECOGNIZED", "INCORRECT_CURRENCY", "INCORRECT_TRANSACTION_CODE", "INCORRECT_CURRENCY_OR_TRANSACTION_CODE", "INCORRECT_TRANSACTION_AMOUNT", "INCORRECT_ACCOUNT_NUMBER", "INCORRECT_TRANSACTION_AMOUNT_OR_ACCOUNT_NUMBER", "NOT_AUTHORIZED_CARD_PRESENT", "NOT_AUTHORIZED_CARD_ABSENT", "CREDIT_NOT_PROCESSED", "NON_RECEIPT_OF_CASH_OR_LOAD_TRANSACTION_VALUE_AT_ATM" ]
        },
        "reason_code" : {
          "type" : "string",
          "description" : "Either 'reason_code' or 'reason_description' is required"
        }
      }
    },
    "clearing_and_settlement" : {
      "type" : "object",
      "properties" : {
        "overdraft_destination" : {
          "type" : "string",
          "description" : "Default value of GPA does not apply when JIT funding is enabled",
          "enum" : [ "GPA", "MSA", "MERCHANT_CAMPAIGN_ACCOUNT", "GLOBAL_OVERDRAFT_ACCOUNT" ],
          "default" : "GPA"
        }
      },
      "xml" : {
        "name" : "clearing_and_settlement"
      }
    },
    "digital_wallet_android_pay_provision_response" : {
      "type" : "object",
      "required" : [ "card_token", "created_time", "last_modified_time", "push_tokenize_request_data" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "card_token" : {
          "type" : "string"
        },
        "push_tokenize_request_data" : {
          "$ref" : "#/definitions/push_tokenize_request_data"
        }
      },
      "xml" : {
        "name" : "digital_wallet_android_pay_provision_response"
      }
    },
    "card_acceptor_model" : {
      "type" : "object",
      "properties" : {
        "mcc" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 5
        },
        "partial_approval_capable" : {
          "type" : "boolean",
          "default" : false
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50
        },
        "address" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string"
        },
        "ecommerce_security_level_indicator" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "card_acceptor_model"
      }
    },
    "other_poi" : {
      "type" : "object",
      "properties" : {
        "allow" : {
          "type" : "boolean",
          "default" : true
        },
        "card_presence_required" : {
          "type" : "boolean",
          "description" : "Default = false",
          "default" : false
        },
        "cardholder_presence_required" : {
          "type" : "boolean",
          "description" : "Default = false",
          "default" : false
        }
      }
    },
    "mcc_group_update_model" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "mccs" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 500,
          "minItems" : 1
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "config" : {
          "$ref" : "#/definitions/config"
        }
      },
      "xml" : {
        "name" : "mcc_group_update_model"
      }
    },
    "card_life_cycle" : {
      "type" : "object",
      "properties" : {
        "activate_upon_issue" : {
          "type" : "boolean",
          "default" : false
        },
        "expiration_offset" : {
          "$ref" : "#/definitions/expiration_offset_with_minimum"
        },
        "card_service_code" : {
          "type" : "integer",
          "format" : "int32",
          "default" : 101
        },
        "update_expiration_upon_activation" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "card_life_cycle"
      }
    },
    "shipping" : {
      "type" : "object",
      "properties" : {
        "method" : {
          "type" : "string",
          "enum" : [ "FEDEX_EXPEDITED", "FEDEX_REGULAR", "UPS_EXPEDITED", "UPS_REGULAR", "USPS_EXPEDITED", "USPS_REGULAR" ]
        },
        "return_address" : {
          "$ref" : "#/definitions/fulfillment_address_request"
        },
        "recipient_address" : {
          "$ref" : "#/definitions/fulfillment_address_request"
        },
        "care_of_line" : {
          "type" : "string",
          "description" : "255 char max"
        }
      },
      "xml" : {
        "name" : "shipping"
      }
    },
    "pin_request" : {
      "type" : "object",
      "required" : [ "control_token", "pin" ],
      "properties" : {
        "control_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "pin" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "pin_request"
      }
    },
    "UserValidationRequest" : {
      "type" : "object",
      "properties" : {
        "birth_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-dd"
        },
        "phone" : {
          "type" : "string",
          "description" : "Phone #",
          "minLength" : 0,
          "maxLength" : 255
        },
        "ssn" : {
          "type" : "string",
          "description" : "Last four digits of SSN",
          "minLength" : 0,
          "maxLength" : 255
        },
        "random_name_line1_postfix" : {
          "type" : "string",
          "description" : "Six-char random name postfix",
          "minLength" : 6,
          "maxLength" : 6
        }
      }
    },
    "gpa" : {
      "type" : "object",
      "required" : [ "reload_amount", "trigger_amount" ],
      "properties" : {
        "trigger_amount" : {
          "type" : "number",
          "minimum" : 0.01
        },
        "reload_amount" : {
          "type" : "number",
          "minimum" : 0.01
        }
      },
      "xml" : {
        "name" : "gpa"
      }
    },
    "CommandoModeListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/commando_mode_response"
          }
        }
      }
    },
    "card_product_response" : {
      "type" : "object",
      "required" : [ "created_time", "last_modified_time", "name", "start_date" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 40
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "config" : {
          "$ref" : "#/definitions/card_product_config"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "card_product_response"
      }
    },
    "pan_response" : {
      "type" : "object",
      "required" : [ "card_token", "created_time", "last_modified_time", "user_token" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "user_token" : {
          "type" : "string",
          "description" : "The unique identifier of the card user"
        },
        "card_token" : {
          "type" : "string",
          "description" : "The unique identifier of the card"
        }
      },
      "xml" : {
        "name" : "pan_response"
      }
    },
    "webhook_response_model" : {
      "type" : "object",
      "required" : [ "config", "events", "name" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "config" : {
          "$ref" : "#/definitions/webhook_config_model"
        },
        "events" : {
          "type" : "array",
          "description" : "An array of event types",
          "items" : {
            "type" : "string"
          }
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "xml" : {
        "name" : "webhook_response_model"
      }
    },
    "LoadRuleListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/load_velocity_model"
          }
        }
      }
    },
    "clearing_file_request" : {
      "type" : "object",
      "required" : [ "transaction_tokens" ],
      "properties" : {
        "transaction_tokens" : {
          "type" : "array",
          "description" : "A list of 'clearing_transaction_request' items",
          "items" : {
            "$ref" : "#/definitions/clearing_record_request_model"
          }
        },
        "wait_timeout" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Timeout in seconds"
        },
        "batch_id" : {
          "type" : "string",
          "description" : "A string representing batch ID"
        },
        "clearing_folder" : {
          "type" : "string"
        },
        "encrypt_file" : {
          "type" : "boolean",
          "default" : false
        },
        "create_completion_file" : {
          "type" : "boolean",
          "default" : false
        },
        "settlement_date" : {
          "type" : "string"
        },
        "token_pan" : {
          "type" : "string"
        }
      }
    },
    "fee_transfer_response" : {
      "type" : "object",
      "required" : [ "business_token", "created_time", "fees", "token", "user_token" ],
      "properties" : {
        "tags" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "fees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/fee_detail"
          }
        },
        "token" : {
          "type" : "string",
          "description" : "36 char max",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "fee_transfer_response"
      }
    },
    "DigitalWalletTokenTransitionListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/digital_wallet_token_transition_response"
          }
        }
      }
    },
    "balance_inquiry_request_model" : {
      "type" : "object",
      "required" : [ "account_type", "card_acceptor", "card_token", "mid" ],
      "properties" : {
        "network_fees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/network_fee_model"
          }
        },
        "webhook" : {
          "$ref" : "#/definitions/webhook"
        },
        "account_type" : {
          "type" : "string",
          "enum" : [ "checking", "savings", "credit" ]
        },
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "pin" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 15
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "card_acceptor" : {
          "$ref" : "#/definitions/card_acceptor_model"
        }
      },
      "xml" : {
        "name" : "balance_inquiry_request_model"
      }
    },
    "ClearingRetryModel" : {
      "type" : "object",
      "required" : [ "original_failed_transaction_token" ],
      "properties" : {
        "original_failed_transaction_token" : {
          "type" : "string"
        },
        "new_network_reference" : {
          "type" : "string"
        },
        "new_approval_code" : {
          "type" : "string"
        },
        "new_stan" : {
          "type" : "string"
        },
        "find_original_window_days" : {
          "type" : "integer",
          "format" : "int32"
        },
        "new_processing_code" : {
          "type" : "string"
        }
      }
    },
    "AutoReloadListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/auto_reload_response_model"
          }
        }
      }
    },
    "ProgramTransferListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/program_transfer_response"
          }
        }
      }
    },
    "peer_transfer_response" : {
      "type" : "object",
      "required" : [ "amount", "created_time", "currency_code", "token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "tags" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string"
        },
        "currency_code" : {
          "type" : "string"
        },
        "sender_user_token" : {
          "type" : "string"
        },
        "recipient_user_token" : {
          "type" : "string"
        },
        "sender_business_token" : {
          "type" : "string"
        },
        "recipient_business_token" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "xml" : {
        "name" : "peer_transfer_response"
      }
    },
    "base_ach_request_model" : {
      "type" : "object",
      "required" : [ "account_number", "account_type", "name_on_account", "routing_number" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "account_number" : {
          "type" : "string"
        },
        "routing_number" : {
          "type" : "string",
          "readOnly" : true
        },
        "name_on_account" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "account_type" : {
          "type" : "string",
          "enum" : [ "checking", "savings", "corporate", "loan" ]
        },
        "bank_name" : {
          "type" : "string"
        },
        "verification_override" : {
          "type" : "boolean",
          "default" : false
        },
        "verification_notes" : {
          "type" : "string"
        },
        "is_default_account" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "internal_funding_source" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "account" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "debit_account" : {
          "$ref" : "#/definitions/internal_account"
        },
        "is_default_account" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "PrimaryContactInfoModel" : {
      "type" : "object",
      "properties" : {
        "full_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "title" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "department" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "extension" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "fax" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "mobile" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "email" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        }
      }
    },
    "card_product_fulfillment" : {
      "type" : "object",
      "required" : [ "card_personalization" ],
      "properties" : {
        "shipping" : {
          "$ref" : "#/definitions/shipping"
        },
        "card_personalization" : {
          "$ref" : "#/definitions/card_personalization"
        },
        "payment_instrument" : {
          "type" : "string",
          "enum" : [ "PHYSICAL_MSR", "PHYSICAL_ICC", "PHYSICAL_CONTACTLESS", "PHYSICAL_COMBO", "VIRTUAL_PAN" ],
          "default" : "PHYSICAL_MSR"
        },
        "package_id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50,
          "default" : "0"
        },
        "all_zero_card_security_code" : {
          "type" : "boolean",
          "default" : false
        },
        "bin_prefix" : {
          "type" : "string"
        },
        "bulk_ship" : {
          "type" : "boolean",
          "default" : false
        },
        "pan_length" : {
          "type" : "string",
          "default" : "16"
        },
        "fulfillment_provider" : {
          "type" : "string",
          "enum" : [ "PERFECTPLASTIC", "ARROWEYE", "IDEMIA", "IDEMIA_UK", "IDEMIA_FR", "IDEMIA_CZ", "IDEMIA_APAC", "IDEMIA_PL", "GEMALTO", "NITECREST", "OBERTHUR" ],
          "default" : "PERFECTPLASTIC"
        },
        "allow_card_creation" : {
          "type" : "boolean",
          "default" : true
        },
        "uppercase_name_lines" : {
          "type" : "boolean",
          "default" : true
        },
        "enable_offline_pin" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "card_product_fulfillment"
      }
    },
    "create_caches_response" : {
      "type" : "object",
      "properties" : {
        "created" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "already_exists" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "errors" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/cache_error"
          }
        }
      },
      "xml" : {
        "name" : "create_caches_response"
      }
    },
    "DirectDepositListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DepositDepositResponse"
          }
        }
      }
    },
    "client_access_token_request" : {
      "type" : "object",
      "required" : [ "card_token" ],
      "properties" : {
        "application_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        }
      },
      "xml" : {
        "name" : "client_access_token_request"
      }
    },
    "risk_assessment" : {
      "type" : "object",
      "properties" : {
        "score" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        }
      }
    },
    "DepositDepositResponse" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "CREDIT", "DEBIT" ]
        },
        "state" : {
          "type" : "string",
          "enum" : [ "PENDING", "APPLIED", "REVERSED", "REJECTED" ]
        },
        "settlement_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "state_reason" : {
          "type" : "string"
        },
        "state_reason_code" : {
          "type" : "string"
        },
        "direct_deposit_account_token" : {
          "type" : "string"
        },
        "user_token" : {
          "type" : "string"
        },
        "business_token" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "standard_entry_class_code" : {
          "type" : "string"
        },
        "company_name" : {
          "type" : "string"
        },
        "company_discretionary_data" : {
          "type" : "string"
        },
        "company_identification" : {
          "type" : "string"
        },
        "company_entry_description" : {
          "type" : "string"
        },
        "individual_identification_number" : {
          "type" : "string"
        },
        "individual_name" : {
          "type" : "string"
        }
      }
    },
    "auth_control_exempt_mids_update_request" : {
      "type" : "object",
      "properties" : {
        "active" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "transaction_card_acceptor" : {
      "type" : "object",
      "properties" : {
        "mid" : {
          "type" : "string"
        },
        "mcc" : {
          "type" : "string"
        },
        "network_mid" : {
          "type" : "string"
        },
        "mcc_groups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string"
        },
        "address" : {
          "type" : "string"
        },
        "city" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        },
        "poi" : {
          "$ref" : "#/definitions/terminal_model"
        }
      },
      "xml" : {
        "name" : "transaction_card_acceptor"
      }
    },
    "gateway_program_funding_source_update_request" : {
      "type" : "object",
      "required" : [ "basic_auth_password", "basic_auth_username", "url" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "url" : {
          "type" : "string",
          "description" : "Empty string (disabled); must be HTTPS",
          "minLength" : 0,
          "maxLength" : 250
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "basic_auth_username" : {
          "type" : "string",
          "description" : "Required if URL is present",
          "minLength" : 1,
          "maxLength" : 50
        },
        "basic_auth_password" : {
          "type" : "string",
          "description" : "Required if URL is present; must contain upper and lowercase letters, numbers, and symbols",
          "minLength" : 20,
          "maxLength" : 100
        },
        "timeout_millis" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total timeout in milliseconds for gateway processing",
          "minimum" : 1000.0,
          "maximum" : 7000.0
        },
        "custom_header" : {
          "type" : "object",
          "description" : "Custom headers",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "use_mtls" : {
          "type" : "boolean",
          "description" : "Use MTLS for funding request",
          "default" : false
        }
      }
    },
    "DigitalWalletTokenRequestorMapUpdateModel" : {
      "type" : "object",
      "required" : [ "digital_wallet_token_requestor_id", "digital_wallet_token_requestor_name", "network" ],
      "properties" : {
        "network" : {
          "type" : "string"
        },
        "digital_wallet_token_requestor_id" : {
          "type" : "string"
        },
        "digital_wallet_token_requestor_name" : {
          "type" : "string"
        }
      }
    },
    "digital_wallet_token_device" : {
      "type" : "object",
      "properties" : {
        "device_type" : {
          "type" : "string",
          "enum" : [ "UNKNOWN", "MOBILE_PHONE", "WATCH", "TABLET", "MOBILE_PHONE_OR_TABLET", "PERSONAL_COMPUTER" ]
        },
        "device_lang_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 3
        },
        "device_id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50
        },
        "device_number" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50
        },
        "device_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50
        },
        "device_location" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50
        },
        "device_ip_address" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50
        }
      },
      "xml" : {
        "name" : "digital_wallet_token_device"
      }
    },
    "auth_control_exempt_mids_request" : {
      "type" : "object",
      "required" : [ "mid", "name" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "association" : {
          "$ref" : "#/definitions/spend_control_association"
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "card_holder_address_update_model" : {
      "type" : "object",
      "properties" : {
        "first_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "last_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "address_1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address_2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "is_default_address" : {
          "type" : "boolean",
          "default" : false
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "postal_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        }
      },
      "xml" : {
        "name" : "card_holder_address_update_model"
      }
    },
    "airline" : {
      "type" : "object",
      "properties" : {
        "passenger_name" : {
          "type" : "string"
        },
        "depart_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "origination_city" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "airline"
      }
    },
    "msa_order_update_request" : {
      "type" : "object",
      "properties" : {
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddThh:mm:ssZ"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddThh:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "msa_order_update_request"
      }
    },
    "AuthControlListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/auth_control_response"
          }
        }
      }
    },
    "address_verification" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "street_address" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string"
        },
        "postal_code" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "address_verification"
      }
    },
    "avs_control_options" : {
      "type" : "object",
      "properties" : {
        "validate" : {
          "type" : "boolean",
          "default" : true
        },
        "decline_on_address_number_mismatch" : {
          "type" : "boolean",
          "default" : false
        },
        "decline_on_postal_code_mismatch" : {
          "type" : "boolean",
          "default" : true
        }
      },
      "xml" : {
        "name" : "avs_control_options"
      }
    },
    "internal_user" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "token" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "email" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "uses_parent_account" : {
          "type" : "boolean",
          "default" : false
        },
        "corporate_card_holder" : {
          "type" : "boolean",
          "default" : false
        },
        "user_accounts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/internal_account"
          }
        }
      }
    },
    "program_transfer_type_request" : {
      "type" : "object",
      "required" : [ "memo", "program_funding_source_token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "program_funding_source_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "tags" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "memo" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 99
        }
      },
      "xml" : {
        "name" : "program_transfer_type_request"
      }
    },
    "special" : {
      "type" : "object",
      "properties" : {
        "merchant_on_boarding" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "special"
      }
    },
    "ChargebackListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/chargeback_response"
          }
        }
      }
    },
    "account_holder_group_config" : {
      "type" : "object",
      "properties" : {
        "kyc_required" : {
          "type" : "string",
          "enum" : [ "ALWAYS", "CONDITIONAL", "NEVER" ]
        },
        "is_reloadable" : {
          "type" : "boolean",
          "default" : false
        },
        "real_time_fee_group_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "pre_kyc_controls" : {
          "$ref" : "#/definitions/pre_kyc_controls"
        }
      },
      "xml" : {
        "name" : "account_holder_group_config"
      }
    },
    "direct_deposit_account_response" : {
      "type" : "object",
      "required" : [ "account_number", "allow_immediate_credit", "business_token", "created_time", "last_modified_time", "routing_number", "state", "token", "user_token" ],
      "properties" : {
        "account_number" : {
          "type" : "string",
          "minLength" : 13,
          "maxLength" : 17
        },
        "routing_number" : {
          "type" : "string",
          "minLength" : 9,
          "maxLength" : 9
        },
        "token" : {
          "type" : "string",
          "minLength" : 36,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 36,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "minLength" : 36,
          "maxLength" : 36
        },
        "state" : {
          "type" : "string",
          "minLength" : 6,
          "maxLength" : 10
        },
        "allow_immediate_credit" : {
          "type" : "boolean",
          "default" : false
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      }
    },
    "BusinessTransitionRequest" : {
      "type" : "object",
      "required" : [ "business_token", "channel", "reason_code", "status" ],
      "properties" : {
        "idempotentHash" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "UNVERIFIED", "LIMITED", "ACTIVE", "SUSPENDED", "CLOSED" ]
        },
        "reason_code" : {
          "type" : "string",
          "enum" : [ "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21" ]
        },
        "reason" : {
          "type" : "string"
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "IVR", "FRAUD", "ADMIN", "SYSTEM" ]
        },
        "business_token" : {
          "type" : "string"
        }
      }
    },
    "internal_transaction_message" : {
      "type" : "object",
      "required" : [ "authorization_tranlog" ],
      "properties" : {
        "processing_start_time_millis" : {
          "type" : "integer",
          "format" : "int64"
        },
        "authorization_tranlog" : {
          "$ref" : "#/definitions/internal_authorization_transaction"
        },
        "funding_tranlog" : {
          "$ref" : "#/definitions/funding_tranlog"
        },
        "velocity_caches" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VelocityCache"
          }
        },
        "context" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "credit_debit_indicator" : {
          "type" : "string",
          "enum" : [ "CREDIT", "DEBIT", "NONE" ]
        }
      }
    },
    "card_holder_model" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "notes" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "ip_address" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 39
        },
        "password" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "account_holder_group_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "identifications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdentificationRequestModel"
          }
        },
        "honorific" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "gender" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1,
          "enum" : [ "F", "M" ]
        },
        "first_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "middle_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "last_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "email" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "birth_date" : {
          "type" : "string"
        },
        "corporate_card_holder" : {
          "type" : "boolean",
          "default" : false
        },
        "ssn" : {
          "type" : "string"
        },
        "passport_number" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "passport_expiration_date" : {
          "type" : "string"
        },
        "id_card_number" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "id_card_expiration_date" : {
          "type" : "string"
        },
        "nationality" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "company" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "parent_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "uses_parent_account" : {
          "type" : "boolean",
          "description" : "Default is false",
          "default" : false
        },
        "postal_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        }
      },
      "xml" : {
        "name" : "card_holder_model"
      }
    },
    "ACHReversalRequest" : {
      "type" : "object",
      "properties" : {
        "reason_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 3
        }
      }
    },
    "velocity_control_request" : {
      "type" : "object",
      "required" : [ "amount_limit", "currency_code", "velocity_window" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "association" : {
          "$ref" : "#/definitions/spend_control_association"
        },
        "merchant_scope" : {
          "$ref" : "#/definitions/merchant_scope"
        },
        "usage_limit" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : -1.0
        },
        "approvals_only" : {
          "type" : "boolean",
          "default" : false
        },
        "include_purchases" : {
          "type" : "boolean",
          "default" : false
        },
        "include_withdrawals" : {
          "type" : "boolean",
          "default" : false
        },
        "include_transfers" : {
          "type" : "boolean",
          "default" : false
        },
        "include_cashback" : {
          "type" : "boolean",
          "default" : false
        },
        "include_credits" : {
          "type" : "boolean",
          "default" : false
        },
        "currency_code" : {
          "type" : "string"
        },
        "amount_limit" : {
          "type" : "number",
          "minimum" : 0.0
        },
        "velocity_window" : {
          "type" : "string",
          "enum" : [ "DAY", "WEEK", "MONTH", "LIFETIME", "TRANSACTION" ]
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "velocity_control_request"
      }
    },
    "CardListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/card_response"
          }
        }
      }
    },
    "jit_program_response" : {
      "type" : "object",
      "required" : [ "jit_funding" ],
      "properties" : {
        "jit_funding" : {
          "$ref" : "#/definitions/jit_funding_api"
        }
      },
      "xml" : {
        "name" : "jit_program_response"
      }
    },
    "account_holder_group_request" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 40
        },
        "config" : {
          "$ref" : "#/definitions/account_holder_group_config"
        }
      },
      "xml" : {
        "name" : "account_holder_group_request"
      }
    },
    "clearing_record_request_model" : {
      "type" : "object",
      "required" : [ "amount", "card_token", "currency_code", "reconciliation_amount", "source_amount" ],
      "properties" : {
        "network_fees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/network_fee_model"
          }
        },
        "webhook" : {
          "$ref" : "#/definitions/webhook"
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "amount" : {
          "type" : "number"
        },
        "source_amount" : {
          "type" : "number"
        },
        "reconciliation_amount" : {
          "type" : "number"
        },
        "replacement_amount" : {
          "type" : "number"
        },
        "cardholder_billing_amount" : {
          "type" : "number"
        },
        "cashback" : {
          "type" : "number"
        },
        "cardholder_billing_conversion_rate" : {
          "type" : "number",
          "format" : "double"
        },
        "cardholder_billing_currency" : {
          "type" : "string"
        },
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "acquirer_reference_id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 23
        },
        "rrn" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 16
        },
        "stan" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 12
        },
        "processing_code" : {
          "type" : "string",
          "minLength" : 2,
          "maxLength" : 2
        },
        "acquirer_fee" : {
          "$ref" : "#/definitions/MoneyModel"
        },
        "issuer_fee" : {
          "$ref" : "#/definitions/MoneyModel"
        },
        "function_code" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 3
        },
        "reason_code" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 4
        },
        "approval_code" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 6
        },
        "transaction_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ"
        },
        "local_transaction_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ"
        },
        "settlement_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ"
        },
        "network_reference_id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 16
        },
        "find_original_window_days" : {
          "type" : "integer",
          "format" : "int32"
        },
        "batch_number" : {
          "type" : "string"
        },
        "batch_file_name" : {
          "type" : "string"
        },
        "sequence_number" : {
          "type" : "string"
        },
        "network" : {
          "type" : "string",
          "enum" : [ "DISCOVER", "MASTERCARD", "PULSE", "VISA" ]
        },
        "sub_network" : {
          "type" : "string",
          "description" : "Defaults to VISANET if network is VISA",
          "enum" : [ "VISANET", "VISANETDEBIT", "VISAINTERLINK", "VISAPLUS" ]
        },
        "card_acceptor" : {
          "$ref" : "#/definitions/card_acceptor_model"
        },
        "currency_code" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 3
        },
        "original_data_elements" : {
          "$ref" : "#/definitions/original_data_elements"
        },
        "preceding_related_transaction_token" : {
          "type" : "string"
        },
        "send_expiration_date" : {
          "type" : "boolean",
          "default" : false
        },
        "simulate_batch_for_clearing_record_hash" : {
          "type" : "boolean",
          "default" : false
        },
        "cross_border_indicator" : {
          "type" : "string",
          "enum" : [ "SINGLE_CURRENCY", "MULTI_CURRENCY", "REBATE", "UNKNOWN" ]
        },
        "token_pan" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 16
        },
        "mti" : {
          "type" : "string",
          "enum" : [ "0220", "0420" ],
          "default" : "0220"
        }
      },
      "xml" : {
        "name" : "clearing_record_request_model"
      }
    },
    "text" : {
      "type" : "object",
      "required" : [ "name_line_1" ],
      "properties" : {
        "name_line_1" : {
          "$ref" : "#/definitions/text_value"
        },
        "name_line_2" : {
          "$ref" : "#/definitions/text_value"
        },
        "name_line_3" : {
          "$ref" : "#/definitions/text_value"
        }
      }
    },
    "pre_kyc_controls" : {
      "type" : "object",
      "properties" : {
        "cash_access_enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "international_enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "balance_max" : {
          "type" : "number",
          "description" : "Minimum is 0.01",
          "minimum" : 0.01
        },
        "enable_non_program_loads" : {
          "type" : "boolean",
          "default" : false
        },
        "is_reloadable_pre_kyc" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "pre_kyc_controls"
      }
    },
    "digital_wallet_token_address_verification" : {
      "type" : "object",
      "properties" : {
        "validate" : {
          "type" : "boolean",
          "default" : true
        }
      },
      "xml" : {
        "name" : "digital_wallet_token_address_verification"
      }
    },
    "IdentificationResponseModel" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "SSN", "TIN", "SIN", "NIN", "PASSPORT_NUMBER", "DRIVERS_LICENSE", "BUSINESS_NUMBER", "BUSINESS_TAX_ID", "TAXPAYER_REFERENCE" ]
        },
        "value" : {
          "type" : "string",
          "readOnly" : true
        },
        "expiration_date" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "business_metadata" : {
      "type" : "object",
      "properties" : {
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "business_metadata"
      }
    },
    "peer_transfer_request" : {
      "type" : "object",
      "required" : [ "amount", "currency_code" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number"
        },
        "tags" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "memo" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 99
        },
        "sender_user_token" : {
          "type" : "string",
          "description" : "Required if 'send_business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "recipient_user_token" : {
          "type" : "string",
          "description" : "Required if 'recipient_business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "sender_business_token" : {
          "type" : "string",
          "description" : "Required if 'send_user_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "recipient_business_token" : {
          "type" : "string",
          "description" : "Required if 'recipient_business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "currency_code" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "peer_transfer_request"
      }
    },
    "commando_mode_transition_response" : {
      "type" : "object",
      "required" : [ "created_time" ],
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "commando_mode_token" : {
          "type" : "string"
        },
        "transition" : {
          "$ref" : "#/definitions/commando_mode_nested_transition"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "offer_order_request" : {
      "type" : "object",
      "required" : [ "offer_token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "offer_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "funding_source_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "funding_source_address_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "offer_order_request"
      }
    },
    "cardholder_authentication_data" : {
      "type" : "object",
      "properties" : {
        "electronic_commerce_indicator" : {
          "type" : "string"
        },
        "verification_result" : {
          "type" : "string"
        },
        "verification_value_created_by" : {
          "type" : "string"
        }
      }
    },
    "text_value" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        }
      }
    },
    "token_update_request" : {
      "type" : "object",
      "required" : [ "exp_date" ],
      "properties" : {
        "exp_date" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "is_default_account" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "token_update_request"
      }
    },
    "card_update_request" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "expedite" : {
          "type" : "boolean",
          "default" : false
        },
        "fulfillment" : {
          "$ref" : "#/definitions/fulfillment"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "chargeback_request" : {
      "type" : "object",
      "required" : [ "amount", "channel", "transaction_token" ],
      "properties" : {
        "reason_description" : {
          "type" : "string",
          "description" : "Either 'reason_description' or 'reason_code' is required",
          "enum" : [ "SERVICE_NOT_PROVIDED_MERCHANDISE_NOT_RECEIVED", "CANCELLED_RECURRING_TRANSACTION", "NOT_AS_DESCRIBED_OR_DEFECTIVE_MERCHANDISE", "FRAUD_MULTIPLE_TRANSACTIONS", "FRAUD_TRANSACTION", "NO_AUTHORIZATION", "LATE_PRESENTMENT", "TRANSACTION_NOT_RECOGNIZED", "INCORRECT_CURRENCY", "INCORRECT_TRANSACTION_CODE", "INCORRECT_CURRENCY_OR_TRANSACTION_CODE", "INCORRECT_TRANSACTION_AMOUNT", "INCORRECT_ACCOUNT_NUMBER", "INCORRECT_TRANSACTION_AMOUNT_OR_ACCOUNT_NUMBER", "NOT_AUTHORIZED_CARD_PRESENT", "NOT_AUTHORIZED_CARD_ABSENT", "CREDIT_NOT_PROCESSED", "NON_RECEIPT_OF_CASH_OR_LOAD_TRANSACTION_VALUE_AT_ATM" ]
        },
        "reason_code" : {
          "type" : "string",
          "description" : "Either 'reason_code' or 'reason_description' is required"
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "transaction_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number",
          "minimum" : 0.01
        },
        "memo" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 1024
        },
        "credit_user" : {
          "type" : "boolean",
          "default" : true
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "GATEWAY", "GATEWAY_AUTOMATED", "ISSUER", "ISSUER_AUTOMATED" ]
        }
      },
      "xml" : {
        "name" : "chargeback_request"
      }
    },
    "funding_response_model" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "accounting_balance" : {
          "type" : "number"
        },
        "available_balance" : {
          "type" : "number"
        },
        "transaction" : {
          "$ref" : "#/definitions/Gatewaylog"
        }
      },
      "xml" : {
        "name" : "funding_response_model"
      }
    },
    "offer_order_balances" : {
      "type" : "object",
      "required" : [ "available_balance", "balances", "credit_balance", "currency_code", "ledger_balance", "pending_credits" ],
      "properties" : {
        "currency_code" : {
          "type" : "string"
        },
        "ledger_balance" : {
          "type" : "number"
        },
        "available_balance" : {
          "type" : "number"
        },
        "credit_balance" : {
          "type" : "number"
        },
        "pending_credits" : {
          "type" : "number"
        },
        "impacted_amount" : {
          "type" : "number"
        },
        "balances" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/offer_order_balances"
          }
        }
      },
      "xml" : {
        "name" : "offer_order_balances"
      }
    },
    "Application" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "program" : {
          "type" : "string"
        },
        "environment" : {
          "type" : "string"
        },
        "program_short_code" : {
          "type" : "string"
        },
        "client_api_base_url" : {
          "type" : "string"
        },
        "assets_url" : {
          "type" : "string"
        },
        "access_code" : {
          "type" : "string"
        }
      }
    },
    "login_response_model" : {
      "type" : "object",
      "properties" : {
        "access_token" : {
          "$ref" : "#/definitions/access_token_response"
        },
        "user" : {
          "$ref" : "#/definitions/user_card_holder_response"
        }
      },
      "xml" : {
        "name" : "login_response_model"
      }
    },
    "base_ach_response_model" : {
      "type" : "object",
      "required" : [ "account_suffix", "account_type", "active", "created_time", "last_modified_time", "name_on_account", "token" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "token" : {
          "type" : "string"
        },
        "account_suffix" : {
          "type" : "string"
        },
        "verification_status" : {
          "type" : "string"
        },
        "account_type" : {
          "type" : "string"
        },
        "name_on_account" : {
          "type" : "string"
        },
        "bank_name" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "date_sent_for_verification" : {
          "type" : "string",
          "format" : "date-time"
        },
        "is_default_account" : {
          "type" : "boolean",
          "default" : false
        },
        "date_verified" : {
          "type" : "string",
          "format" : "date-time"
        },
        "verification_override" : {
          "type" : "boolean",
          "default" : false
        },
        "verification_notes" : {
          "type" : "string"
        }
      }
    },
    "msa_order_response" : {
      "type" : "object",
      "required" : [ "active", "aggregated_balances", "campaign_token", "created_time", "currency_code", "funding", "last_modified_time", "last_transaction_date", "order_balances", "purchase_amount", "reward_amount", "reward_trigger_amount", "transaction_token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "user_token" : {
          "type" : "string"
        },
        "business_token" : {
          "type" : "string"
        },
        "order_balances" : {
          "$ref" : "#/definitions/msa_balances"
        },
        "purchase_amount" : {
          "type" : "number"
        },
        "last_transaction_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddThh:mm:ssZ"
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddThh:mm:ssZ"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddThh:mm:ssZ"
        },
        "currency_code" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "reward_amount" : {
          "type" : "number"
        },
        "reward_trigger_amount" : {
          "type" : "number"
        },
        "unloaded_amount" : {
          "type" : "number"
        },
        "campaign_token" : {
          "type" : "string"
        },
        "funding" : {
          "$ref" : "#/definitions/funding"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "aggregated_balances" : {
          "$ref" : "#/definitions/msa_aggregated_balances"
        },
        "transaction_token" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "msa_order_response"
      }
    },
    "echo_ping_request" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "payload" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "echo_ping_request"
      }
    },
    "store_model" : {
      "type" : "object",
      "required" : [ "address1", "city", "merchant_token", "mid", "name", "state", "zip" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "contact" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "contact_email" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "longitude" : {
          "type" : "number",
          "format" : "float"
        },
        "latitude" : {
          "type" : "number",
          "format" : "float"
        },
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "province" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "token" : {
          "type" : "string",
          "description" : "The unique identifier of the merchant",
          "minLength" : 1,
          "maxLength" : 36
        },
        "partial_auth_flag" : {
          "type" : "boolean",
          "default" : true
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "network_mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "merchant_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "partial_approval_capable" : {
          "type" : "boolean",
          "default" : false
        },
        "keyed_auth_cvv_enforced" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "store_model"
      }
    },
    "BillingAddress" : {
      "type" : "object",
      "properties" : {
        "first_name" : {
          "type" : "string"
        },
        "last_name" : {
          "type" : "string"
        },
        "address" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string"
        },
        "compressed_zip" : {
          "type" : "string"
        }
      }
    },
    "accepted_countries_model" : {
      "type" : "object",
      "required" : [ "country_codes", "is_whitelist", "name" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string"
        },
        "is_whitelist" : {
          "type" : "boolean",
          "default" : false
        },
        "country_codes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "xml" : {
        "name" : "accepted_countries_model"
      }
    },
    "load_velocity_model" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "description" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "type" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "layers" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "amount" : {
          "type" : "number"
        },
        "days" : {
          "type" : "number"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "load_velocity_model"
      }
    },
    "program_transfer_response" : {
      "type" : "object",
      "required" : [ "amount", "currency_code", "transaction_token", "type_token" ],
      "properties" : {
        "fees" : {
          "type" : "array",
          "xml" : {
            "name" : "fees",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/fee_detail"
          }
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "type_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "transaction_token" : {
          "type" : "string"
        },
        "currency_code" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "memo" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 99
        },
        "tags" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "jit_funding" : {
          "$ref" : "#/definitions/jit_funding_api"
        }
      },
      "xml" : {
        "name" : "program_transfer_response"
      }
    },
    "AccountHolderGroupListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/account_holder_group_response"
          }
        }
      }
    },
    "digital_wallet_token_hash" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "digital_wallet_token_hash"
      }
    },
    "wallet_provider_profile" : {
      "type" : "object",
      "properties" : {
        "account" : {
          "$ref" : "#/definitions/account"
        },
        "risk_assessment" : {
          "$ref" : "#/definitions/risk_assessment"
        },
        "device_score" : {
          "type" : "string"
        },
        "pan_source" : {
          "type" : "string"
        },
        "reason_code" : {
          "type" : "string"
        },
        "recommendation_reasons" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "wallet_provider_profile"
      }
    },
    "account_holder_group_update_request" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 40
        },
        "config" : {
          "$ref" : "#/definitions/account_holder_group_config"
        }
      },
      "xml" : {
        "name" : "account_holder_group_update_request"
      }
    },
    "gateway_program_custom_header_update_request" : {
      "type" : "object",
      "properties" : {
        "custom_header" : {
          "type" : "object",
          "description" : "Custom headers",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "UserTransitionResponse" : {
      "type" : "object",
      "required" : [ "channel", "reason_code", "status", "token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "UNVERIFIED", "LIMITED", "ACTIVE", "SUSPENDED", "CLOSED" ]
        },
        "reason_code" : {
          "type" : "string",
          "enum" : [ "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21" ]
        },
        "reason" : {
          "type" : "string"
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "IVR", "FRAUD", "ADMIN", "SYSTEM" ]
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "user_token" : {
          "type" : "string"
        }
      }
    },
    "ReportRequest" : {
      "type" : "object",
      "properties" : {
        "partner" : {
          "type" : "string"
        },
        "report" : {
          "type" : "string"
        },
        "startDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "endDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "sendFiles" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "card_validation_request" : {
      "type" : "object",
      "required" : [ "hash" ],
      "properties" : {
        "hash" : {
          "type" : "string"
        },
        "expiration_date" : {
          "type" : "string"
        },
        "config" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "digital_wallet" : {
          "$ref" : "#/definitions/internal_digital_wallet_token"
        },
        "transaction" : {
          "$ref" : "#/definitions/internal_transaction_data_model"
        }
      }
    },
    "program_transfer" : {
      "type" : "object",
      "required" : [ "amount", "currency_code", "type_token" ],
      "properties" : {
        "fees" : {
          "type" : "array",
          "xml" : {
            "name" : "fees",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/fee_model"
          }
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number"
        },
        "type_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "tags" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "memo" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 99
        },
        "currency_code" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "program_transfer"
      }
    },
    "HealthCheckResult" : {
      "type" : "object",
      "properties" : {
        "component" : {
          "type" : "string"
        },
        "healthy" : {
          "type" : "boolean",
          "default" : false
        },
        "fatal" : {
          "type" : "boolean",
          "default" : false
        },
        "status" : {
          "type" : "string"
        },
        "data" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "Gatewaylog" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "traceNumber" : {
          "type" : "integer",
          "format" : "int64"
        },
        "paymentTypeCode" : {
          "type" : "string"
        },
        "achTransactionType" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string"
        },
        "gatewayVersion" : {
          "type" : "string"
        },
        "gatewayResponse" : {
          "type" : "object"
        },
        "timedOut" : {
          "type" : "boolean",
          "default" : false
        },
        "deal_Id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "order_Id" : {
          "type" : "string"
        },
        "request_method" : {
          "type" : "string"
        },
        "response_code" : {
          "type" : "string"
        },
        "response_subcode" : {
          "type" : "string"
        },
        "response_reasoncode" : {
          "type" : "string"
        },
        "response_message" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "fraud_avs" : {
          "type" : "string"
        },
        "fraud_auth" : {
          "type" : "string"
        },
        "fraud_cvv" : {
          "type" : "string"
        },
        "gateway_transactionId" : {
          "type" : "string"
        },
        "original_gateway" : {
          "$ref" : "#/definitions/Gatewaylog"
        },
        "amount" : {
          "type" : "number"
        },
        "duplicate" : {
          "type" : "string"
        },
        "post_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "response_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "api_duration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "gateway_duration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "ach_status" : {
          "type" : "string"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "modified" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "VelocityCache" : {
      "type" : "object",
      "properties" : {
        "cardHolderId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "velocityControlId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "usedAmount" : {
          "type" : "number"
        },
        "usageCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "maxId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "windowStartTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "vcSignature" : {
          "type" : "string"
        },
        "createdTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastModifiedTime" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "GL Transaction Request" : {
      "type" : "object",
      "required" : [ "entries" ],
      "properties" : {
        "entries" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GL_Entry"
          }
        },
        "detail" : {
          "type" : "string"
        },
        "cardholder_visible" : {
          "type" : "boolean",
          "default" : false
        },
        "trigger_webhook" : {
          "type" : "boolean",
          "default" : false
        },
        "reference_transaction_token" : {
          "type" : "string"
        }
      }
    },
    "store_update_model" : {
      "type" : "object",
      "required" : [ "active", "address1", "city", "merchant_token", "mid", "name", "state", "zip" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "contact" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "contact_email" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "longitude" : {
          "type" : "number",
          "format" : "float"
        },
        "latitude" : {
          "type" : "number",
          "format" : "float"
        },
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "province" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "token" : {
          "type" : "string",
          "description" : "The unique identifier of the merchant",
          "minLength" : 1,
          "maxLength" : 36
        },
        "partial_auth_flag" : {
          "type" : "boolean",
          "description" : "1 char max",
          "default" : true
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "network_mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "merchant_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "partial_approval_capable" : {
          "type" : "boolean",
          "default" : false
        },
        "keyed_auth_cvv_enforced" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "store_update_model"
      }
    },
    "MSAUnloadListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/msa_returns"
          }
        }
      }
    },
    "funding_account_response_model" : {
      "type" : "object",
      "required" : [ "created_time", "last_modified_time" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "type" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "account_suffix" : {
          "type" : "string"
        },
        "account_type" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "is_default_account" : {
          "type" : "boolean",
          "default" : false
        },
        "exp_date" : {
          "type" : "string"
        },
        "verification_status" : {
          "type" : "string"
        },
        "date_verified" : {
          "type" : "string",
          "format" : "date-time"
        },
        "user_token" : {
          "type" : "string"
        },
        "business_token" : {
          "type" : "string"
        },
        "name_on_account" : {
          "type" : "string"
        },
        "date_sent_for_verification" : {
          "type" : "string",
          "format" : "date-time"
        },
        "verification_override" : {
          "type" : "boolean",
          "default" : false
        },
        "verification_notes" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "funding_account_response_model"
      }
    },
    "spend_control_association" : {
      "type" : "object",
      "properties" : {
        "card_product_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "spend_control_association"
      }
    },
    "cardholder_note_request_model" : {
      "type" : "object",
      "required" : [ "created_by", "description" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "description" : {
          "type" : "string"
        },
        "created_by" : {
          "type" : "string"
        },
        "created_by_user_role" : {
          "type" : "string",
          "enum" : [ "USER", "ADMIN", "BANK_USER", "BANK_ADMIN", "MARQETA_PD", "MARQETA_ADMIN" ]
        },
        "private" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "cardholder_note_request_model"
      }
    },
    "transaction_card_acceptor_view_model_v1" : {
      "type" : "object",
      "properties" : {
        "mid" : {
          "type" : "string"
        },
        "mcc" : {
          "type" : "string"
        },
        "network_mid" : {
          "type" : "string"
        },
        "mcc_groups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string"
        },
        "address" : {
          "type" : "string"
        },
        "city" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string"
        },
        "postal_code" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        },
        "poi" : {
          "$ref" : "#/definitions/terminal_model"
        }
      }
    },
    "user_card_holder_response" : {
      "type" : "object",
      "required" : [ "created_time", "last_modified_time" ],
      "properties" : {
        "authentication" : {
          "$ref" : "#/definitions/Authentication"
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "description" : "Default is true",
          "default" : false
        },
        "honorific" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "gender" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1,
          "enum" : [ "F", "M" ]
        },
        "first_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "middle_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "last_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "email" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "postal_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "notes" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "parent_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "uses_parent_account" : {
          "type" : "boolean",
          "description" : "Default is false",
          "default" : false
        },
        "ssn" : {
          "type" : "string"
        },
        "corporate_card_holder" : {
          "type" : "boolean",
          "default" : false
        },
        "passport_number" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "id_card_number" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "nationality" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "company" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "ip_address" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 39
        },
        "password" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "business_token" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "account_holder_group_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "status" : {
          "type" : "string",
          "enum" : [ "UNVERIFIED", "LIMITED", "ACTIVE", "SUSPENDED", "CLOSED" ]
        },
        "identifications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdentificationResponseModel"
          }
        },
        "deposit_account" : {
          "$ref" : "#/definitions/deposit_account"
        },
        "birth_date" : {
          "type" : "string",
          "readOnly" : true
        },
        "passport_expiration_date" : {
          "type" : "string",
          "readOnly" : true
        },
        "id_card_expiration_date" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "xml" : {
        "name" : "user_card_holder_response"
      }
    },
    "velocity_control_check_request" : {
      "type" : "object",
      "required" : [ "card_holder", "card_product", "transaction" ],
      "properties" : {
        "card_product" : {
          "$ref" : "#/definitions/internal_card_product"
        },
        "transaction" : {
          "$ref" : "#/definitions/internal_transaction_data_model"
        },
        "card_holder" : {
          "$ref" : "#/definitions/internal_user"
        },
        "card" : {
          "$ref" : "#/definitions/internal_card"
        },
        "context" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "write_cache" : {
          "type" : "boolean",
          "default" : false
        },
        "debug" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "jit_funding_program_funding_source" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "funding_source_token" : {
          "type" : "string",
          "description" : "required if enabled",
          "minLength" : 0,
          "maxLength" : 36
        },
        "refunds_destination" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50,
          "enum" : [ "PROGRAM_FUNDING_SOURCE", "GPA", "WATERFALL" ]
        }
      }
    },
    "transaction" : {
      "type" : "object",
      "required" : [ "network" ],
      "properties" : {
        "international" : {
          "type" : "boolean",
          "default" : false
        },
        "address_verification" : {
          "description" : "address verification",
          "$ref" : "#/definitions/internal_address_verification_request"
        },
        "is_international" : {
          "type" : "boolean",
          "default" : false
        },
        "network" : {
          "type" : "string",
          "enum" : [ "MASTERCARD", "DISCOVER", "PULSE", "VISA" ]
        },
        "currency" : {
          "type" : "string"
        }
      }
    },
    "gpa_response" : {
      "type" : "object",
      "required" : [ "amount", "created_time", "currency_code", "funding", "funding_source_token", "last_modified_time", "response", "state", "token", "transaction_token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "tags" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string"
        },
        "fees" : {
          "type" : "array",
          "xml" : {
            "name" : "fees",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/fee_detail"
          }
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "transaction_token" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "response" : {
          "$ref" : "#/definitions/response"
        },
        "funding" : {
          "$ref" : "#/definitions/funding"
        },
        "funding_source_token" : {
          "type" : "string"
        },
        "funding_source_address_token" : {
          "type" : "string"
        },
        "jit_funding" : {
          "$ref" : "#/definitions/jit_funding_api"
        },
        "user_token" : {
          "type" : "string"
        },
        "business_token" : {
          "type" : "string"
        },
        "currency_code" : {
          "type" : "string"
        },
        "gateway_token" : {
          "type" : "integer",
          "format" : "int64"
        },
        "gateway_message" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "gpa_response"
      }
    },
    "program_reserve_transaction_clearing_request" : {
      "type" : "object",
      "required" : [ "program_reserve_transaction_token" ],
      "properties" : {
        "program_reserve_transaction_token" : {
          "type" : "string"
        }
      }
    },
    "commando_mode_response" : {
      "type" : "object",
      "required" : [ "created_time", "last_modified_time" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "program_gateway_funding_source_token" : {
          "type" : "string"
        },
        "current_state" : {
          "$ref" : "#/definitions/commando_mode_nested_transition"
        },
        "commando_mode_enables" : {
          "$ref" : "#/definitions/commando_mode_enables"
        },
        "real_time_standin_criteria" : {
          "$ref" : "#/definitions/real_time_standin_criteria"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      }
    },
    "selective_auth" : {
      "type" : "object",
      "properties" : {
        "sa_mode" : {
          "type" : "integer",
          "format" : "int32",
          "enum" : [ 0, 1, 2 ],
          "default" : 1
        },
        "enable_regex_search_chain" : {
          "type" : "boolean",
          "default" : false
        },
        "dmd_location_sensitivity" : {
          "type" : "integer",
          "format" : "int32",
          "enum" : [ 0, 1, 2, 3, 4 ],
          "default" : 0
        }
      },
      "xml" : {
        "name" : "selective_auth"
      }
    },
    "card_options" : {
      "type" : "object",
      "properties" : {
        "cvv" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 3
        },
        "card_present" : {
          "type" : "boolean",
          "default" : false
        },
        "expiration" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 4
        },
        "billing_address" : {
          "$ref" : "#/definitions/BillingAddress"
        }
      },
      "xml" : {
        "name" : "card_options"
      }
    },
    "internal_find_original_request" : {
      "type" : "object",
      "required" : [ "authorization_tranlog" ],
      "properties" : {
        "authorization_tranlog" : {
          "$ref" : "#/definitions/internal_authorization_transaction"
        },
        "override_days" : {
          "type" : "integer",
          "format" : "int32"
        },
        "context" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "configuration" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "finders" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "AMOUNT_LOCAL_TXN_DATE", "APPROVAL_CODE_RRN", "APPROVAL_CODE_STAN", "APPROVAL_CODE_STAN_LOCAL_TXN_DATE", "CHARGEBACK_NREF_", "EXPIRABLE_AUTH_DIGEST", "LOCAL_TXN_DATE_MID_AMOUNT", "LOCAL_TXN_DATE_MID_AMOUNT_TIP", "MOD_LOCAL_TXN_DATE_MID_AMOUNT_TIP", "MOST_RECENT_CHARGEBACK_TXN", "NRID_EXCEPT_PULSE", "NRID", "NULL_RESULT", "PULSE_STAN_RRN", "RRN_EXCEPT_PULSE", "RRN", "TXN_TOKEN" ]
          }
        },
        "original_timestamp" : {
          "type" : "string",
          "format" : "date-time"
        },
        "original_stan" : {
          "type" : "string"
        }
      }
    },
    "funding_source_model" : {
      "type" : "object",
      "required" : [ "active", "created_time", "is_default_account", "last_modified_time", "token", "type" ],
      "discriminator" : "type",
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "is_default_account" : {
          "type" : "boolean",
          "default" : false
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "type" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "funding_source_model"
      }
    },
    "commando_mode_transition_request" : {
      "type" : "object",
      "required" : [ "commando_mode_token", "transition" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "commando_mode_token" : {
          "type" : "string"
        },
        "transition" : {
          "$ref" : "#/definitions/commando_mode_nested_transition"
        }
      }
    },
    "GL_Entry" : {
      "type" : "object",
      "required" : [ "account", "amount", "layer", "type" ],
      "properties" : {
        "detail" : {
          "type" : "string"
        },
        "tag" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "layer" : {
          "type" : "string"
        },
        "account" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "CREDIT", "DEBIT" ]
        }
      }
    },
    "mcc_group_model" : {
      "type" : "object",
      "required" : [ "mccs", "name" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "mccs" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "object"
          },
          "maxItems" : 500,
          "minItems" : 0
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "config" : {
          "$ref" : "#/definitions/config"
        }
      },
      "xml" : {
        "name" : "mcc_group_model"
      }
    },
    "financial_request_model" : {
      "type" : "object",
      "required" : [ "amount", "card_acceptor", "card_token", "mid" ],
      "properties" : {
        "amount" : {
          "type" : "number"
        },
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "pin" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 15
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "cash_back_amount" : {
          "type" : "number"
        },
        "is_pre_auth" : {
          "type" : "boolean",
          "default" : false
        },
        "card_acceptor" : {
          "$ref" : "#/definitions/card_acceptor_model"
        },
        "transaction_options" : {
          "$ref" : "#/definitions/transaction_options"
        },
        "webhook" : {
          "$ref" : "#/definitions/webhook"
        }
      },
      "xml" : {
        "name" : "financial_request_model"
      }
    },
    "InternalGatewayResponse" : {
      "type" : "object",
      "required" : [ "approved", "exception", "successful_gateway_call" ],
      "properties" : {
        "exception" : {
          "$ref" : "#/definitions/InternalGatewayLog"
        },
        "successful_gateway_call" : {
          "type" : "boolean",
          "default" : false
        },
        "approved" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "chargeback_response" : {
      "type" : "object",
      "required" : [ "amount", "channel", "created_time", "credit_user", "last_modified_time", "network", "state", "token", "transaction_token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "transaction_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number",
          "minimum" : 0.01
        },
        "reason_description" : {
          "type" : "string",
          "enum" : [ "SERVICE_NOT_PROVIDED_MERCHANDISE_NOT_RECEIVED", "CANCELLED_RECURRING_TRANSACTION", "NOT_AS_DESCRIBED_OR_DEFECTIVE_MERCHANDISE", "FRAUD_MULTIPLE_TRANSACTIONS", "FRAUD_TRANSACTION", "NO_AUTHORIZATION", "LATE_PRESENTMENT", "TRANSACTION_NOT_RECOGNIZED", "INCORRECT_CURRENCY_OR_TRANSACTION_CODE", "INCORRECT_TRANSACTION_AMOUNT_OR_ACCOUNT_NUMBER", "NOT_AUTHORIZED_CARD_PRESENT", "NOT_AUTHORIZED_CARD_ABSENT", "CREDIT_NOT_PROCESSED", "NON_RECEIPT_OF_CASH_OR_LOAD_TRANSACTION_VALUE_AT_ATM" ]
        },
        "reason_code" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 1024
        },
        "state" : {
          "type" : "string",
          "enum" : [ "INITIATED", "REPRESENTMENT", "PREARBITRATION", "ARBITRATION", "CASE_WON", "CASE_LOST", "NETWORK_REJECTED", "WITHDRAWN" ]
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "GATEWAY", "GATEWAY_AUTOMATED", "ISSUER", "ISSUER_AUTOMATED" ]
        },
        "network" : {
          "type" : "string",
          "enum" : [ "MARQETA", "DISCOVER", "MASTERCARD", "PULSE", "VISA" ]
        },
        "network_case_id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50
        },
        "credit_user" : {
          "type" : "boolean",
          "default" : false
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "chargeback_response"
      }
    },
    "min_offset" : {
      "type" : "object",
      "properties" : {
        "unit" : {
          "type" : "string",
          "description" : "specify if a value is provided; default is expiration_offset.unit",
          "enum" : [ "YEARS", "MONTHS", "DAYS", "HOURS", "MINUTES", "SECONDS" ]
        },
        "value" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "specify if unit is provided; default is expiration_offset.value"
        }
      },
      "xml" : {
        "name" : "min_offset"
      }
    },
    "real_time_fee_assessment" : {
      "type" : "object",
      "properties" : {
        "transaction_type" : {
          "type" : "string"
        },
        "international_enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "domestic_enabled" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "real_time_fee_assessment"
      }
    },
    "images_signature" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "OriginalCreditSenderData" : {
      "type" : "object",
      "required" : [ "funding_source" ],
      "properties" : {
        "funding_source" : {
          "type" : "string",
          "enum" : [ "credit", "debit", "prepaid", "deposit_account", "cash", "mobile_money_payment", "non_visa_credit" ]
        },
        "sender_name" : {
          "type" : "string"
        },
        "sender_reference_number" : {
          "type" : "string"
        },
        "sender_account_number" : {
          "type" : "string"
        },
        "sender_address" : {
          "type" : "string"
        },
        "sender_city" : {
          "type" : "string"
        },
        "sender_state" : {
          "type" : "string"
        },
        "sender_country" : {
          "type" : "string"
        }
      }
    },
    "webhook_request_model" : {
      "type" : "object",
      "required" : [ "config", "events", "name" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 64
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "config" : {
          "$ref" : "#/definitions/webhook_config_model"
        },
        "events" : {
          "type" : "array",
          "description" : "An array of event types",
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "webhook_request_model"
      }
    },
    "business_card_holder_response" : {
      "type" : "object",
      "required" : [ "created_time", "deposit_account", "last_modified_time" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "description" : "default = true",
          "default" : false
        },
        "notes" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "ip_address" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 39
        },
        "password" : {
          "type" : "string",
          "description" : "Strong password required",
          "minLength" : 1,
          "maxLength" : 255
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "account_holder_group_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "authentication" : {
          "$ref" : "#/definitions/Authentication"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "UNVERIFIED", "LIMITED", "ACTIVE", "SUSPENDED", "CLOSED" ]
        },
        "business_name_legal" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "business_name_dba" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "office_location" : {
          "$ref" : "#/definitions/AddressResponseModel"
        },
        "in_current_location_since" : {
          "type" : "string",
          "format" : "date-time"
        },
        "website" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "date_established" : {
          "type" : "string",
          "format" : "date-time"
        },
        "general_business_description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "history" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "business_type" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "international_office_locations" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "taxpayer_id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "duns_number" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "primary_contact" : {
          "$ref" : "#/definitions/PrimaryContactInfoModel"
        },
        "incorporation" : {
          "$ref" : "#/definitions/BusinessIncorporationResponseModel"
        },
        "proprietor_or_officer" : {
          "$ref" : "#/definitions/BusinessProprietorResponseModel"
        },
        "identifications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdentificationResponseModel"
          }
        },
        "deposit_account" : {
          "$ref" : "#/definitions/deposit_account"
        }
      },
      "xml" : {
        "name" : "business_card_holder_response"
      }
    },
    "OfferListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/offer_response_model"
          }
        }
      }
    },
    "real_time_fee_group_create_request" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "fee_tokens" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "real_time_fee_group_create_request"
      }
    },
    "card_transition_response" : {
      "type" : "object",
      "required" : [ "barcode", "card_product_token", "card_token", "channel", "expiration", "expiration_time", "fulfillment_status", "last_four", "pan", "pin_is_set", "state", "token", "type", "user_token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "state" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "SUSPENDED", "TERMINATED" ]
        },
        "reason" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "reason_code" : {
          "type" : "string",
          "enum" : [ "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21" ]
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "IVR", "FRAUD", "ADMIN", "SYSTEM" ]
        },
        "fulfillment_status" : {
          "type" : "string",
          "enum" : [ "ISSUED", "ORDERED", "REJECTED", "SHIPPED", "DELIVERED", "DIGITALLY_PRESENTED" ]
        },
        "validations" : {
          "$ref" : "#/definitions/ValidationsResponse"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "fulfillment.issued", "state.activated", "state.suspended", "state.reinstated", "state.terminated", "fulfillment.ordered", "fulfillment.rejected", "fulfillment.shipped", "fulfillment.delivered", "fulfillment.digitally_presented" ]
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "card_product_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "last_four" : {
          "type" : "string",
          "enum" : [ "true", "false" ]
        },
        "pan" : {
          "type" : "string"
        },
        "expiration" : {
          "type" : "string"
        },
        "expiration_time" : {
          "type" : "string"
        },
        "barcode" : {
          "type" : "string"
        },
        "pin_is_set" : {
          "type" : "boolean",
          "default" : false
        },
        "fulfillment" : {
          "$ref" : "#/definitions/fulfillment"
        },
        "bulk_issuance_token" : {
          "type" : "string"
        },
        "reissue_pan_from_card_token" : {
          "type" : "string"
        },
        "user" : {
          "$ref" : "#/definitions/cardholder_metadata"
        },
        "card" : {
          "$ref" : "#/definitions/card_metadata"
        },
        "expedite" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "card_transition_response"
      }
    },
    "advanced_simulation_response_model" : {
      "type" : "object",
      "properties" : {
        "transaction" : {
          "$ref" : "#/definitions/transaction_model"
        },
        "raw_iso8583" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      },
      "xml" : {
        "name" : "advanced_simulation_response_model"
      }
    },
    "push_to_card_response" : {
      "type" : "object",
      "required" : [ "created_time", "last_modified_time" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "address_1" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "address_2" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 2
        },
        "zip" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string"
        },
        "last_four" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "fast_fund_transfer_eligible" : {
          "type" : "boolean",
          "default" : false
        },
        "gambling_fund_transfer_eligible" : {
          "type" : "boolean",
          "default" : false
        },
        "name_on_card" : {
          "type" : "string"
        },
        "last_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "exp_date" : {
          "type" : "string"
        }
      }
    },
    "transit" : {
      "type" : "object",
      "properties" : {
        "transaction_type" : {
          "type" : "string",
          "enum" : [ "PRE_FUNDED", "REAL_TIME_AUTHORIZED", "POST_AUTHORIZED_AGGREGATED", "AUTHORIZED_AGGREGATED_SPLIT_CLEARING", "OTHER", "DEBIT_RECOVERY" ]
        },
        "transportation_mode" : {
          "type" : "string",
          "enum" : [ "BUS", "TRAIN", "WATER_BORNE_VEHICLE", "TOLL", "PARKING", "TAXI", "PARA_TRANSIT", "SELF_DRIVE_VEHICLE", "COACH", "LOCOMOTIVE", "POWERED_MOTOR_VEHICLE", "TRAILER", "INTER_CITY", "CABLE_CAR" ]
        }
      },
      "xml" : {
        "name" : "transit"
      }
    },
    "FileProcessingRequest" : {
      "type" : "object",
      "required" : [ "file_process_type", "source_file" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "file_process_type" : {
          "type" : "string",
          "enum" : [ "MASTERCARD_CLEARING", "VISA_CLEARING", "PULSE_CLEARING", "DISCOVER_CLEARING" ]
        },
        "source_file" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 512
        },
        "archive_file" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 512
        }
      }
    },
    "advice_request_model" : {
      "type" : "object",
      "required" : [ "message", "network" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "encryption_key_id" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "network" : {
          "type" : "string"
        },
        "debit" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "MerchantListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/merchant_response_model"
          }
        }
      }
    },
    "ResultCodeInfo" : {
      "type" : "object",
      "properties" : {
        "resultCode" : {
          "type" : "string"
        },
        "resultInfo" : {
          "type" : "string"
        },
        "extendedResultCode" : {
          "type" : "string"
        }
      }
    },
    "authorization_controls" : {
      "type" : "object",
      "properties" : {
        "hold_increase" : {
          "$ref" : "#/definitions/hold_increase"
        },
        "hold_expiration_days" : {
          "type" : "integer",
          "format" : "int32",
          "default" : 7
        }
      },
      "xml" : {
        "name" : "authorization_controls"
      }
    },
    "StoreListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/store_response_model"
          }
        }
      }
    },
    "program_funding_source_response" : {
      "type" : "object",
      "required" : [ "account", "created_time", "last_modified_time", "name", "token" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "account" : {
          "type" : "string"
        }
      }
    },
    "payment_card_response_model" : {
      "type" : "object",
      "required" : [ "account_suffix", "account_type", "active", "created_time", "exp_date", "is_default_account", "last_modified_time", "token", "type" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "type" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "account_suffix" : {
          "type" : "string"
        },
        "account_type" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "is_default_account" : {
          "type" : "boolean",
          "default" : false
        },
        "exp_date" : {
          "type" : "string"
        },
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is not present"
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is not present"
        }
      },
      "xml" : {
        "name" : "payment_card_response_model"
      }
    },
    "authorization_advice_model" : {
      "type" : "object",
      "required" : [ "amount", "original_transaction_token" ],
      "properties" : {
        "amount" : {
          "type" : "number"
        },
        "network_fees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/network_fee_model"
          }
        },
        "webhook" : {
          "$ref" : "#/definitions/webhook"
        },
        "original_transaction_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "transaction_options" : {
          "$ref" : "#/definitions/transaction_options"
        }
      },
      "xml" : {
        "name" : "authorization_advice_model"
      }
    },
    "card_request" : {
      "type" : "object",
      "required" : [ "card_product_token", "user_token" ],
      "properties" : {
        "card_product_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "expedite" : {
          "type" : "boolean",
          "default" : false
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "expiration_offset" : {
          "$ref" : "#/definitions/expiration_offset"
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "fulfillment" : {
          "$ref" : "#/definitions/fulfillment"
        },
        "reissue_pan_from_card_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "translate_pin_from_card_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "activation_actions" : {
          "$ref" : "#/definitions/activation_actions"
        },
        "bulk_issuance_token" : {
          "type" : "string"
        }
      }
    },
    "cardholder_msa_balance" : {
      "type" : "object",
      "required" : [ "available_balance", "balances", "credit_balance", "currency_code", "ledger_balance", "name", "pending_credits" ],
      "properties" : {
        "currency_code" : {
          "type" : "string"
        },
        "ledger_balance" : {
          "type" : "number"
        },
        "available_balance" : {
          "type" : "number"
        },
        "credit_balance" : {
          "type" : "number"
        },
        "pending_credits" : {
          "type" : "number"
        },
        "impacted_amount" : {
          "type" : "number"
        },
        "balances" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/cardholder_balance"
          }
        },
        "name" : {
          "type" : "string"
        },
        "campaign_token" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "cardholder_msa_balance"
      }
    },
    "program_funding_source_update_request" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "gateway_response" : {
      "type" : "object",
      "required" : [ "code" ],
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "data" : {
          "$ref" : "#/definitions/jit_program_response"
        }
      },
      "xml" : {
        "name" : "gateway_response"
      }
    },
    "jit_funding" : {
      "type" : "object",
      "properties" : {
        "paymentcard_funding_source" : {
          "$ref" : "#/definitions/jit_funding_paymentcard_funding_source"
        },
        "programgateway_funding_source" : {
          "$ref" : "#/definitions/jit_funding_programgateway_funding_source"
        },
        "program_funding_source" : {
          "$ref" : "#/definitions/jit_funding_program_funding_source"
        }
      }
    },
    "cardholder_note_response_model" : {
      "type" : "object",
      "required" : [ "created_by", "description" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "description" : {
          "type" : "string"
        },
        "created_by" : {
          "type" : "string"
        },
        "created_by_user_role" : {
          "type" : "string",
          "enum" : [ "USER", "ADMIN", "BANK_USER", "BANK_ADMIN", "MARQETA_PD", "MARQETA_ADMIN" ]
        },
        "private" : {
          "type" : "boolean",
          "default" : false
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "xml" : {
        "name" : "cardholder_note_response_model"
      }
    },
    "offer_model" : {
      "type" : "object",
      "required" : [ "campaign_token", "currency_code", "name", "purchase_amount", "reward_amount" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "purchase_amount" : {
          "type" : "number"
        },
        "reward_amount" : {
          "type" : "number"
        },
        "reward_trigger_amount" : {
          "type" : "number"
        },
        "campaign_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "currency_code" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "offer_model"
      }
    },
    "internal_authorization_transaction" : {
      "type" : "object",
      "required" : [ "network", "node", "subNetwork", "token", "transactionType" ],
      "properties" : {
        "returnedBalances" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "string"
        },
        "feesModel" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/network_fee_model"
          }
        },
        "transactionType" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "ref_transaction" : {
          "$ref" : "#/definitions/internal_authorization_transaction"
        },
        "node" : {
          "type" : "string"
        },
        "network" : {
          "type" : "string"
        },
        "subNetwork" : {
          "type" : "string"
        },
        "mid" : {
          "type" : "string"
        },
        "tid" : {
          "type" : "string"
        },
        "stan" : {
          "type" : "string"
        },
        "ca_name" : {
          "type" : "string"
        },
        "ca_street" : {
          "type" : "string"
        },
        "ca_zip" : {
          "type" : "string"
        },
        "ca_city" : {
          "type" : "string"
        },
        "ca_region" : {
          "type" : "string"
        },
        "ca_country" : {
          "type" : "string"
        },
        "functionCode" : {
          "type" : "string"
        },
        "reasonCode" : {
          "type" : "string"
        },
        "responseCode" : {
          "type" : "string"
        },
        "approvalNumber" : {
          "type" : "string"
        },
        "displayMessage" : {
          "type" : "string"
        },
        "date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "transmissionDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "localTransactionDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "captureDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "settlementDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itc" : {
          "type" : "string"
        },
        "irc" : {
          "type" : "string"
        },
        "currencyCode" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "additionalAmount" : {
          "type" : "number"
        },
        "acquirerFee" : {
          "type" : "number"
        },
        "issuerFee" : {
          "type" : "number"
        },
        "rc" : {
          "type" : "string"
        },
        "extrc" : {
          "type" : "string"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cardholder" : {
          "$ref" : "#/definitions/internal_user"
        },
        "actingCardholder" : {
          "$ref" : "#/definitions/internal_user"
        },
        "card" : {
          "$ref" : "#/definitions/internal_card"
        },
        "account" : {
          "$ref" : "#/definitions/internal_account"
        },
        "account2" : {
          "$ref" : "#/definitions/internal_account"
        },
        "mcc" : {
          "type" : "string"
        },
        "networkReferenceId" : {
          "type" : "string"
        },
        "acquirerReferenceId" : {
          "type" : "string"
        },
        "retrievalReferenceNumber" : {
          "type" : "string"
        },
        "forwardingInstId" : {
          "type" : "string"
        },
        "networkMid" : {
          "type" : "string"
        },
        "requestAmount" : {
          "type" : "number"
        },
        "transactionState" : {
          "type" : "string",
          "enum" : [ "PENDING", "CLEARED", "COMPLETION", "DECLINED", "ERROR", "ALL" ]
        },
        "remoteHost" : {
          "type" : "string"
        },
        "responseAmount" : {
          "type" : "number"
        },
        "expirationTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "incomingNetworkRequestITC" : {
          "type" : "string"
        },
        "digital_wallet_token" : {
          "$ref" : "#/definitions/InternalDigitalWallet"
        },
        "tranlogAttributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "payload" : {
          "$ref" : "#/definitions/transaction_model"
        },
        "layer" : {
          "type" : "integer",
          "format" : "int32"
        },
        "transaction_name" : {
          "type" : "string"
        },
        "originator" : {
          "type" : "string"
        },
        "acquirer" : {
          "type" : "string"
        }
      }
    },
    "password_update_model" : {
      "type" : "object",
      "required" : [ "current_password", "new_password" ],
      "properties" : {
        "new_password" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "current_password" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        }
      },
      "xml" : {
        "name" : "password_update_model"
      }
    },
    "BusinessProprietorResponseModel" : {
      "type" : "object",
      "properties" : {
        "first_name" : {
          "type" : "string"
        },
        "middle_name" : {
          "type" : "string"
        },
        "last_name" : {
          "type" : "string"
        },
        "alternative_names" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "home" : {
          "$ref" : "#/definitions/AddressResponseModel"
        },
        "ssn" : {
          "type" : "string"
        },
        "dob" : {
          "type" : "string",
          "format" : "date-time"
        },
        "phone" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "identifications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdentificationResponseModel"
          }
        }
      }
    },
    "bulk_issuance_response" : {
      "type" : "object",
      "required" : [ "card_allocation", "card_product_token", "fulfillment", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "fulfillment" : {
          "$ref" : "#/definitions/FulfillmentResponse"
        },
        "expedite" : {
          "type" : "boolean",
          "default" : false
        },
        "card_product_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "card_allocation" : {
          "type" : "integer",
          "format" : "int32",
          "maximum" : 50000.0
        },
        "user_association" : {
          "$ref" : "#/definitions/user_association"
        },
        "name_line_1_numeric_postfix" : {
          "type" : "boolean",
          "default" : false
        },
        "name_line_1_random_postfix" : {
          "type" : "boolean",
          "default" : false
        },
        "expiration_offset" : {
          "$ref" : "#/definitions/expiration_offset"
        },
        "cards_processed" : {
          "type" : "integer",
          "format" : "int32"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "name_line1_start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "name_line1_end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "card_fulfillment_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "provider_ship_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "provider_shipping_method" : {
          "type" : "string"
        },
        "provider_tracking_number" : {
          "type" : "string"
        }
      }
    },
    "digital_wallet_apple_pay_provision_request" : {
      "type" : "object",
      "required" : [ "card_token", "certificates", "device_type", "nonce", "nonce_signature", "provisioning_app_version" ],
      "properties" : {
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "device_type" : {
          "type" : "string",
          "enum" : [ "MOBILE_PHONE", "WATCH", "TABLET" ]
        },
        "provisioning_app_version" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "certificates" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "nonce" : {
          "type" : "string"
        },
        "nonce_signature" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "digital_wallet_apple_pay_provision_request"
      }
    },
    "user_card_holder_search_model" : {
      "type" : "object",
      "properties" : {
        "ssn" : {
          "type" : "string"
        },
        "dda" : {
          "type" : "string"
        },
        "first_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "last_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "email" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        }
      }
    },
    "ach_model" : {
      "type" : "object",
      "required" : [ "account_number", "account_type", "name_on_account", "routing_number" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "account_number" : {
          "type" : "string"
        },
        "routing_number" : {
          "type" : "string",
          "readOnly" : true
        },
        "name_on_account" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "account_type" : {
          "type" : "string",
          "enum" : [ "checking", "savings", "corporate", "loan" ]
        },
        "bank_name" : {
          "type" : "string"
        },
        "verification_override" : {
          "type" : "boolean",
          "default" : false
        },
        "verification_notes" : {
          "type" : "string"
        },
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "is_default_account" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "ach_model"
      }
    },
    "BusinessCardHolderListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BusinessCardHolderModel"
          }
        }
      }
    },
    "DDARequest" : {
      "type" : "object",
      "required" : [ "dda" ],
      "properties" : {
        "dda" : {
          "type" : "string"
        }
      }
    },
    "merchant_card_request" : {
      "type" : "object",
      "required" : [ "card_product_token" ],
      "properties" : {
        "card_product_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "expedite" : {
          "type" : "boolean",
          "default" : false
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "expiration_offset" : {
          "$ref" : "#/definitions/expiration_offset"
        }
      },
      "xml" : {
        "name" : "merchant_card_request"
      }
    },
    "ach_verification_model" : {
      "type" : "object",
      "properties" : {
        "verify_amount1" : {
          "type" : "number"
        },
        "verify_amount2" : {
          "type" : "number"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "ach_verification_model"
      }
    },
    "simulation_response_model" : {
      "type" : "object",
      "properties" : {
        "transaction" : {
          "$ref" : "#/definitions/transaction_model"
        },
        "raw_iso8583" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      },
      "xml" : {
        "name" : "simulation_response_model"
      }
    },
    "FulfillmentResponse" : {
      "type" : "object",
      "required" : [ "card_personalization" ],
      "properties" : {
        "shipping" : {
          "$ref" : "#/definitions/ShippingInformationResponse"
        },
        "card_personalization" : {
          "$ref" : "#/definitions/card_personalization"
        }
      }
    },
    "bank_transfer_transition_request_model" : {
      "type" : "object",
      "required" : [ "bank_transfer_token", "channel", "status" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "bank_transfer_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "status" : {
          "type" : "string",
          "enum" : [ "PENDING", "PROCESSING", "SUBMITTED", "RETURNED", "COMPLETED", "CANCELED" ]
        },
        "reason" : {
          "type" : "string"
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "SYSTEM" ]
        },
        "batch_number" : {
          "type" : "string"
        },
        "program_reserve_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        }
      }
    },
    "payment_card_funding_source_model" : {
      "allOf" : [ {
        "$ref" : "#/definitions/funding_source_model"
      }, {
        "type" : "object",
        "required" : [ "account_suffix", "account_type", "exp_date" ],
        "properties" : {
          "user_token" : {
            "type" : "string",
            "description" : "Required if 'business_token' is null"
          },
          "business_token" : {
            "type" : "string",
            "description" : "Required if 'user_token' is null"
          },
          "account_suffix" : {
            "type" : "string"
          },
          "account_type" : {
            "type" : "string"
          },
          "exp_date" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "payment_card_funding_source_model"
        }
      } ]
    },
    "advanced_clearing_request_model" : {
      "type" : "object",
      "required" : [ "amount", "card_token", "currency_code", "reconciliation_amount", "source_amount" ],
      "properties" : {
        "network_fees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/network_fee_model"
          }
        },
        "webhook" : {
          "$ref" : "#/definitions/webhook"
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "amount" : {
          "type" : "number"
        },
        "source_amount" : {
          "type" : "number"
        },
        "reconciliation_amount" : {
          "type" : "number"
        },
        "replacement_amount" : {
          "type" : "number"
        },
        "cardholder_billing_amount" : {
          "type" : "number"
        },
        "cashback" : {
          "type" : "number"
        },
        "cardholder_billing_conversion_rate" : {
          "type" : "number",
          "format" : "double"
        },
        "cardholder_billing_currency" : {
          "type" : "string"
        },
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "acquirer_reference_id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 23
        },
        "rrn" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 16
        },
        "stan" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 12
        },
        "processing_code" : {
          "type" : "string",
          "minLength" : 2,
          "maxLength" : 2
        },
        "acquirer_fee" : {
          "$ref" : "#/definitions/MoneyModel"
        },
        "issuer_fee" : {
          "$ref" : "#/definitions/MoneyModel"
        },
        "function_code" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 3
        },
        "reason_code" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 4
        },
        "approval_code" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 6
        },
        "transaction_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ"
        },
        "local_transaction_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ"
        },
        "settlement_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ"
        },
        "network_reference_id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 16
        },
        "find_original_window_days" : {
          "type" : "integer",
          "format" : "int32"
        },
        "batch_number" : {
          "type" : "string"
        },
        "batch_file_name" : {
          "type" : "string"
        },
        "sequence_number" : {
          "type" : "string"
        },
        "network" : {
          "type" : "string",
          "enum" : [ "DISCOVER", "MASTERCARD", "PULSE", "VISA" ]
        },
        "sub_network" : {
          "type" : "string",
          "description" : "Defaults to VISANET if network is VISA",
          "enum" : [ "VISANET", "VISANETDEBIT", "VISAINTERLINK", "VISAPLUS" ]
        },
        "card_acceptor" : {
          "$ref" : "#/definitions/card_acceptor_model"
        },
        "currency_code" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 3
        },
        "original_data_elements" : {
          "$ref" : "#/definitions/original_data_elements"
        },
        "preceding_related_transaction_token" : {
          "type" : "string"
        },
        "send_expiration_date" : {
          "type" : "boolean",
          "default" : false
        },
        "simulate_batch_for_clearing_record_hash" : {
          "type" : "boolean",
          "default" : false
        },
        "cross_border_indicator" : {
          "type" : "string",
          "enum" : [ "SINGLE_CURRENCY", "MULTI_CURRENCY", "REBATE", "UNKNOWN" ]
        },
        "token_pan" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 16
        }
      }
    },
    "BusinessTransitionListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BusinessTransitionResponse"
          }
        }
      }
    },
    "CardProductFulfillmentResponse" : {
      "type" : "object",
      "required" : [ "card_personalization" ],
      "properties" : {
        "shipping" : {
          "$ref" : "#/definitions/ShippingInformationResponse"
        },
        "card_personalization" : {
          "$ref" : "#/definitions/card_personalization"
        },
        "payment_instrument" : {
          "type" : "string",
          "enum" : [ "PHYSICAL_MSR", "PHYSICAL_ICC", "PHYSICAL_CONTACTLESS", "PHYSICAL_COMBO", "VIRTUAL_PAN" ],
          "default" : "PHYSICAL_MSR"
        },
        "package_id" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50,
          "default" : "0"
        },
        "all_zero_card_security_code" : {
          "type" : "boolean",
          "default" : false
        },
        "bin_prefix" : {
          "type" : "string"
        },
        "bulk_ship" : {
          "type" : "boolean",
          "default" : false
        },
        "pan_length" : {
          "type" : "string"
        },
        "fulfillment_provider" : {
          "type" : "string",
          "enum" : [ "PERFECTPLASTIC", "ARROWEYE", "IDEMIA", "IDEMIA_UK", "IDEMIA_FR", "IDEMIA_CZ", "IDEMIA_APAC", "IDEMIA_PL", "GEMALTO", "NITECREST", "OBERTHUR" ],
          "default" : "PERFECTPLASTIC"
        },
        "allow_card_creation" : {
          "type" : "boolean",
          "default" : true
        },
        "uppercase_name_lines" : {
          "type" : "boolean",
          "default" : true
        },
        "enable_offline_pin" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "auth_request_model" : {
      "type" : "object",
      "required" : [ "amount", "card_token", "mid" ],
      "properties" : {
        "network_fees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/network_fee_model"
          }
        },
        "webhook" : {
          "$ref" : "#/definitions/webhook"
        },
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number"
        },
        "cash_back_amount" : {
          "type" : "number"
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "is_pre_auth" : {
          "type" : "boolean",
          "default" : false
        },
        "pin" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "card_options" : {
          "$ref" : "#/definitions/card_options"
        },
        "card_acceptor" : {
          "$ref" : "#/definitions/card_acceptor_model"
        },
        "transaction_options" : {
          "$ref" : "#/definitions/transaction_options"
        }
      },
      "xml" : {
        "name" : "auth_request_model"
      }
    },
    "card_response" : {
      "type" : "object",
      "required" : [ "barcode", "card_product_token", "created_time", "expiration", "expiration_time", "fulfillment_status", "last_four", "last_modified_time", "pan", "pin_is_set", "state", "state_reason", "token", "user_token" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "token" : {
          "type" : "string",
          "description" : "36 char max"
        },
        "user_token" : {
          "type" : "string",
          "description" : "36 char max"
        },
        "card_product_token" : {
          "type" : "string",
          "description" : "36 char max"
        },
        "last_four" : {
          "type" : "string",
          "enum" : [ "true", "false" ]
        },
        "pan" : {
          "type" : "string"
        },
        "expiration" : {
          "type" : "string"
        },
        "expiration_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "cvv_number" : {
          "type" : "string"
        },
        "chip_cvv_number" : {
          "type" : "string"
        },
        "barcode" : {
          "type" : "string"
        },
        "pin_is_set" : {
          "type" : "boolean",
          "default" : false
        },
        "state" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "SUSPENDED", "TERMINATED", "UNSUPPORTED", "UNACTIVATED" ]
        },
        "state_reason" : {
          "type" : "string"
        },
        "fulfillment_status" : {
          "type" : "string",
          "enum" : [ "ISSUED", "ORDERED", "REORDERED", "REJECTED", "SHIPPED", "DELIVERED", "DIGITALLY_PRESENTED" ]
        },
        "reissue_pan_from_card_token" : {
          "type" : "string"
        },
        "fulfillment" : {
          "$ref" : "#/definitions/CardFulfillmentResponse"
        },
        "bulk_issuance_token" : {
          "type" : "string"
        },
        "translate_pin_from_card_token" : {
          "type" : "string"
        },
        "activation_actions" : {
          "$ref" : "#/definitions/activation_actions"
        },
        "instrument_type" : {
          "type" : "string",
          "enum" : [ "PHYSICAL_MSR", "PHYSICAL_ICC", "PHYSICAL_CONTACTLESS", "PHYSICAL_COMBO", "VIRTUAL_PAN" ]
        },
        "expedite" : {
          "type" : "boolean",
          "default" : false
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "bulk_issuance_request" : {
      "type" : "object",
      "required" : [ "card_allocation", "card_product_token", "fulfillment", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "fulfillment" : {
          "$ref" : "#/definitions/fulfillment"
        },
        "expedite" : {
          "type" : "boolean",
          "default" : false
        },
        "card_product_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "card_allocation" : {
          "type" : "integer",
          "format" : "int32",
          "maximum" : 50000.0
        },
        "user_association" : {
          "$ref" : "#/definitions/user_association"
        },
        "name_line_1_numeric_postfix" : {
          "type" : "boolean",
          "default" : false
        },
        "name_line_1_random_postfix" : {
          "type" : "boolean",
          "default" : false
        },
        "expiration_offset" : {
          "$ref" : "#/definitions/expiration_offset"
        }
      },
      "xml" : {
        "name" : "bulk_issuance_request"
      }
    },
    "digital_wallet_tokenization" : {
      "type" : "object",
      "properties" : {
        "provisioning_controls" : {
          "$ref" : "#/definitions/provisioning_controls"
        }
      },
      "xml" : {
        "name" : "digital_wallet_tokenization"
      }
    },
    "DirectDepositTransitionRequest" : {
      "type" : "object",
      "required" : [ "channel", "direct_deposit_token", "reason", "state" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "SYSTEM", "PROD_SUPPORT" ]
        },
        "reason" : {
          "type" : "string"
        },
        "idempotentHash" : {
          "type" : "string"
        },
        "direct_deposit_token" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "PENDING", "APPLIED", "REVERSED", "REJECTED" ]
        },
        "reason_code" : {
          "type" : "string",
          "enum" : [ "R01", "R02", "R03", "R04", "R06", "R08", "R09", "R10", "R11", "R14", "R15", "R16", "R17", "R18", "R23", "R24", "R29" ]
        }
      }
    },
    "DisputeModel" : {
      "type" : "object",
      "properties" : {
        "reason" : {
          "type" : "string"
        },
        "case_management_identifier" : {
          "type" : "string"
        }
      }
    },
    "direct_deposit_account_transition_response" : {
      "type" : "object",
      "required" : [ "account_token", "business_token", "channel", "created_time", "reason", "state", "token", "user_token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 36,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 36,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "minLength" : 36,
          "maxLength" : 36
        },
        "account_token" : {
          "type" : "string",
          "minLength" : 36,
          "maxLength" : 36
        },
        "state" : {
          "type" : "string",
          "minLength" : 6,
          "maxLength" : 10
        },
        "channel" : {
          "type" : "string",
          "minLength" : 6,
          "maxLength" : 10
        },
        "reason" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      }
    },
    "gpa_request" : {
      "type" : "object",
      "required" : [ "amount", "currency_code", "funding_source_token" ],
      "properties" : {
        "tags" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "memo" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 99
        },
        "fees" : {
          "type" : "array",
          "xml" : {
            "name" : "fees",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/fee_model"
          }
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number"
        },
        "currency_code" : {
          "type" : "string"
        },
        "funding_source_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "funding_source_address_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "gpa_request"
      }
    },
    "activation_actions" : {
      "type" : "object",
      "properties" : {
        "terminate_reissued_source_card" : {
          "type" : "boolean",
          "default" : true
        },
        "swap_digital_wallet_tokens_from_card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "activation_actions"
      }
    },
    "transaction_metadata" : {
      "type" : "object",
      "properties" : {
        "transaction_category" : {
          "type" : "string",
          "enum" : [ "RETAIL_SALE", "BILL_PAY", "HOTEL", "HEALTH_CARE", "RESTAURANT", "AUTO_RENTAL", "AIRLINE", "PAYMENT", "HOSPITALIZATION_COLLEGE", "PHONE_MAIL_ECOMMERCE", "ATM", "TRANSIT" ]
        },
        "payment_channel" : {
          "type" : "string",
          "enum" : [ "OTHER", "ATM", "ECOMMERCE", "MAIL", "PHONE" ]
        },
        "cross_border_transaction" : {
          "type" : "boolean",
          "default" : false
        },
        "authorization_life_cycle" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_lodging_auto_rental" : {
          "type" : "boolean",
          "default" : false
        },
        "lodging_auto_rental_start_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "transit" : {
          "$ref" : "#/definitions/transit"
        },
        "airline" : {
          "$ref" : "#/definitions/airline"
        }
      }
    },
    "program_funding_source_model" : {
      "allOf" : [ {
        "$ref" : "#/definitions/funding_source_model"
      }, {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "program_funding_source_model"
        }
      } ]
    },
    "transaction_options" : {
      "type" : "object",
      "properties" : {
        "additional_data" : {
          "type" : "string"
        },
        "database_transaction_timeout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "transaction_timeout_threshold_seconds" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pre_auth_time_limit" : {
          "type" : "string"
        },
        "send_expiration_date" : {
          "type" : "boolean",
          "default" : false
        },
        "send_track_data" : {
          "type" : "boolean",
          "default" : false
        },
        "card_expiration_date_yymm" : {
          "type" : "string"
        },
        "encryption_key_id" : {
          "type" : "string"
        },
        "transaction_token" : {
          "type" : "string"
        },
        "is_async" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "fee_request" : {
      "type" : "object",
      "required" : [ "amount", "currency_code", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "amount" : {
          "type" : "number"
        },
        "tags" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "currency_code" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "real_time_assessment" : {
          "$ref" : "#/definitions/RealTimeFeeAssessmentRequest"
        }
      },
      "xml" : {
        "name" : "fee_request"
      }
    },
    "original_data_elements" : {
      "type" : "object",
      "properties" : {
        "mti" : {
          "type" : "string",
          "enum" : [ "0100", "0120", "0200" ]
        },
        "stan" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 12
        },
        "transmission_time" : {
          "type" : "string",
          "description" : "yyyyMMddHHmmss",
          "minLength" : 0,
          "maxLength" : 14
        },
        "acquiring_institution_id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 11
        },
        "network_reference_id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 12
        },
        "forwarding_institution_id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 11
        },
        "transaction_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "original_data_elements"
      }
    },
    "bank_transfer_response_model" : {
      "type" : "object",
      "required" : [ "amount", "funding_source_token", "standard_entry_class_code" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number",
          "minimum" : 0.01
        },
        "fees" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "number"
          }
        },
        "memo" : {
          "type" : "string"
        },
        "funding_source_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "type" : {
          "type" : "string",
          "enum" : [ "PUSH", "PULL" ]
        },
        "currency_code" : {
          "type" : "string",
          "description" : "default = USD"
        },
        "transfer_speed" : {
          "type" : "string",
          "description" : "default = STANDARD",
          "enum" : [ "STANDARD", "SAME_DAY" ]
        },
        "standard_entry_class_code" : {
          "type" : "string",
          "enum" : [ "WEB", "PPD", "CCD" ]
        },
        "status" : {
          "type" : "string",
          "enum" : [ "PENDING", "PROCESSING", "SUBMITTED", "RETURNED", "COMPLETED", "CANCELED" ]
        },
        "transitions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/bank_transfer_transition_response_model"
          }
        },
        "batch_number" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "msa_returns" : {
      "type" : "object",
      "required" : [ "active", "aggregated_balances", "amount", "campaign_token", "created_time", "currency_code", "funding", "last_modified_time", "last_transaction_date", "order_balances", "original_order_token", "reward_amount", "reward_trigger_amount", "transaction_token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "user_token" : {
          "type" : "string"
        },
        "business_token" : {
          "type" : "string"
        },
        "order_balances" : {
          "$ref" : "#/definitions/msa_balances"
        },
        "amount" : {
          "type" : "number"
        },
        "last_transaction_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddThh:mm:ssZ"
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddThh:mm:ssZ"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddThh:mm:ssZ"
        },
        "currency_code" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "reward_amount" : {
          "type" : "number"
        },
        "reward_trigger_amount" : {
          "type" : "number"
        },
        "unloaded_amount" : {
          "type" : "number"
        },
        "campaign_token" : {
          "type" : "string"
        },
        "funding" : {
          "$ref" : "#/definitions/funding"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "aggregated_balances" : {
          "$ref" : "#/definitions/msa_aggregated_balances"
        },
        "original_order_token" : {
          "type" : "string"
        },
        "transaction_token" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "msa_returns"
      }
    },
    "DigitalWalletTokenListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/digital_wallet_token"
          }
        }
      }
    },
    "MoneyModel" : {
      "type" : "object",
      "required" : [ "amount", "currency" ],
      "properties" : {
        "amount" : {
          "type" : "number"
        },
        "currency" : {
          "type" : "string"
        }
      }
    },
    "commando_mode_enables" : {
      "type" : "object",
      "required" : [ "program_funding_source" ],
      "properties" : {
        "program_funding_source" : {
          "type" : "string"
        },
        "velocity_controls" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "auth_controls" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "ignore_card_suspended_state" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "internal_digital_wallet_token" : {
      "type" : "object",
      "properties" : {
        "is_digital_wallet_transaction" : {
          "type" : "boolean",
          "default" : false
        },
        "pan_source" : {
          "type" : "string"
        }
      }
    },
    "CardFulfillmentResponse" : {
      "type" : "object",
      "required" : [ "card_personalization" ],
      "properties" : {
        "shipping" : {
          "$ref" : "#/definitions/ShippingInformationResponse"
        },
        "card_personalization" : {
          "$ref" : "#/definitions/card_personalization"
        },
        "card_fulfillment_reason" : {
          "type" : "string",
          "enum" : [ "NEW", "LOST_STOLEN", "EXPIRED" ]
        }
      }
    },
    "card_security_code_verification" : {
      "type" : "object",
      "required" : [ "response", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "CVV1", "CVV2", "ICVV" ]
        },
        "response" : {
          "$ref" : "#/definitions/response"
        }
      },
      "xml" : {
        "name" : "card_security_code_verification"
      }
    },
    "DirectDepositAccountListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/direct_deposit_account_response"
          }
        }
      }
    },
    "program_reserve_transaction_request" : {
      "type" : "object",
      "required" : [ "amount", "currency_code", "token", "type" ],
      "properties" : {
        "idempotentHash" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "currency_code" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "CREDIT", "DEBIT", "PENDING_CREDIT", "PENDING_DEBIT" ]
        }
      }
    },
    "DirectDepositTransitionListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DirectDepositTransitionResponse"
          }
        }
      }
    },
    "CardHolderNoteListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/cardholder_note_response_model"
          }
        }
      }
    },
    "balance_cache_model" : {
      "type" : "object",
      "required" : [ "account", "balance", "layers", "token", "user_token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "account" : {
          "$ref" : "#/definitions/account_model"
        },
        "balance" : {
          "type" : "number"
        },
        "layers" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "user_token" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "xml" : {
        "name" : "balance_cache_model"
      }
    },
    "device" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "language_code" : {
          "type" : "string"
        },
        "device_id" : {
          "type" : "string"
        },
        "phone_number" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "location" : {
          "type" : "string"
        },
        "ip_address" : {
          "type" : "string"
        }
      }
    },
    "images_carrier_return_window" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "adv_auth_request_model" : {
      "type" : "object",
      "required" : [ "card_options", "card_token", "network" ],
      "properties" : {
        "mti" : {
          "type" : "string",
          "description" : "Default is 0100",
          "enum" : [ "0100", "0120", "0190", "0200", "0220", "0400", "0420", "0620" ]
        },
        "network" : {
          "type" : "string",
          "enum" : [ "MASTERCARD", "DISCOVER", "PULSE", "VISA" ]
        },
        "sub_network" : {
          "type" : "string",
          "description" : "Defaults to VISANET if network is VISA",
          "enum" : [ "VISANET", "VISANETDEBIT", "VISAINTERLINK", "VISAPLUS", "MAESTRO" ]
        },
        "is_router_simulator" : {
          "type" : "boolean",
          "default" : false
        },
        "network_reference_id" : {
          "type" : "string"
        },
        "local_transaction_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ"
        },
        "transaction_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ"
        },
        "settlement_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ"
        },
        "stan" : {
          "type" : "string"
        },
        "rrn" : {
          "type" : "string"
        },
        "processing_code" : {
          "type" : "string"
        },
        "function_code" : {
          "type" : "string"
        },
        "reason_code" : {
          "type" : "string"
        },
        "acquirer_reference_id" : {
          "type" : "string"
        },
        "forwarding_institution_id" : {
          "type" : "string",
          "minLength" : 11,
          "maxLength" : 11
        },
        "local_transaction_amount" : {
          "type" : "number"
        },
        "local_currency_code" : {
          "type" : "string"
        },
        "settlement_amount" : {
          "type" : "number"
        },
        "cardholder_billing_amount" : {
          "type" : "number"
        },
        "cardholder_billing_conversion_rate" : {
          "type" : "number",
          "format" : "double"
        },
        "cardholder_billing_currency" : {
          "type" : "string"
        },
        "settlement_currency_code" : {
          "type" : "string"
        },
        "approval_code" : {
          "type" : "string"
        },
        "network_response" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2
        },
        "stan_padding_length" : {
          "type" : "integer",
          "format" : "int32"
        },
        "acquirer" : {
          "$ref" : "#/definitions/acquirer"
        },
        "card_token" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "cash_back_amount" : {
          "type" : "number"
        },
        "mid" : {
          "type" : "string"
        },
        "pin" : {
          "type" : "string"
        },
        "pos_pan_entry_mode" : {
          "type" : "string",
          "description" : "Default is MAG_STRIPE",
          "enum" : [ "MANUAL", "MAG_STRIPE", "MAG_STRIPE_CONTACTLESS", "CHIP", "CHIP_CONTACTLESS", "BAR_CODE", "OCR", "MICR", "OTHER" ]
        },
        "acquirer_fee_amount" : {
          "type" : "number"
        },
        "stip_reason_code" : {
          "type" : "string"
        },
        "is_recurring" : {
          "type" : "boolean",
          "description" : "Default is false",
          "default" : false
        },
        "network_fees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/network_fee_model"
          }
        },
        "card_acceptor" : {
          "$ref" : "#/definitions/advanced_auth_card_acceptor_model"
        },
        "transaction_options" : {
          "$ref" : "#/definitions/transaction_options"
        },
        "original_data_elements" : {
          "$ref" : "#/definitions/original_data_elements"
        },
        "replacement_amount" : {
          "$ref" : "#/definitions/ReplacementAmount"
        },
        "webhook" : {
          "$ref" : "#/definitions/webhook"
        },
        "digital_wallet_token" : {
          "$ref" : "#/definitions/digital_wallet_token"
        },
        "digital_wallet_token_device_info" : {
          "$ref" : "#/definitions/digital_wallet_token_device"
        },
        "digital_wallet_token_wallet_provider_info" : {
          "$ref" : "#/definitions/digital_wallet_token_wallet_provider"
        },
        "raw_iso_fields" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "cavv_result_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1,
          "enum" : [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D" ]
        },
        "issuer_received_time" : {
          "type" : "string"
        },
        "card_options" : {
          "$ref" : "#/definitions/card_options"
        },
        "poi" : {
          "$ref" : "#/definitions/advanced_auth_poi"
        },
        "is_stip_approval" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "internal_transaction_data_model" : {
      "type" : "object",
      "properties" : {
        "pcode" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "request_amount" : {
          "type" : "number"
        },
        "additional_amount" : {
          "type" : "number"
        },
        "acquirer_fee" : {
          "type" : "number"
        },
        "refid" : {
          "type" : "integer",
          "format" : "int64"
        },
        "ref_itc" : {
          "type" : "string"
        },
        "account2_id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "country" : {
          "type" : "string"
        },
        "currency" : {
          "type" : "string"
        },
        "settlement_currency" : {
          "type" : "string"
        },
        "payment_channel" : {
          "type" : "string"
        },
        "itc" : {
          "type" : "string"
        },
        "processing_code" : {
          "type" : "string"
        },
        "is_track_data_present" : {
          "type" : "boolean",
          "default" : false
        },
        "is_cvv2_present" : {
          "type" : "boolean",
          "default" : false
        },
        "is_icc_present" : {
          "type" : "boolean",
          "default" : false
        },
        "is_pin_present" : {
          "type" : "boolean",
          "default" : false
        },
        "pan_entry_mode" : {
          "type" : "string"
        },
        "is_cardholder_present" : {
          "type" : "boolean",
          "default" : false
        },
        "is_card_present" : {
          "type" : "boolean",
          "default" : false
        },
        "mcc" : {
          "type" : "string"
        },
        "mid" : {
          "type" : "string"
        }
      }
    },
    "MCCGroupListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/mcc_group_model"
          }
        }
      }
    },
    "hold_increase" : {
      "type" : "object",
      "required" : [ "type", "value" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "AMOUNT", "PERCENT", "UP_TO_LIMIT" ],
          "default" : "AMOUNT"
        },
        "value" : {
          "type" : "number"
        }
      },
      "xml" : {
        "name" : "hold_increase"
      }
    },
    "card_validation_response" : {
      "type" : "object",
      "properties" : {
        "card" : {
          "$ref" : "#/definitions/internal_card"
        },
        "response" : {
          "$ref" : "#/definitions/response"
        }
      }
    },
    "control_token_request" : {
      "type" : "object",
      "required" : [ "card_token" ],
      "properties" : {
        "card_token" : {
          "type" : "string",
          "description" : "Token associated with the card",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "control_token_request"
      }
    },
    "campaign_update_model" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "start_date" : {
          "type" : "string",
          "description" : "yyyy-MM-dd"
        },
        "end_date" : {
          "type" : "string",
          "description" : "yyyy-MM-dd"
        },
        "store_tokens" : {
          "type" : "array",
          "description" : "enclose tokens in brackets",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 36,
          "minItems" : 0
        }
      },
      "xml" : {
        "name" : "campaign_update_model"
      }
    },
    "TranLogAttributeRequest" : {
      "type" : "object",
      "required" : [ "attribute_name", "attribute_value", "transaction_token" ],
      "properties" : {
        "transaction_token" : {
          "type" : "string"
        },
        "attribute_name" : {
          "type" : "string",
          "enum" : [ "FUEL_TYPE", "NUM_GALLONS", "PRICE_PER_GALLON", "EARN_CARDHOLDER_REWARD", "TRAN_LIFE_CYCLE", "MULTI_CLEARING_SEQ", "MULTI_CLEARING_FINAL_COMPLETION_ID", "POS_ENTRY_CODE", "PROCESSING_CODE", "INTERCHANGE_RATE_DESCRIPTOR", "TERMINAL_TYPE", "SETTLEMENT_INDICATOR", "CARD_PRESENT", "CARD_HOLDER_PRESENT", "TRAN_ORIGIN", "FIND_ORIGINAL_FINDER", "MANUAL_NOTE", "POST_DATE_MODIFICATION", "CLEARING_RECORD_HASH", "CLEARING_RECORD_FILE_NAME", "CLEARING_RECORD_SEQUENCE_NUMBER", "TOKEN_ELAPSED_TIME_TO_LIVE_FOR_AN_LUK", "TOKEN_COUNT_OF_TRANSACTION_FOR_AN_LUK", "TOKEN_CUMULATIVE_TOTAL_TRANSACTION_AMOUNT_FOR_AN_LUK", "INCREMENTAL_CUMULATIVE_AMOUNT", "FINAL_INCREMENTAL_AUTH", "NETWORK_FEES_MODEL", "ECOMMERCE_SECURITY_LEVEL_INDICATOR", "PAYMENT_CHANNEL", "PAYMENT_INSTRUMENT", "PIN_PRESENT", "TERMINAL_PARTIAL_APPROVAL_CAPABLE", "STIP_REASON_CODE", "IS_RECURRING", "TRANSACTION_INTEGRITY_CLASS", "DYNAMIC_CVV_ATC", "STANDIN_APPROVED_BY", "STANDIN_BY", "ORIGINAL_CURRENCY_CODE", "CARDHOLDER_BILLING_CONVERSION_RATE", "CARDHOLDER_BILLING_CONVERSION_DATE", "IS_IT_STIP_APPROVAL", "ECOMMERCE_AUTHENTICATION_DATA", "CAVV_RESULT_CODE", "NETWORK_TRANSACTION_AMOUNT_DE_4", "NETWORK_SETTLEMENT_AMOUNT_DE_5", "NETWORK_CARDHOLDER_BILLING_AMOUNT_DE_6", "NETWORK_FEE_AMOUNT_DE_28", "NETWORK_CASHBACK_AMOUNT_OTHER_DE_54", "NETWORK_REPLACEMENT_AMOUNT_OTHER_DE_61", "NETWORK_REPLACEMENT_AMOUNT_DE_95", "ADVICE_DETAIL_CODE", "ASYNC_REQUEST_TOKEN", "TXN_MCC", "EXTRA_FIELDS" ]
        },
        "attribute_value" : {
          "type" : "string"
        }
      }
    },
    "InternalGatewayMerchant" : {
      "type" : "object",
      "required" : [ "id", "token" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "token" : {
          "type" : "string"
        }
      }
    },
    "monitor_response" : {
      "type" : "object",
      "properties" : {
        "success" : {
          "type" : "boolean",
          "default" : false
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "errors" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "monitor_response"
      }
    },
    "reset_user_password_email_model" : {
      "type" : "object",
      "required" : [ "email" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        }
      },
      "xml" : {
        "name" : "reset_user_password_email_model"
      }
    },
    "poi" : {
      "type" : "object",
      "properties" : {
        "other" : {
          "$ref" : "#/definitions/other_poi"
        },
        "ecommerce" : {
          "type" : "boolean",
          "default" : true
        },
        "atm" : {
          "type" : "boolean",
          "description" : "Default = false",
          "default" : false
        }
      }
    },
    "card_transition_request" : {
      "type" : "object",
      "required" : [ "card_token", "channel", "state" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "reason" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "reason_code" : {
          "type" : "string",
          "enum" : [ "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21" ]
        },
        "validations" : {
          "$ref" : "#/definitions/ValidationsRequest"
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "IVR", "FRAUD", "ADMIN", "SYSTEM" ]
        },
        "state" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "SUSPENDED", "TERMINATED" ]
        }
      }
    },
    "AuthControlExemptMidsListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/auth_control_exempt_mids_response"
          }
        }
      }
    },
    "network_fee_model" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "ISSUER_FEE", "SWITCH_FEE", "PINDEBIT_ASSOC_FEE", "ACQUIRER_FEE", "INTERCHANGE_FEE", "CUR_CONV_CARDHOLDER_FEE", "CUR_CONV_ISSUER_FEE", "CROSS_BORDER_ISSUER_FEE" ]
        },
        "amount" : {
          "type" : "number"
        },
        "credit_debit" : {
          "type" : "string",
          "description" : "C = credit; D = debit",
          "enum" : [ "C", "D" ]
        }
      },
      "xml" : {
        "name" : "network_fee_model"
      }
    },
    "preceding_transaction" : {
      "type" : "object",
      "properties" : {
        "amount" : {
          "type" : "number",
          "description" : "Amount of the preceding transaction"
        },
        "token" : {
          "type" : "string",
          "description" : "Token of the preceding transaction"
        }
      }
    },
    "gateway_program_funding_source_request" : {
      "type" : "object",
      "required" : [ "basic_auth_password", "basic_auth_username", "name", "url" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "url" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 250
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "basic_auth_username" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "basic_auth_password" : {
          "type" : "string",
          "minLength" : 20,
          "maxLength" : 100
        },
        "timeout_millis" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total timeout in milliseconds for gateway processing",
          "minimum" : 1000.0,
          "maximum" : 7000.0
        },
        "custom_header" : {
          "type" : "object",
          "description" : "Custom headers",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "use_mtls" : {
          "type" : "boolean",
          "description" : "Use MTLS for funding request",
          "default" : false
        }
      },
      "xml" : {
        "name" : "gateway_program_funding_source_request"
      }
    },
    "terminal_model" : {
      "type" : "object",
      "properties" : {
        "tid" : {
          "type" : "string"
        },
        "partial_approval_capable" : {
          "type" : "string"
        },
        "cardholder_presence" : {
          "type" : "string"
        },
        "card_presence" : {
          "type" : "string"
        },
        "channel" : {
          "type" : "string"
        },
        "processing_type" : {
          "type" : "string"
        },
        "pin_present" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "terminal_model"
      }
    },
    "pos" : {
      "type" : "object",
      "properties" : {
        "pan_entry_mode" : {
          "type" : "string",
          "enum" : [ "MANUAL", "MAG_STRIPE", "MAG_STRIPE_CONTACTLESS", "BAR_CODE", "OCR", "MICR", "CHIP", "CHIP_CONTACTLESS", "CHIP_FALLBACK", "OTHER" ]
        },
        "pin_entry_mode" : {
          "type" : "string",
          "enum" : [ "TRUE", "FALSE", "DEFECTIVE" ]
        },
        "terminal_id" : {
          "type" : "string"
        },
        "terminal_attendance" : {
          "type" : "string",
          "enum" : [ "UNSPECIFIED", "ATTENDED", "UNATTENDED", "NO_TERMINAL" ]
        },
        "terminal_location" : {
          "type" : "string",
          "enum" : [ "ON_PREMISE", "OFF_PREMISE_MERCHANT", "OFF_PREMISE_CARDHOLDER", "NO_TERMINAL" ]
        },
        "card_holder_presence" : {
          "type" : "boolean",
          "default" : false
        },
        "cardholder_authentication_method" : {
          "type" : "string",
          "enum" : [ "UNSPECIFIED", "NON_AUTHENTICATED", "SIGNATURE", "PIN", "ID_VERIFIED" ]
        },
        "card_presence" : {
          "type" : "boolean",
          "default" : false
        },
        "terminal_type" : {
          "type" : "string",
          "enum" : [ "AUTO_DISPENSER_WITH_PIN", "SELF_SERVICE", "LIMITED_AMOUNT", "IN_FLIGHT", "ECOMMERCE", "TRANSPONDER" ]
        },
        "card_data_input_capability" : {
          "type" : "string",
          "enum" : [ "NO_TERMINAL", "MAG_STRIPE", "MAG_STRIPE_CONTACTLESS", "MAG_STRIPE_KEY_ENTRY", "CHIP", "CHIP_CONTACTLESS", "CHIP_MAG_STRIPE", "CHIP_MAG_STRIPE_KEY_ENTRY", "KEY_ENTRY", "OCR", "MICR" ]
        },
        "country_code" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string"
        },
        "partial_approval_capable" : {
          "type" : "boolean",
          "default" : false
        },
        "purchase_amount_only" : {
          "type" : "boolean",
          "default" : false
        },
        "is_recurring" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "pos"
      }
    },
    "CreateCacheRequestEntry" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "send_webhook" : {
          "type" : "boolean",
          "default" : false
        },
        "send_tms" : {
          "type" : "boolean",
          "default" : false
        },
        "force_update" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "FulfillmentAddressResponse" : {
      "type" : "object",
      "properties" : {
        "first_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "middle_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "last_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 32
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "postal_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        }
      }
    },
    "push_to_card_disburse_request" : {
      "type" : "object",
      "required" : [ "amount", "currency_code", "payment_instrument_token" ],
      "properties" : {
        "tags" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "memo" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 99
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "currency_code" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number",
          "minimum" : 0.01,
          "maximum" : 50000.0
        },
        "payment_instrument_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      }
    },
    "fulfillment_address_request" : {
      "type" : "object",
      "properties" : {
        "first_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "middle_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "last_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 32
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        },
        "postal_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        }
      },
      "xml" : {
        "name" : "fulfillment_address_request"
      }
    },
    "deposit_account" : {
      "type" : "object",
      "required" : [ "account_number", "routing_number", "token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "user_token" : {
          "type" : "string"
        },
        "business_token" : {
          "type" : "string"
        },
        "account_number" : {
          "type" : "string"
        },
        "routing_number" : {
          "type" : "string"
        },
        "allow_immediate_credit" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "deposit_account"
      }
    },
    "unload_request_model" : {
      "type" : "object",
      "required" : [ "amount", "original_order_token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "original_order_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number"
        },
        "tags" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "memo" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 99
        },
        "funding_source_address_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "unload_request_model"
      }
    },
    "auto_reload_model" : {
      "type" : "object",
      "required" : [ "currency_code", "order_scope" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "funding_source_token" : {
          "type" : "string",
          "description" : "Required when order scope is GPA",
          "minLength" : 1,
          "maxLength" : 36
        },
        "funding_source_address_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "association" : {
          "$ref" : "#/definitions/auto_reload_association"
        },
        "order_scope" : {
          "description" : "either GPA or MSA is required",
          "$ref" : "#/definitions/order_scope"
        },
        "currency_code" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "auto_reload_model"
      }
    },
    "real_time_fee_group" : {
      "type" : "object",
      "required" : [ "active", "name", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "description" : "36 char max"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "name" : {
          "type" : "string",
          "description" : "50 char max"
        },
        "fee_tokens" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "real_time_fee_group"
      }
    },
    "create_caches_request" : {
      "type" : "object",
      "required" : [ "transactions" ],
      "properties" : {
        "transactions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/CreateCacheRequestEntry"
          },
          "maxItems" : 1000,
          "minItems" : 1
        }
      },
      "xml" : {
        "name" : "create_caches_request"
      }
    },
    "cardholder_balances" : {
      "type" : "object",
      "required" : [ "gpa", "links" ],
      "properties" : {
        "gpa" : {
          "$ref" : "#/definitions/cardholder_balance"
        },
        "links" : {
          "type" : "array",
          "xml" : {
            "name" : "links",
            "wrapped" : true
          },
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/link"
          }
        }
      },
      "xml" : {
        "name" : "cardholder_balances"
      }
    },
    "commando_mode_update_request" : {
      "type" : "object",
      "required" : [ "commando_mode_enables", "program_gateway_funding_source_token" ],
      "properties" : {
        "program_gateway_funding_source_token" : {
          "type" : "string"
        },
        "real_time_standin_criteria" : {
          "$ref" : "#/definitions/real_time_standin_criteria"
        },
        "commando_mode_enables" : {
          "$ref" : "#/definitions/commando_mode_enables"
        }
      }
    },
    "reset_user_password_model" : {
      "type" : "object",
      "required" : [ "new_password", "user_token" ],
      "properties" : {
        "user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "new_password" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        }
      },
      "xml" : {
        "name" : "reset_user_password_model"
      }
    },
    "store_response_model" : {
      "type" : "object",
      "required" : [ "address1", "city", "created_time", "last_modified_time", "merchant_token", "mid", "name", "state" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "contact" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "contact_email" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "longitude" : {
          "type" : "number",
          "format" : "float"
        },
        "latitude" : {
          "type" : "number",
          "format" : "float"
        },
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "province" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "postal_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "token" : {
          "type" : "string",
          "description" : "The unique identifier of the merchant",
          "minLength" : 1,
          "maxLength" : 36
        },
        "partial_auth_flag" : {
          "type" : "boolean",
          "description" : "1 char max",
          "default" : true
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "network_mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "merchant_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "partial_approval_capable" : {
          "type" : "boolean",
          "default" : false
        },
        "keyed_auth_cvv_enforced" : {
          "type" : "boolean",
          "default" : false
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "store_response_model"
      }
    },
    "gateway_program_funding_source_response" : {
      "type" : "object",
      "required" : [ "account", "basic_auth_password", "basic_auth_username", "created_time", "custom_header", "last_modified_time", "name", "timeout_millis", "token", "url", "use_mtls", "version" ],
      "properties" : {
        "url" : {
          "type" : "string",
          "description" : "250 char max. Empty string (disabled). Must be HTTPS."
        },
        "version" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "account" : {
          "type" : "string"
        },
        "basic_auth_username" : {
          "type" : "string",
          "description" : "50 char max. Required if URL is present"
        },
        "basic_auth_password" : {
          "type" : "string",
          "description" : "50 char max. Required if URL is present. Minimum 20 chars with upper and lowercase letters, numbers, and symbols"
        },
        "timeout_millis" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total timeout in milliseconds for gateway processing"
        },
        "custom_header" : {
          "type" : "object",
          "description" : "Custom headers to be passed along with request",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "use_mtls" : {
          "type" : "boolean",
          "description" : "Use MTLS for funding request",
          "default" : false
        }
      }
    },
    "merchant_response_model" : {
      "type" : "object",
      "required" : [ "created_time", "last_modified_time", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "contact" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "contact_email" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "longitude" : {
          "type" : "number",
          "format" : "float"
        },
        "latitude" : {
          "type" : "number",
          "format" : "float"
        },
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2
        },
        "province" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "token" : {
          "type" : "string",
          "description" : "The unique identifier of the merchant",
          "minLength" : 1,
          "maxLength" : 36
        },
        "partial_auth_flag" : {
          "type" : "boolean",
          "default" : true
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "merchant_response_model"
      }
    },
    "internal_crypto_key" : {
      "type" : "object",
      "properties" : {
        "network" : {
          "type" : "string"
        },
        "key_type" : {
          "type" : "string"
        },
        "key_value" : {
          "type" : "string"
        },
        "key_indicator" : {
          "type" : "string"
        }
      }
    },
    "ping_response" : {
      "type" : "object",
      "properties" : {
        "success" : {
          "type" : "boolean",
          "default" : false
        },
        "version" : {
          "type" : "string"
        },
        "revision" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "string"
        },
        "env" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "system_components" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/HealthCheckResult"
          }
        }
      },
      "xml" : {
        "name" : "ping_response"
      }
    },
    "program_funding_source_request" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      }
    },
    "clearing_file_response" : {
      "type" : "object",
      "properties" : {
        "clearing_files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/clearing_file"
          }
        }
      },
      "xml" : {
        "name" : "clearing_file_response"
      }
    },
    "accepted_countries_update_model" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "is_whitelist" : {
          "type" : "boolean",
          "default" : false
        },
        "country_codes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "accepted_countries_update_model"
      }
    },
    "fee_transfer_request" : {
      "type" : "object",
      "required" : [ "business_token", "user_token" ],
      "properties" : {
        "tags" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "fees" : {
          "type" : "array",
          "xml" : {
            "name" : "fees",
            "wrapped" : true
          },
          "items" : {
            "$ref" : "#/definitions/fee_model"
          }
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "fee_transfer_request"
      }
    },
    "webhook" : {
      "type" : "object",
      "required" : [ "endpoint", "password", "username" ],
      "properties" : {
        "endpoint" : {
          "type" : "string",
          "description" : "Valid URL",
          "minLength" : 1,
          "maxLength" : 512
        },
        "username" : {
          "type" : "string",
          "description" : "Authentication username"
        },
        "password" : {
          "type" : "string",
          "description" : "Authentication password"
        },
        "secret" : {
          "type" : "string",
          "description" : "Authentication secret"
        }
      },
      "xml" : {
        "name" : "webhook"
      }
    },
    "login_request_model" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "login_request_model"
      }
    },
    "msa_balances" : {
      "type" : "object",
      "required" : [ "available_balance", "balances", "credit_balance", "currency_code", "ledger_balance", "pending_credits" ],
      "properties" : {
        "currency_code" : {
          "type" : "string"
        },
        "ledger_balance" : {
          "type" : "number"
        },
        "available_balance" : {
          "type" : "number"
        },
        "credit_balance" : {
          "type" : "number"
        },
        "pending_credits" : {
          "type" : "number"
        },
        "impacted_amount" : {
          "type" : "number"
        },
        "balances" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/msa_balances"
          }
        }
      },
      "xml" : {
        "name" : "msa_balances"
      }
    },
    "auth_control_update_request" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "association" : {
          "$ref" : "#/definitions/spend_control_association"
        },
        "merchant_scope" : {
          "$ref" : "#/definitions/merchant_scope"
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        }
      },
      "xml" : {
        "name" : "auth_control_update_request"
      }
    },
    "available" : {
      "type" : "object",
      "required" : [ "amount", "uses" ],
      "properties" : {
        "uses" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Uses available",
          "default" : 0
        },
        "amount" : {
          "type" : "number",
          "minimum" : 0.0
        },
        "days_remaining" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Days remaining"
        }
      },
      "xml" : {
        "name" : "available"
      }
    },
    "jit_funding_api" : {
      "type" : "object",
      "required" : [ "amount", "method", "token", "user_token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "method" : {
          "type" : "string",
          "enum" : [ "pgfs.authorization", "pgfs.balanceinquiry", "pgfs.authorization.incremental", "pgfs.authorization.capture", "pgfs.authorization.reversal", "pgfs.auth_plus_capture", "pgfs.refund", "pgfs.force_capture", "pgfs.authorization.capture.chargeback", "pgfs.authorization.capture.chargeback.reversal", "pgfs.pindebit.chargeback", "pgfs.pindebit.chargeback.reversal", "pgfs.dispute.credit", "pgfs.dispute.debit", "pgfs.directdeposit.credit", "pgfs.directdeposit.debit", "pgfs.directdeposit.credit.reversal", "pgfs.directdeposit.debit.reversal", "pgfs.adjustment.credit", "pgfs.adjustment.debit", "pgfs.auth_plus_capture.standin", "pgfs.authorization.standin", "pgfs.network.load", "pgfs.original.credit.authorization", "pgfs.original.credit.auth_plus_capture", "pgfs.refund.authorization", "pgfs.refund.authorization.reversalpgfs.billpayment", "pgfs.billpayment.capture", "pgfs.billpayment.reversal" ]
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "acting_user_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number",
          "minimum" : 0.0
        },
        "memo" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 99
        },
        "tags" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "original_jit_funding_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "incremental_authorization_jit_funding_tokens" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "address_verification" : {
          "$ref" : "#/definitions/jit_address_verification"
        },
        "balances" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/cardholder_balance"
          }
        }
      },
      "xml" : {
        "name" : "jit_funding_api"
      }
    },
    "auto_reload_update_model" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "funding_source_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "funding_source_address_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "association" : {
          "$ref" : "#/definitions/auto_reload_association"
        },
        "order_scope" : {
          "$ref" : "#/definitions/order_scope"
        },
        "currency_code" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "auto_reload_update_model"
      }
    },
    "CalculationScheduleListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/calculation_schedule"
          }
        }
      }
    },
    "acquirer" : {
      "type" : "object",
      "properties" : {
        "institution_country" : {
          "type" : "string"
        },
        "network_international_id" : {
          "type" : "string"
        },
        "institution_id_code" : {
          "type" : "string"
        },
        "retrieval_reference_number" : {
          "type" : "string"
        },
        "system_trace_audit_number" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "acquirer"
      }
    },
    "digital_wallet_token_wallet_provider" : {
      "type" : "object",
      "properties" : {
        "wallet_provider_cardholder_wallet_account_id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 100
        },
        "wallet_provider_risk_assessment" : {
          "type" : "string",
          "enum" : [ "DECISION_GREEN", "DECISION_YELLOW", "DECISION_RED" ]
        },
        "wallet_provider_risk_assessment_version" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "wallet_provider_device_score" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2
        },
        "wallet_provider_account_score" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2
        },
        "wallet_provider_pan_source" : {
          "type" : "string",
          "enum" : [ "ON_FILE", "KEY_ENTERED", "MOBILE_BANKING_APP" ]
        },
        "wallet_provider_reason_code" : {
          "type" : "string"
        },
        "recommendation_reasons" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "cardholder_wallet_account_email" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "digital_wallet_token_wallet_provider"
      }
    },
    "gateway_program_version_update_request" : {
      "type" : "object",
      "required" : [ "version" ],
      "properties" : {
        "version" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 25,
          "enum" : [ "1.0", "2.0" ]
        }
      }
    },
    "DirectDepositTransitionResponse" : {
      "type" : "object",
      "properties" : {
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "IVR", "FRAUD", "ADMIN", "SYSTEM", "NETWORK", "PROD_SUPPORT", "UNSUPPORTED" ]
        },
        "token" : {
          "type" : "string"
        },
        "reason" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "direct_deposit_token" : {
          "type" : "string"
        },
        "transaction_token" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "PENDING", "APPLIED", "REVERSED", "REJECTED" ]
        },
        "reason_code" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "direct_deposit_account_token" : {
          "type" : "string"
        }
      }
    },
    "BusinessIncorporationRequestModel" : {
      "type" : "object",
      "properties" : {
        "is_public" : {
          "type" : "boolean",
          "default" : false
        },
        "stock_symbol" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "state_of_incorporation" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "name_registered_under" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address_registered_under" : {
          "$ref" : "#/definitions/AddressRequestModel"
        },
        "incorporation_type" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255,
          "enum" : [ "LLC", "CORPORATION", "SOLE_PROPRIETORSHIP", "PARTNERSHIP", "COOPERATIVE", "OTHER" ]
        }
      }
    },
    "internal_card_product" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "card_product_config" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "WebhookUpdateCustomHeaderRequest" : {
      "type" : "object",
      "properties" : {
        "custom_header" : {
          "type" : "object",
          "description" : "Custom headers to be passed along with request",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "GPAUnloadListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/gpa_returns"
          }
        }
      }
    },
    "offer_response_model" : {
      "type" : "object",
      "required" : [ "campaign_token", "created_time", "currency_code", "last_modified_time", "name", "purchase_amount", "reward_amount" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "purchase_amount" : {
          "type" : "number"
        },
        "reward_amount" : {
          "type" : "number"
        },
        "reward_trigger_amount" : {
          "type" : "number"
        },
        "campaign_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "currency_code" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "offer_response_model"
      }
    },
    "clearing_file" : {
      "type" : "object",
      "properties" : {
        "network" : {
          "type" : "string",
          "enum" : [ "MARQETA", "DISCOVER", "MASTERCARD", "PULSE", "VISA" ]
        },
        "file" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "clearing_file"
      }
    },
    "jit_funding_programgateway_funding_source" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "funding_source_token" : {
          "type" : "string",
          "description" : "Required if enabled",
          "minLength" : 0,
          "maxLength" : 36
        },
        "refunds_destination" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50,
          "enum" : [ "GATEWAY", "GPA", "WATERFALL" ]
        },
        "always_fund" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "digital_wallet_apple_pay_provision_response" : {
      "type" : "object",
      "required" : [ "activation_data", "card_token", "created_time", "encrypted_pass_data", "ephemeral_public_key", "last_modified_time" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "card_token" : {
          "type" : "string"
        },
        "encrypted_pass_data" : {
          "type" : "string"
        },
        "activation_data" : {
          "type" : "string"
        },
        "ephemeral_public_key" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "digital_wallet_apple_pay_provision_response"
      }
    },
    "avs_controls" : {
      "type" : "object",
      "properties" : {
        "av_messages" : {
          "$ref" : "#/definitions/avs_control_options"
        },
        "auth_messages" : {
          "$ref" : "#/definitions/avs_control_options"
        }
      },
      "xml" : {
        "name" : "avs_controls"
      }
    },
    "chargeback_transition_response" : {
      "type" : "object",
      "required" : [ "channel", "chargeback_token", "created_time", "last_modified_time", "previous_state", "state", "token", "type" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "state" : {
          "type" : "string",
          "enum" : [ "INITIATED", "REPRESENTMENT", "PREARBITRATION", "ARBITRATION", "CASE_WON", "CASE_LOST", "NETWORK_REJECTED", "WITHDRAWN", "WRITTEN_OFF_ISSUER", "WRITTEN_OFF_PROGRAM" ]
        },
        "previous_state" : {
          "type" : "string",
          "enum" : [ "INITIATED", "REPRESENTMENT", "PREARBITRATION", "ARBITRATION", "CASE_WON", "CASE_LOST", "NETWORK_REJECTED", "WITHDRAWN" ]
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "GATEWAY", "GATEWAY_AUTOMATED", "ISSUER", "ISSUER_AUTOMATED" ]
        },
        "chargeback_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "reason" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "transaction_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "initiated", "representment", "prearbitration", "arbitration", "case.won", "case.lost", "network.rejected", "written.off.issuer", "written.off.program" ]
        },
        "amount" : {
          "type" : "number"
        }
      },
      "xml" : {
        "name" : "chargeback_transition_response"
      }
    },
    "access_token_response" : {
      "type" : "object",
      "required" : [ "expires" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "expires" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "application" : {
          "$ref" : "#/definitions/Application"
        },
        "user_token" : {
          "type" : "string"
        },
        "master_roles" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "token_type" : {
          "type" : "string"
        },
        "one_time" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "VelocityControlListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/velocity_control_response"
          }
        }
      }
    },
    "msa_unload_request_model" : {
      "type" : "object",
      "required" : [ "amount", "original_order_token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "original_order_token" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "tags" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "msa_unload_request_model"
      }
    },
    "expiration_offset_with_minimum" : {
      "type" : "object",
      "properties" : {
        "unit" : {
          "type" : "string",
          "description" : "specify if a value is provided; default is YEARS",
          "enum" : [ "YEARS", "MONTHS", "DAYS", "HOURS", "MINUTES", "SECONDS" ]
        },
        "value" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "specify if unit is provided; default is 4"
        },
        "min_offset" : {
          "$ref" : "#/definitions/min_offset"
        }
      },
      "xml" : {
        "name" : "expiration_offset_with_minimum"
      }
    },
    "auth_control_request" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "association" : {
          "$ref" : "#/definitions/spend_control_association"
        },
        "merchant_scope" : {
          "$ref" : "#/definitions/merchant_scope"
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        }
      },
      "xml" : {
        "name" : "auth_control_request"
      }
    },
    "transaction_model" : {
      "type" : "object",
      "required" : [ "acting_user_token", "amount", "identifier", "state", "token", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "gpa.credit", "gpa.credit.pending", "gpa.credit.pending.reversal", "gpa.credit.reversal", "gpa.credit.networkload", "gpa.credit.networkload.reversal", "gpa.debit.networkload", "gpa.debit", "gpa.debit.pending", "gpa.debit.pending.reversal", "gpa.grant", "gpa.credit.issueroperator", "gpa.debit.issueroperator", "gpa.credit.chargeback", "gpa.credit.chargeback.reversal", "gpa.credit.billpayment", "gpa.credit.authorization.billpayment", "gpa.credit.authorization.billpayment.reversal", "msa.credit.pending", "msa.credit.pending.reversal", "msa.credit.reversal", "msa.credit", "msa.debit.pending", "msa.debit.pending.reversal", "msa.debit", "msa.credit.chargeback", "msa.credit.chargeback.reversal", "authorization", "authorization.advice", "authorization.reversal", "authorization.clearing", "authorization.reversal.issuerexpiration", "dispute.credit", "dispute.debit", "authorization.clearing.chargeback", "authorization.clearing.chargeback.reversal", "refund", "pindebit.credit.adjustment", "pindebit.atm.withdrawal", "pindebit.balanceinquiry", "pindebit.cashback", "pindebit", "programreserve.credit", "programreserve.debit", "fee.charge.pending", "fee.charge", "fee.charge.pending.refund", "funds.expire", "reward.earn", "transfer.peer", "transfer.fee", "account.credit", "account.debit", "unknown" ]
        },
        "state" : {
          "type" : "string",
          "enum" : [ "PENDING", "CLEARED", "COMPLETION", "DECLINED", "ERROR", "ALL" ]
        },
        "identifier" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string",
          "readOnly" : true,
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "acting_user_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "card_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "duration" : {
          "type" : "integer",
          "format" : "int32"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "user_transaction_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "settlement_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "request_amount" : {
          "type" : "number"
        },
        "amount" : {
          "type" : "number"
        },
        "cash_back_amount" : {
          "type" : "number"
        },
        "currency_conversion" : {
          "$ref" : "#/definitions/currency_conversion"
        },
        "issuerInterchangeAmount" : {
          "type" : "number"
        },
        "currency_code" : {
          "type" : "string"
        },
        "approval_code" : {
          "type" : "string"
        },
        "response" : {
          "$ref" : "#/definitions/response"
        },
        "preceding_related_transaction_token" : {
          "type" : "string"
        },
        "preceding_transaction" : {
          "$ref" : "#/definitions/preceding_transaction"
        },
        "amount_to_be_released" : {
          "type" : "number"
        },
        "incremental_authorization_transaction_tokens" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "merchant" : {
          "$ref" : "#/definitions/merchant_response_model"
        },
        "store" : {
          "$ref" : "#/definitions/store_response_model"
        },
        "card_acceptor" : {
          "$ref" : "#/definitions/transaction_card_acceptor"
        },
        "gpa" : {
          "$ref" : "#/definitions/cardholder_balance"
        },
        "card" : {
          "$ref" : "#/definitions/card_response"
        },
        "gpa_order_unload" : {
          "$ref" : "#/definitions/gpa_returns"
        },
        "gpa_order" : {
          "$ref" : "#/definitions/gpa_response"
        },
        "program_transfer" : {
          "$ref" : "#/definitions/program_transfer_response"
        },
        "fee_transfer" : {
          "$ref" : "#/definitions/fee_transfer_response"
        },
        "peer_transfer" : {
          "$ref" : "#/definitions/peer_transfer_response"
        },
        "msa_orders" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/msa_order_response"
          }
        },
        "msa_order_unload" : {
          "$ref" : "#/definitions/msa_returns"
        },
        "offer_orders" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/offer_order_response"
          }
        },
        "auto_reload" : {
          "$ref" : "#/definitions/auto_reload_model"
        },
        "direct_deposit" : {
          "$ref" : "#/definitions/DepositDepositResponse"
        },
        "polarity" : {
          "type" : "string",
          "enum" : [ "CREDIT", "DEBIT", "PENDING_CREDIT", "PENDING_DEBIT" ]
        },
        "real_time_fee_group" : {
          "$ref" : "#/definitions/real_time_fee_group"
        },
        "fee" : {
          "$ref" : "#/definitions/fee"
        },
        "chargeback" : {
          "$ref" : "#/definitions/chargeback_response"
        },
        "dispute" : {
          "$ref" : "#/definitions/DisputeModel"
        },
        "network" : {
          "type" : "string"
        },
        "subnetwork" : {
          "type" : "string"
        },
        "acquirer_fee_amount" : {
          "type" : "number"
        },
        "fees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/network_fee_model"
          }
        },
        "digital_wallet_token" : {
          "$ref" : "#/definitions/digital_wallet_token"
        },
        "user" : {
          "$ref" : "#/definitions/cardholder_metadata"
        },
        "business" : {
          "$ref" : "#/definitions/business_metadata"
        },
        "acquirer" : {
          "$ref" : "#/definitions/acquirer"
        },
        "fraud" : {
          "$ref" : "#/definitions/fraud"
        },
        "pos" : {
          "$ref" : "#/definitions/pos"
        },
        "address_verification" : {
          "$ref" : "#/definitions/address_verification_model"
        },
        "card_security_code_verification" : {
          "$ref" : "#/definitions/card_security_code_verification"
        },
        "transaction_metadata" : {
          "$ref" : "#/definitions/transaction_metadata"
        },
        "original_credit" : {
          "$ref" : "#/definitions/original_credit"
        },
        "card_holder_model" : {
          "$ref" : "#/definitions/user_card_holder_response"
        },
        "standin_approved_by" : {
          "type" : "string"
        },
        "standin_by" : {
          "type" : "string"
        },
        "standin_reason" : {
          "type" : "string"
        },
        "network_reference_id" : {
          "type" : "string"
        },
        "acquirer_reference_id" : {
          "type" : "string"
        },
        "cardholder_authentication_data" : {
          "$ref" : "#/definitions/cardholder_authentication_data"
        },
        "transaction_attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "clearing_record_sequence_number" : {
          "type" : "string"
        },
        "issuerReceivedTime" : {
          "type" : "string"
        },
        "issuerPaymentNode" : {
          "type" : "string"
        },
        "program" : {
          "$ref" : "#/definitions/program"
        }
      }
    },
    "internal_address_verification_request" : {
      "type" : "object",
      "properties" : {
        "compressed" : {
          "type" : "boolean",
          "default" : false
        },
        "address" : {
          "type" : "string",
          "description" : "cardholder address"
        },
        "city" : {
          "type" : "string",
          "description" : "cardholder city"
        },
        "state" : {
          "type" : "string",
          "description" : "cardholder state"
        },
        "country" : {
          "type" : "string",
          "description" : "cardholder country"
        },
        "postalcode" : {
          "type" : "string",
          "description" : "cardholder postalcode"
        },
        "is_compressed" : {
          "type" : "boolean",
          "default" : false
        },
        "cardholder_name" : {
          "type" : "string"
        },
        "config_provider_type" : {
          "type" : "string",
          "enum" : [ "AUTH", "DWT", "AV" ]
        }
      }
    },
    "provisioning_controls" : {
      "type" : "object",
      "properties" : {
        "manual_entry" : {
          "$ref" : "#/definitions/manual_entry"
        },
        "wallet_provider_card_on_file" : {
          "$ref" : "#/definitions/wallet_provider_card_on_file"
        },
        "in_app_provisioning" : {
          "$ref" : "#/definitions/in_app_provisioning"
        }
      },
      "xml" : {
        "name" : "provisioning_controls"
      }
    },
    "direct_deposit_funding_source_model" : {
      "allOf" : [ {
        "$ref" : "#/definitions/funding_source_model"
      }, {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "direct_deposit_funding_source_model"
        }
      } ]
    },
    "campaign_response_model" : {
      "type" : "object",
      "required" : [ "active", "created_time", "last_modified_time", "name", "token" ],
      "properties" : {
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "store_tokens" : {
          "type" : "array",
          "description" : "Enclose tokens in brackets",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 36,
          "minItems" : 0
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "campaign_response_model"
      }
    },
    "KYCSubmitAnswersRequestModel" : {
      "type" : "object",
      "required" : [ "answers" ],
      "properties" : {
        "answers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/kyc_answer"
          }
        }
      }
    },
    "PushToCardDisburseListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/push_to_card_disbursement_response"
          }
        }
      }
    },
    "kyc_answer" : {
      "type" : "object",
      "properties" : {
        "answer" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "kyc_answer"
      }
    },
    "offer_order_response" : {
      "type" : "object",
      "required" : [ "created_time", "last_modified_time", "last_transaction_date", "order_aggregated_balances", "order_balances", "token" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "user_token" : {
          "type" : "string"
        },
        "business_token" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "order_balances" : {
          "$ref" : "#/definitions/offer_order_balances"
        },
        "order_aggregated_balances" : {
          "$ref" : "#/definitions/offer_order_aggregated_balances"
        },
        "funding" : {
          "$ref" : "#/definitions/funding"
        },
        "offer" : {
          "$ref" : "#/definitions/offer_model"
        },
        "last_transaction_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddThh:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "offer_order_response"
      }
    },
    "VelocityControlCheckResponse" : {
      "type" : "object",
      "properties" : {
        "velocity_control_check_request" : {
          "$ref" : "#/definitions/velocity_control_check_request"
        },
        "velocity_check_name" : {
          "type" : "string"
        },
        "balance" : {
          "type" : "number"
        },
        "response" : {
          "$ref" : "#/definitions/response"
        },
        "context" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "caches" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VelocityCache"
          }
        }
      }
    },
    "wallet_provider_card_on_file" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "address_verification" : {
          "$ref" : "#/definitions/digital_wallet_token_address_verification"
        }
      },
      "xml" : {
        "name" : "wallet_provider_card_on_file"
      }
    },
    "fee_detail" : {
      "type" : "object",
      "required" : [ "fee", "token", "transaction_token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "description" : "36 char max",
          "minLength" : 1,
          "maxLength" : 36
        },
        "memo" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 99
        },
        "tags" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "transaction_token" : {
          "type" : "string"
        },
        "fee" : {
          "$ref" : "#/definitions/fee"
        }
      },
      "xml" : {
        "name" : "fee_detail"
      }
    },
    "account_model" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "pattern" : "\\d+"
        },
        "code" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "account_model"
      }
    },
    "fraud_stream_request" : {
      "type" : "object",
      "properties" : {
        "program" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "GPA_CREDIT_PENDING", "GPA_CREDIT_PENDING_REVERSAL", "GPA_CREDIT_REVERSAL", "GPA_CREDIT", "GPA_DEBIT", "GPA_DEBIT_PENDING_REVERSAL", "GPA_DEBIT_REVERSAL", "GPA_GRANT", "GPA_CREDIT_NETWORK_LOAD", "GPA_CREDIT_NETWORK_LOAD_CLEARING", "GPA_CREDIT_NETWORK_LOAD_REVERSAL", "GPA_DEBIT_NETWORK_LOAD", "GPA_DEBIT_NETWORK_LOAD_CLEARING", "GPA_DEBIT_NETWORK_LOAD_REVERSAL", "ORIGINAL_CREDIT_AUTH", "ORIGINAL_CREDIT_AUTH_CLEARING", "ORIGINAL_CREDIT_AUTH_REVERSAL", "ORIGINAL_CREDIT_AUTH_CAPTURE", "ORIGINAL_CREDIT_AUTH_CAPTURE_REVERSAL", "GPA_CREDIT_ISSUER_OPERATOR", "GPA_DEBIT_ISSUER_OPERATOR", "GPA_DEBIT_AUTHORIZATION", "GPA_CREDIT_AUTHORIZATION", "GPA_CREDIT_AUTHORIZATION_REVERSAL", "GPA_CREDIT_CHARGEBACK", "GPA_CREDIT_CHARGEBACK_REVERSAL", "GPA_CREDIT_BILLPAYMENT", "GPA_CREDIT_AUTHORIZATION_BILLPAYMENT", "GPA_CREDIT_AUTHORIZATION_BILLPAYMENT_REVERSAL", "MSA_CREDIT_PENDING", "MSA_CREDIT_PENDING_REVERSAL", "MSA_CREDIT_REVERSAL", "MSA_CREDIT", "MSA_DEBIT_REVERSAL", "MSA_DEBIT_PENDING_REVERSAL", "MSA_DEBIT", "MSA_CREDIT_AUTHORIZATION", "MSA_CREDIT_AUTHORIZATION_REVERSAL", "MSA_CREDIT_CHARGEBACK", "MSA_CREDIT_CHARGEBACK_REVERSAL", "AUTHORIZATION", "AUTHORIZATION_INCREMENTAL", "AUTHORIZATION_ADVICE", "AUTHORIZATION_REVERSAL", "AUTHORIZATION_CASHBACK", "AUTHORIZATION_QUASI_CASH", "AUTHORIZATION_ATM_WITHDRAWAL", "AUTHORIZATION_CLEARING", "AUTHORIZATION_CLEARING_NETWORK_FEE", "AUTHORIZATION_CLEARING_REPRESENTMENT", "AUTHORIZATION_REVERSAL_ISSUER_EXPIRATION", "DISPUTE_CREDIT", "DISPUTE_DEBIT", "AUTHORIZATION_CLEARING_CHARGEBACK", "AUTHORIZATION_CLEARING_CHARGEBACK_REVERSAL", "AUTHORIZATION_CLEARING_CHARGEBACK_COMPLETED", "AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_CREDIT", "AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_DEBIT", "AUTHORIZATION_CLEARING_CHARGEBACK_WRITEOFF", "AUTHORIZATION_CLEARING_CASHBACK", "AUTHORIZATION_CLEARING_QUASI_CASH", "AUTHORIZATION_CLEARING_ATM_WITHDRAWAL", "ACCOUNT_FUNDING_AUTHORIZATION", "ACCOUNT_FUNDING_AUTHORIZATION_CLEARING", "ACCOUNT_FUNDING_PLUS_AUTH_CAPTURE", "ACCOUNT_FUNDING_AUTHORIZATION_REVERSAL", "ACCOUNT_FUNDING_PLUS_AUTH_CAPTURE_REVERSAL", "BALANCE_INQUIRY", "REFUND", "PIN_DEBIT_CREDIT_ADJUSTMENT", "PIN_DEBIT_DEBIT_ADJUSTMENT", "PIN_DEBIT_ATM_WITHDRAWAL", "PIN_DEBIT_QUASI_CASH", "PIN_DEBIT_BALANCE_INQUIRY", "PIN_DEBIT_CASHBACK", "PIN_DEBIT_CHECK_AVS", "PIN_DEBIT_FINANCIAL_DEPOSIT", "PIN_DEBIT_FINANCIAL_REFUND", "PIN_DEBIT_FINANCIAL_REVERSAL", "PIN_DEBIT_FINANCIAL_REFUND_REVERSAL", "PIN_DEBIT_TRANSFER", "PIN_DEBIT", "PIN_DEBIT_REPRESENTMENT", "PIN_DEBIT_AUTHORIZATION", "PIN_DEBIT_AUTHORIZATION_CLEARING", "PIN_DEBIT_AUTHORIZATION_REVERSAL", "PIN_DEBIT_AUTHORIZATION_REVERSAL_ISSUER_EXPIRATION", "PIN_DEBIT_CHARGEBACK", "PIN_DEBIT_CHARGEBACK_REVERSAL", "PIN_DEBIT_CHARGEBACK_COMPLETED", "PIN_DEBIT_CHARGEBACK_PROVISIONAL_CREDIT", "PIN_DEBIT_CHARGEBACK_PROVISIONAL_DEBIT", "PIN_DEBIT_CHARGEBACK_WRITEOFF", "DIRECT_DEPOSIT_CREDIT", "DIRECT_DEPOSIT_DEBIT", "DIRECT_DEPOSIT_CREDIT_PENDING", "DIRECT_DEPOSIT_DEBIT_PENDING", "DIRECT_DEPOSIT_CREDIT_REJECT", "DIRECT_DEPOSIT_DEBIT_REJECT", "DIRECT_DEPOSIT_CREDIT_PENDING_REVERSAL", "DIRECT_DEPOSIT_DEBIT_PENDING_REVERSAL", "DIRECT_DEPOSIT_CREDIT_REVERSAL", "DIRECT_DEPOSIT_DEBIT_REVERSAL", "FEE_CHARGE_PENDING", "FEE_CHARGE", "FEE_CHARGE_REFUND", "FUNDS_EXPIRE", "PROGRAMRESERVE_CREDIT", "PROGRAMRESERVE_DEBIT", "REWARD_EARN", "TRANSFER_PEER", "TRANSFER_FEE", "ACCOUNT_CREDIT", "ACCOUNT_DEBIT", "TRANSFER_PROGRAM", "AUTHORIZATION_STANDIN", "PIN_DEBIT_STANDIN", "TOKEN_ACTIVATION_REQUEST", "TOKEN_ADVICE", "PTC_DEBIT", "PTC_PENDING_DB", "PTC_DB_REV", "BILLPAYMENT", "BILLPAYMENT_CLEARING", "BILLPAYMENT_REVERSAL", "RETURN_AUTHORIZATION", "RETURN_AUTHORIZATION_CLEARING", "RETURN_AUTHORIZATION_REVERSAL", "ACH_PUSH_PENDING", "ACH_PULL_PENDING", "ACH_PUSH", "ACH_PULL", "UNKNOWN" ]
        },
        "state" : {
          "type" : "string",
          "enum" : [ "PENDING", "CLEARED", "COMPLETION", "DECLINED", "ERROR", "ALL" ]
        },
        "itc" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "user_token" : {
          "type" : "string"
        },
        "acting_user_token" : {
          "type" : "string"
        },
        "card_token" : {
          "type" : "string"
        },
        "user_transaction_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "request_amount" : {
          "type" : "number"
        },
        "amount" : {
          "type" : "number"
        },
        "currency_code" : {
          "type" : "string"
        },
        "network" : {
          "type" : "string"
        },
        "account_risk_score" : {
          "type" : "string"
        },
        "account_risk_score_reason_code" : {
          "type" : "string"
        },
        "transaction_risk_score" : {
          "type" : "integer",
          "format" : "int32"
        },
        "transaction_risk_score_reason_code" : {
          "type" : "string"
        },
        "card_acceptor" : {
          "$ref" : "#/definitions/transaction_card_acceptor_view_model_v1"
        },
        "address_verification" : {
          "$ref" : "#/definitions/address_verification_model"
        }
      }
    },
    "ImagesCarrier" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "message_1" : {
          "type" : "string"
        }
      }
    },
    "bin_pan_issued_count_response" : {
      "type" : "object",
      "required" : [ "bin_hash", "count", "created_time", "last_modified_time" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "bin_hash" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "max_cards" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "xml" : {
        "name" : "bin_pan_issued_count_response"
      }
    },
    "campaign_model" : {
      "type" : "object",
      "required" : [ "active", "name", "token" ],
      "properties" : {
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "store_tokens" : {
          "type" : "array",
          "description" : "Enclose tokens in brackets",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 36,
          "minItems" : 0
        }
      },
      "xml" : {
        "name" : "campaign_model"
      }
    },
    "auto_commando_mode_program_funding_source_response" : {
      "type" : "object",
      "required" : [ "account", "created_time", "last_modified_time", "name", "token" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "account" : {
          "type" : "string"
        }
      }
    },
    "DigitalWalletTokenRequestorMapModel" : {
      "type" : "object",
      "required" : [ "digital_wallet_token_requestor_id", "digital_wallet_token_requestor_name", "network" ],
      "properties" : {
        "network" : {
          "type" : "string"
        },
        "digital_wallet_token_requestor_id" : {
          "type" : "string"
        },
        "digital_wallet_token_requestor_name" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        }
      }
    },
    "FileProcessingResponse" : {
      "type" : "object",
      "required" : [ "created_time", "file_process_status", "file_process_type", "last_modified_time", "source_file", "token" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "file_process_type" : {
          "type" : "string",
          "enum" : [ "MASTERCARD_CLEARING", "VISA_CLEARING", "PULSE_CLEARING", "DISCOVER_CLEARING" ]
        },
        "source_file" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 512
        },
        "archive_file" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 512
        },
        "file_process_status" : {
          "type" : "string",
          "enum" : [ "QUEUED", "STARTED", "COMPLETED", "ERROR", "TERMINATED" ]
        }
      }
    },
    "ACHReturn" : {
      "type" : "object",
      "properties" : {
        "amount" : {
          "type" : "number"
        },
        "date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "dateInitiated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "orderId" : {
          "type" : "string"
        },
        "reasonCode" : {
          "type" : "string"
        },
        "directDeposit" : {
          "type" : "boolean",
          "default" : false
        },
        "achType" : {
          "type" : "string"
        }
      }
    },
    "push_to_card_disbursement_response" : {
      "type" : "object",
      "required" : [ "created_time", "last_modified_time" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "status" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "currency_code" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "payment_instrument_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "tags" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "memo" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 99
        }
      }
    },
    "InternalGatewayLog" : {
      "type" : "object",
      "required" : [ "funding_source" ],
      "properties" : {
        "gatewayMerchant" : {
          "$ref" : "#/definitions/InternalGatewayMerchant"
        },
        "orderId" : {
          "type" : "string"
        },
        "requestMethod" : {
          "type" : "string"
        },
        "gatewayRequestMethod" : {
          "type" : "string"
        },
        "responseCode" : {
          "type" : "string"
        },
        "responseSubCode" : {
          "type" : "string"
        },
        "responseReasonCode" : {
          "type" : "string"
        },
        "responseMessage" : {
          "type" : "string"
        },
        "gatewayResponseMessage" : {
          "type" : "string"
        },
        "responseStatus" : {
          "type" : "string"
        },
        "gatewayTransactionId" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "apiDuration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "gatewayDuration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "memo" : {
          "type" : "string"
        },
        "gatewayVersion" : {
          "type" : "string"
        },
        "funding_source" : {
          "$ref" : "#/definitions/internal_funding_source"
        },
        "internalUser" : {
          "$ref" : "#/definitions/internal_user"
        }
      }
    },
    "expiration_offset" : {
      "type" : "object",
      "properties" : {
        "unit" : {
          "type" : "string",
          "description" : "specify if a value is provided; default is card product expiration offset unit",
          "enum" : [ "YEARS", "MONTHS", "DAYS", "HOURS", "MINUTES", "SECONDS" ]
        },
        "value" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "specify if unit is provided; default is card product expiration offset value"
        }
      },
      "xml" : {
        "name" : "expiration_offset"
      }
    },
    "BusinessIncorporationResponseModel" : {
      "type" : "object",
      "properties" : {
        "is_public" : {
          "type" : "boolean",
          "default" : false
        },
        "stock_symbol" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "state_of_incorporation" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "name_registered_under" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address_registered_under" : {
          "$ref" : "#/definitions/AddressResponseModel"
        },
        "incorporation_type" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255,
          "enum" : [ "LLC", "CORPORATION", "SOLE_PROPRIETORSHIP", "PARTNERSHIP", "OTHER" ]
        }
      }
    },
    "advanced_auth_other_poi" : {
      "type" : "object",
      "properties" : {
        "card_presence" : {
          "type" : "boolean",
          "default" : false
        },
        "cardholder_presence" : {
          "type" : "boolean",
          "default" : false
        },
        "partial_approval_capable" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "advanced_auth_other_poi"
      }
    },
    "CardholderAddressResponse" : {
      "type" : "object",
      "required" : [ "address_1", "city", "country", "created_time", "first_name", "last_modified_time", "last_name", "postal_code", "state", "token", "zip" ],
      "properties" : {
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is not specified",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is not specified",
          "minLength" : 1,
          "maxLength" : 36
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "first_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "last_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "address_1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address_2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "postal_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 40
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "is_default_address" : {
          "type" : "boolean",
          "default" : false
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      }
    },
    "BusinessTransitionResponse" : {
      "type" : "object",
      "required" : [ "channel", "reason_code", "status", "token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "UNVERIFIED", "LIMITED", "ACTIVE", "SUSPENDED", "CLOSED" ]
        },
        "reason_code" : {
          "type" : "string",
          "enum" : [ "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21" ]
        },
        "reason" : {
          "type" : "string"
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "IVR", "FRAUD", "ADMIN", "SYSTEM" ]
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "business_token" : {
          "type" : "string"
        }
      }
    },
    "program" : {
      "type" : "object",
      "required" : [ "long_code", "program_id", "short_code" ],
      "properties" : {
        "program_id" : {
          "type" : "string"
        },
        "short_code" : {
          "type" : "string"
        },
        "long_code" : {
          "type" : "string"
        }
      }
    },
    "ChargebackTransitionListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/chargeback_transition_response"
          }
        }
      }
    },
    "fee_update_request" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "amount" : {
          "type" : "number"
        },
        "tags" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "currency_code" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "real_time_assessment" : {
          "$ref" : "#/definitions/RealTimeFeeAssessmentRequest"
        }
      },
      "xml" : {
        "name" : "fee_update_request"
      }
    },
    "issuer" : {
      "type" : "object",
      "properties" : {
        "success" : {
          "type" : "boolean",
          "default" : false
        },
        "fraud_score" : {
          "type" : "integer",
          "format" : "int32"
        },
        "fraud_rating" : {
          "type" : "string"
        },
        "rule_violations" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "fraud_score_reasons" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "recommended_action" : {
          "type" : "string"
        },
        "model" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "CampaignListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/campaign_response_model"
          }
        }
      }
    },
    "card_product_config" : {
      "type" : "object",
      "properties" : {
        "poi" : {
          "$ref" : "#/definitions/poi"
        },
        "transaction_controls" : {
          "$ref" : "#/definitions/transaction_controls"
        },
        "selective_auth" : {
          "$ref" : "#/definitions/selective_auth"
        },
        "special" : {
          "$ref" : "#/definitions/special"
        },
        "card_life_cycle" : {
          "$ref" : "#/definitions/card_life_cycle"
        },
        "clearing_and_settlement" : {
          "$ref" : "#/definitions/clearing_and_settlement"
        },
        "jit_funding" : {
          "$ref" : "#/definitions/jit_funding"
        },
        "digital_wallet_tokenization" : {
          "$ref" : "#/definitions/digital_wallet_tokenization"
        },
        "fulfillment" : {
          "$ref" : "#/definitions/card_product_fulfillment"
        }
      }
    },
    "auth_user" : {
      "type" : "object",
      "required" : [ "active", "created_time", "last_modified_time", "roles", "token", "username" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "description" : "36 char max"
        },
        "username" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "roles" : {
          "type" : "array",
          "xml" : {
            "name" : "roles",
            "wrapped" : true
          },
          "description" : "An array of roles",
          "items" : {
            "type" : "string"
          }
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "auth_user"
      }
    },
    "BulkCardOrderListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/bulk_issuance_response"
          }
        }
      }
    },
    "account_holder_group_response" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string",
          "description" : "36 char max"
        },
        "name" : {
          "type" : "string",
          "description" : "40 char max"
        },
        "config" : {
          "$ref" : "#/definitions/account_holder_group_config"
        }
      },
      "xml" : {
        "name" : "account_holder_group_response"
      }
    },
    "cron_job_info" : {
      "type" : "object",
      "properties" : {
        "schedule" : {
          "type" : "string"
        },
        "group" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "class" : {
          "type" : "string"
        },
        "is_running" : {
          "type" : "boolean",
          "default" : false
        },
        "last_run_duration_millis" : {
          "type" : "integer",
          "format" : "int64"
        },
        "next_run" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_run" : {
          "type" : "string",
          "format" : "date-time"
        },
        "timezone" : {
          "type" : "string"
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "xml" : {
        "name" : "cron_job_info"
      }
    },
    "original_credit" : {
      "type" : "object",
      "properties" : {
        "transaction_type" : {
          "type" : "string",
          "enum" : [ "ACCOUNT_TO_ACCOUNT", "PERSON_TO_PERSON", "WALLET_TRANSFER", "MONEY_TRANSFER_BY_BANK", "BUSINESS_TO_BUSINESS", "DISBURSEMENT", "GOVERNMENT_DISBURSEMENT", "GAMBLING_PAYOUT", "LOYALTY", "MERCHANT_DISBURSEMENT", "ONLINE_GAMBLING_PAYOUT", "PENSION_DISBURSEMENT", "PREPAID_LOADS", "CARD_BILL_PAYMENT", "BILL_PAYMENT", "CASH_CLAIM", "CASH_IN", "CASH_OUT", "MOBILE_AIR_TIME_PAYMENT", "MONEY_TRANSFER_BY_MERCHANT", "FACE_TO_FACE_MERCHANT_PAYMENT", "GOVERNMENT_PAYMENT", "PAYMENTS_GOODS_SERVICES", "FUNDS_TRANSFER" ]
        },
        "funding_source" : {
          "type" : "string",
          "enum" : [ "CREDIT", "DEBIT", "PREPAID", "DEPOSIT_ACCOUNT", "CASH", "MOBILE_MONEY_ACCOUNT", "NON_VISA_CREDIT" ]
        },
        "sender_name" : {
          "type" : "string"
        },
        "sender_address" : {
          "type" : "string"
        },
        "sender_city" : {
          "type" : "string"
        },
        "sender_state" : {
          "type" : "string"
        },
        "sender_country" : {
          "type" : "string"
        },
        "screening_score" : {
          "type" : "string"
        }
      }
    },
    "program_transfer_type_reponse" : {
      "type" : "object",
      "required" : [ "program_funding_source_token", "token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "program_funding_source_token" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "xml" : {
        "name" : "program_transfer_type_reponse"
      }
    },
    "images" : {
      "type" : "object",
      "properties" : {
        "card" : {
          "$ref" : "#/definitions/images_card"
        },
        "carrier" : {
          "$ref" : "#/definitions/ImagesCarrier"
        },
        "signature" : {
          "$ref" : "#/definitions/images_signature"
        },
        "carrier_return_window" : {
          "$ref" : "#/definitions/images_carrier_return_window"
        }
      }
    },
    "CardholderAddressListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CardholderAddressResponse"
          }
        }
      }
    },
    "webhook_ping_model" : {
      "type" : "object",
      "required" : [ "pings" ],
      "properties" : {
        "pings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/echo_ping_request"
          }
        }
      },
      "xml" : {
        "name" : "webhook_ping_model"
      }
    },
    "AndroidPushTokenRequestAddress" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "address1" : {
          "type" : "string"
        },
        "address2" : {
          "type" : "string"
        },
        "city" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string"
        },
        "postal_code" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string"
        }
      }
    },
    "digital_wallet_token" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "card_token" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "state_reason" : {
          "type" : "string"
        },
        "fulfillment_status" : {
          "type" : "string"
        },
        "issuer_eligibility_decision" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "token_service_provider" : {
          "$ref" : "#/definitions/token_service_provider"
        },
        "device" : {
          "$ref" : "#/definitions/device"
        },
        "wallet_provider_profile" : {
          "$ref" : "#/definitions/wallet_provider_profile"
        },
        "address_verification" : {
          "$ref" : "#/definitions/address_verification"
        },
        "user" : {
          "$ref" : "#/definitions/user_card_holder_response"
        }
      },
      "xml" : {
        "name" : "digital_wallet_token"
      }
    },
    "offer_order_aggregated_balances" : {
      "type" : "object",
      "required" : [ "available_balance", "balances", "credit_balance", "currency_code", "ledger_balance", "pending_credits" ],
      "properties" : {
        "currency_code" : {
          "type" : "string"
        },
        "ledger_balance" : {
          "type" : "number"
        },
        "available_balance" : {
          "type" : "number"
        },
        "credit_balance" : {
          "type" : "number"
        },
        "pending_credits" : {
          "type" : "number"
        },
        "impacted_amount" : {
          "type" : "number"
        },
        "balances" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/offer_order_aggregated_balances"
          }
        }
      },
      "xml" : {
        "name" : "offer_order_aggregated_balances"
      }
    },
    "InternalTransactionResponse" : {
      "type" : "object",
      "properties" : {
        "response" : {
          "$ref" : "#/definitions/response"
        }
      }
    },
    "ssn_response_model" : {
      "type" : "object",
      "properties" : {
        "ssn" : {
          "type" : "string"
        },
        "tin" : {
          "type" : "string"
        },
        "sin" : {
          "type" : "string"
        },
        "nin" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "ssn_response_model"
      }
    },
    "auth_user_request" : {
      "type" : "object",
      "required" : [ "password", "roles", "username" ],
      "properties" : {
        "password" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 32
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "roles" : {
          "type" : "array",
          "xml" : {
            "name" : "roles",
            "wrapped" : true
          },
          "description" : "An array of roles",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        },
        "username" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 100
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "auth_user_request"
      }
    },
    "merchant_scope" : {
      "type" : "object",
      "properties" : {
        "mid" : {
          "type" : "string",
          "description" : "36 char max"
        },
        "mcc" : {
          "type" : "string",
          "description" : "4 char max"
        },
        "mcc_group" : {
          "type" : "string",
          "description" : "36 char max"
        }
      },
      "xml" : {
        "name" : "merchant_scope"
      }
    },
    "result_code" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "result_code"
      }
    },
    "offer_update_model" : {
      "type" : "object",
      "properties" : {
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "name" : {
          "type" : "string",
          "description" : "255 char max"
        },
        "start_date" : {
          "type" : "string",
          "description" : "yyyy-MM-ddThh:mm:ssZ"
        },
        "end_date" : {
          "type" : "string",
          "description" : "yyyy-MM-ddThh:mm:ssZ"
        }
      },
      "xml" : {
        "name" : "offer_update_model"
      }
    },
    "client_access_token_response" : {
      "type" : "object",
      "required" : [ "created", "expires" ],
      "properties" : {
        "application" : {
          "$ref" : "#/definitions/Application"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "expires" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "token" : {
          "type" : "string"
        },
        "card_token" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "client_access_token_response"
      }
    },
    "gateway_clearing_request" : {
      "type" : "object",
      "required" : [ "original_transaction_token" ],
      "properties" : {
        "original_transaction_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 20
        },
        "amount" : {
          "type" : "number",
          "description" : "Default is same amount as original GPA pending credit",
          "minimum" : 0.01,
          "maximum" : 9999.99
        }
      },
      "xml" : {
        "name" : "gateway_clearing_request"
      }
    },
    "address_verification_source" : {
      "type" : "object",
      "properties" : {
        "on_file" : {
          "$ref" : "#/definitions/avs_information"
        },
        "response" : {
          "$ref" : "#/definitions/response"
        }
      },
      "xml" : {
        "name" : "address_verification_source"
      }
    },
    "FundingAccountListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/funding_account_response_model"
          }
        }
      }
    },
    "chargeback_funding_source_model" : {
      "allOf" : [ {
        "$ref" : "#/definitions/funding_source_model"
      }, {
        "type" : "object",
        "required" : [ "credit", "name" ],
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "credit" : {
            "type" : "boolean",
            "default" : false
          }
        },
        "xml" : {
          "name" : "chargeback_funding_source_model"
        }
      } ]
    },
    "auth_user_update_request" : {
      "type" : "object",
      "properties" : {
        "password" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 32
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "roles" : {
          "type" : "array",
          "xml" : {
            "name" : "roles",
            "wrapped" : true
          },
          "description" : "An array of roles",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 1
        }
      },
      "xml" : {
        "name" : "auth_user_update_request"
      }
    },
    "program_reserve_account_balance" : {
      "type" : "object",
      "properties" : {
        "currency_code" : {
          "type" : "string"
        },
        "ledger_balance" : {
          "type" : "number"
        },
        "available_balance" : {
          "type" : "number"
        },
        "credit_balance" : {
          "type" : "number"
        },
        "pending_credits" : {
          "type" : "number"
        },
        "balances" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/program_reserve_account_balance"
          }
        }
      },
      "xml" : {
        "name" : "program_reserve_account_balance"
      }
    },
    "webhook_config_model" : {
      "type" : "object",
      "required" : [ "basic_auth_password", "basic_auth_username", "url" ],
      "properties" : {
        "url" : {
          "type" : "string",
          "description" : "Must be HTTPS",
          "minLength" : 1,
          "maxLength" : 255
        },
        "secret" : {
          "type" : "string",
          "description" : "Must contain upper and lowercase letters, numbers, and symbols",
          "minLength" : 20,
          "maxLength" : 50
        },
        "basic_auth_username" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "basic_auth_password" : {
          "type" : "string",
          "description" : "Required if URL is present; must contain upper and lowercase letters, numbers, and symbols",
          "minLength" : 20,
          "maxLength" : 50
        },
        "custom_header" : {
          "type" : "object",
          "description" : "Custom headers to be passed along with request",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "use_mtls" : {
          "type" : "boolean",
          "description" : "Use MTLS for webhook",
          "default" : false
        }
      }
    },
    "token_service_provider" : {
      "type" : "object",
      "required" : [ "pan_reference_id" ],
      "properties" : {
        "token_reference_id" : {
          "type" : "string"
        },
        "pan_reference_id" : {
          "type" : "string",
          "description" : "50 char max"
        },
        "correlation_id" : {
          "type" : "string"
        },
        "token_requestor_id" : {
          "type" : "string"
        },
        "token_requestor_name" : {
          "type" : "string"
        },
        "token_type" : {
          "type" : "string"
        },
        "token_pan" : {
          "type" : "string"
        },
        "token_expiration" : {
          "type" : "string"
        },
        "token_score" : {
          "type" : "string"
        },
        "token_assurance_level" : {
          "type" : "string"
        },
        "token_eligibility_decision" : {
          "type" : "string"
        }
      }
    },
    "currency_conversion" : {
      "type" : "object",
      "properties" : {
        "network" : {
          "$ref" : "#/definitions/network"
        }
      },
      "xml" : {
        "name" : "currency_conversion"
      }
    },
    "KYCQuestion" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "question" : {
          "type" : "string"
        },
        "answers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "auto_reload_association" : {
      "type" : "object",
      "properties" : {
        "card_product_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "auto_reload_association"
      }
    },
    "update_system_health" : {
      "type" : "object",
      "required" : [ "force_unavailable" ],
      "properties" : {
        "force_unavailable" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "ValidationsResponse" : {
      "type" : "object",
      "required" : [ "user" ],
      "properties" : {
        "user" : {
          "$ref" : "#/definitions/UserValidationResponse"
        }
      }
    },
    "velocity_control_update_request" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "association" : {
          "$ref" : "#/definitions/spend_control_association"
        },
        "merchant_scope" : {
          "$ref" : "#/definitions/merchant_scope"
        },
        "usage_limit" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : -1.0
        },
        "approvals_only" : {
          "type" : "boolean",
          "default" : false
        },
        "include_purchases" : {
          "type" : "boolean",
          "default" : false
        },
        "include_withdrawals" : {
          "type" : "boolean",
          "default" : false
        },
        "include_transfers" : {
          "type" : "boolean",
          "default" : false
        },
        "include_cashback" : {
          "type" : "boolean",
          "default" : false
        },
        "include_credits" : {
          "type" : "boolean",
          "default" : false
        },
        "currency_code" : {
          "type" : "string"
        },
        "amount_limit" : {
          "type" : "number",
          "minimum" : 0.0
        },
        "velocity_window" : {
          "type" : "string",
          "enum" : [ "DAY", "WEEK", "MONTH", "QUARTER", "YEAR", "LIFETIME", "TRANSACTION" ]
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "velocity_control_update_request"
      }
    },
    "RealTimeFeeAssessmentRequest" : {
      "type" : "object",
      "properties" : {
        "transaction_type" : {
          "type" : "string",
          "enum" : [ "authorization", "pindebit.atm.withdrawal", "pindebit" ]
        },
        "international_enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "domestic_enabled" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "deposit_account_update_request" : {
      "type" : "object",
      "properties" : {
        "allow_immediate_credit" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "deposit_account_update_request"
      }
    },
    "real_time_standin_criteria" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "include_connection_errors" : {
          "type" : "boolean",
          "default" : false
        },
        "include_response_timeouts" : {
          "type" : "boolean",
          "default" : false
        },
        "include_application_errors" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "images_card" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "thermal_color" : {
          "type" : "string"
        }
      }
    },
    "funding" : {
      "type" : "object",
      "required" : [ "source" ],
      "properties" : {
        "amount" : {
          "type" : "number"
        },
        "source" : {
          "$ref" : "#/definitions/funding_source_model"
        },
        "source_address" : {
          "$ref" : "#/definitions/CardholderAddressResponse"
        },
        "gateway_log" : {
          "$ref" : "#/definitions/gateway_log_model"
        }
      },
      "xml" : {
        "name" : "funding"
      }
    },
    "AddressResponseModel" : {
      "type" : "object",
      "properties" : {
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 35
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 35
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 35
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 35
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        },
        "postal_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        }
      }
    },
    "orignalcredit_request_model" : {
      "type" : "object",
      "required" : [ "amount", "card_token", "mid", "type" ],
      "properties" : {
        "amount" : {
          "type" : "number"
        },
        "card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "screening_score" : {
          "type" : "string"
        },
        "card_acceptor" : {
          "$ref" : "#/definitions/card_acceptor_model"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "account_to_account", "person_to_person", "prepaid", "wallet_transfer", "money_transfer_by_bank", "business_to_business", "disbursement", "government_disbursement", "gambling_payout", "loyalty", "merchant_disbursement", "online_gambling_payout", "pension_disbursement", "prepaid_loads", "card_bill_payment", "bill_payment", "cash_claim", "cash_in", "cash_out", "mobile_air_time_payment", "money_transfer_by_merchant", "face_to_face_merchant_payment", "government_payment", "payments_goods_services" ]
        },
        "sender_data" : {
          "$ref" : "#/definitions/OriginalCreditSenderData"
        },
        "webhook" : {
          "$ref" : "#/definitions/webhook"
        }
      }
    },
    "CardProductListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/card_product_response"
          }
        }
      }
    },
    "InternalDigitalWallet" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "token" : {
          "type" : "string"
        },
        "card" : {
          "$ref" : "#/definitions/internal_card"
        },
        "state" : {
          "type" : "string"
        },
        "state_reason" : {
          "type" : "string"
        },
        "fulfillment_status" : {
          "type" : "string"
        },
        "issuer_eligibility_decision" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "token_service_provider" : {
          "$ref" : "#/definitions/token_service_provider"
        },
        "device" : {
          "$ref" : "#/definitions/device"
        },
        "wallet_provider_profile" : {
          "$ref" : "#/definitions/wallet_provider_profile"
        },
        "address_verification" : {
          "$ref" : "#/definitions/address_verification"
        },
        "response" : {
          "$ref" : "#/definitions/response"
        }
      }
    },
    "program_reserve_transaction_response" : {
      "type" : "object",
      "required" : [ "created_time", "last_modified_time" ],
      "properties" : {
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "token" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "currency_code" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "string"
        },
        "transaction_token" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "CREDIT", "DEBIT", "PENDING_CREDIT", "PENDING_DEBIT" ]
        },
        "state" : {
          "type" : "string",
          "enum" : [ "PENDING", "COMPLETE" ]
        }
      }
    },
    "internal_account" : {
      "type" : "object",
      "required" : [ "code", "id", "subclass" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "code" : {
          "type" : "string"
        },
        "subclass" : {
          "type" : "string"
        },
        "final_account" : {
          "type" : "boolean",
          "default" : false
        },
        "cardholder_account" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "BusinessProprietorRequestModel" : {
      "type" : "object",
      "properties" : {
        "first_name" : {
          "type" : "string"
        },
        "middle_name" : {
          "type" : "string"
        },
        "last_name" : {
          "type" : "string"
        },
        "alternative_names" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "home" : {
          "$ref" : "#/definitions/AddressRequestModel"
        },
        "ssn" : {
          "type" : "string"
        },
        "dob" : {
          "type" : "string",
          "format" : "date-time"
        },
        "phone" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "identifications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdentificationRequestModel"
          }
        }
      }
    },
    "UserCardHolderUpdateModel" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "notes" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "ip_address" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 39
        },
        "password" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "account_holder_group_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "identifications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdentificationRequestModel"
          }
        },
        "honorific" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "gender" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1,
          "enum" : [ "F", "M" ]
        },
        "first_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "middle_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "last_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "email" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255
        },
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "birth_date" : {
          "type" : "string"
        },
        "corporate_card_holder" : {
          "type" : "boolean",
          "default" : false
        },
        "ssn" : {
          "type" : "string"
        },
        "passport_number" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "passport_expiration_date" : {
          "type" : "string"
        },
        "id_card_number" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "id_card_expiration_date" : {
          "type" : "string"
        },
        "nationality" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "company" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "parent_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "uses_parent_account" : {
          "type" : "boolean",
          "description" : "Default is false",
          "default" : false
        },
        "postal_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        }
      }
    },
    "card_metadata" : {
      "type" : "object",
      "properties" : {
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "card_metadata"
      }
    },
    "fee_model" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "memo" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 99
        },
        "tags" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        }
      },
      "xml" : {
        "name" : "fee_model"
      }
    },
    "funding_request_model" : {
      "type" : "object",
      "required" : [ "amount", "order_number", "user_token" ],
      "properties" : {
        "user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "order_number" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number",
          "minimum" : 0.1
        },
        "funding_source" : {
          "type" : "string",
          "description" : "Payment card or ACH account number"
        },
        "funding_address" : {
          "type" : "string"
        },
        "fundgpadetail" : {
          "type" : "string"
        },
        "order_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "currency_code" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "funding_request_model"
      }
    },
    "token_request" : {
      "type" : "object",
      "required" : [ "account_number", "cvv_number", "exp_date" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "description" : "required if 'business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "required if 'user_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "account_number" : {
          "type" : "string"
        },
        "cvv_number" : {
          "type" : "string",
          "minLength" : 3,
          "maxLength" : 4
        },
        "exp_date" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string"
        },
        "postal_code" : {
          "type" : "string"
        },
        "is_default_account" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "token_request"
      }
    },
    "Authentication" : {
      "type" : "object",
      "properties" : {
        "last_password_update_channel" : {
          "type" : "string",
          "enum" : [ "USER_CHANGE", "USER_RESET" ]
        },
        "last_password_update_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "email_verified" : {
          "type" : "boolean",
          "default" : false
        },
        "email_verified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        }
      }
    },
    "msa" : {
      "type" : "object",
      "required" : [ "campaign_token", "reload_amount", "trigger_amount" ],
      "properties" : {
        "campaign_token" : {
          "type" : "string"
        },
        "trigger_amount" : {
          "type" : "number",
          "minimum" : 0.01
        },
        "reload_amount" : {
          "type" : "number",
          "minimum" : 0.01
        }
      },
      "xml" : {
        "name" : "msa"
      }
    },
    "bank_transfer_request_model" : {
      "type" : "object",
      "required" : [ "amount", "funding_source_token", "standard_entry_class_code" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number",
          "minimum" : 0.01
        },
        "fees" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "number"
          }
        },
        "memo" : {
          "type" : "string"
        },
        "funding_source_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "type" : {
          "type" : "string",
          "enum" : [ "PUSH", "PULL" ]
        },
        "currency_code" : {
          "type" : "string",
          "description" : "default = USD"
        },
        "transfer_speed" : {
          "type" : "string",
          "description" : "default = STANDARD",
          "enum" : [ "STANDARD", "SAME_DAY" ]
        },
        "standard_entry_class_code" : {
          "type" : "string",
          "enum" : [ "WEB", "PPD", "CCD" ]
        }
      }
    },
    "ProgramTransferTypeListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/program_transfer_type_reponse"
          }
        }
      }
    },
    "ResultCode" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "mnemonic" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "locales" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ResultCodeInfo"
          }
        }
      }
    },
    "advanced_auth_card_acceptor_model" : {
      "type" : "object",
      "required" : [ "mcc" ],
      "properties" : {
        "mcc" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "address" : {
          "type" : "string"
        },
        "city" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "zip" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        },
        "tid" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "advanced_auth_card_acceptor_model"
      }
    },
    "msa_aggregated_balances" : {
      "type" : "object",
      "required" : [ "available_balance", "balances", "credit_balance", "currency_code", "ledger_balance", "pending_credits" ],
      "properties" : {
        "currency_code" : {
          "type" : "string"
        },
        "ledger_balance" : {
          "type" : "number"
        },
        "available_balance" : {
          "type" : "number"
        },
        "credit_balance" : {
          "type" : "number"
        },
        "pending_credits" : {
          "type" : "number"
        },
        "impacted_amount" : {
          "type" : "number"
        },
        "balances" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/msa_aggregated_balances"
          }
        }
      },
      "xml" : {
        "name" : "msa_aggregated_balances"
      }
    },
    "BusinessCardHolderUpdateModel" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "notes" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "ip_address" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 39
        },
        "password" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "account_holder_group_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "identifications" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IdentificationRequestModel"
          }
        },
        "business_name_legal" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "business_name_dba" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "office_location" : {
          "$ref" : "#/definitions/AddressRequestModel"
        },
        "in_current_location_since" : {
          "type" : "string",
          "format" : "date-time"
        },
        "website" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "date_established" : {
          "type" : "string",
          "format" : "date-time"
        },
        "general_business_description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "history" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "business_type" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "international_office_locations" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "taxpayer_id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "duns_number" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "primary_contact" : {
          "$ref" : "#/definitions/PrimaryContactInfoModel"
        },
        "incorporation" : {
          "$ref" : "#/definitions/BusinessIncorporationRequestModel"
        },
        "proprietor_or_officer" : {
          "$ref" : "#/definitions/BusinessProprietorRequestModel"
        }
      }
    },
    "card_swap_hash" : {
      "type" : "object",
      "required" : [ "new_card_token", "previous_card_token" ],
      "properties" : {
        "previous_card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "new_card_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      },
      "xml" : {
        "name" : "card_swap_hash"
      }
    },
    "fee" : {
      "type" : "object",
      "required" : [ "active", "amount", "created_time", "currency_code", "last_modified_time", "name", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "description" : "36 char max"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "name" : {
          "type" : "string",
          "description" : "50 char max"
        },
        "amount" : {
          "type" : "number"
        },
        "tags" : {
          "type" : "string",
          "description" : "255 char max"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "yyyy-MM-ddTHH:mm:ssZ"
        },
        "currency_code" : {
          "type" : "string"
        },
        "real_time_assessment" : {
          "$ref" : "#/definitions/real_time_fee_assessment"
        }
      },
      "xml" : {
        "name" : "fee"
      }
    },
    "advanced_auth_poi" : {
      "type" : "object",
      "properties" : {
        "other" : {
          "$ref" : "#/definitions/advanced_auth_other_poi"
        },
        "ecommerce" : {
          "type" : "boolean",
          "default" : false
        },
        "atm" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "xml" : {
        "name" : "advanced_auth_poi"
      }
    },
    "commando_mode_nested_transition" : {
      "type" : "object",
      "required" : [ "channel", "commando_enabled" ],
      "properties" : {
        "commando_enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "reason" : {
          "type" : "string"
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "SYSTEM" ]
        },
        "username" : {
          "type" : "string"
        }
      }
    },
    "internal_card" : {
      "type" : "object",
      "required" : [ "card_product", "id", "last_four", "token", "user" ],
      "properties" : {
        "hash" : {
          "type" : "string"
        },
        "kid" : {
          "type" : "string"
        },
        "secureData" : {
          "type" : "string"
        },
        "serviceCode" : {
          "type" : "string"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "token" : {
          "type" : "string"
        },
        "user" : {
          "$ref" : "#/definitions/internal_user"
        },
        "card_product" : {
          "$ref" : "#/definitions/internal_card_product"
        },
        "last_four" : {
          "type" : "string"
        },
        "expiration_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "ACTIVE", "SUSPENDED", "TERMINATED", "UNSUPPORTED", "UNACTIVATED" ]
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "card_pin_block" : {
          "type" : "string"
        }
      }
    },
    "direct_deposit_account_request" : {
      "type" : "object",
      "properties" : {
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "type" : {
          "type" : "string",
          "enum" : [ "DEPOSIT_ACCOUNT", "CHECKING", "SAVINGS" ]
        },
        "allow_immediate_credit" : {
          "type" : "boolean",
          "default" : false
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        }
      }
    },
    "InternalGPAOrder" : {
      "type" : "object",
      "required" : [ "amount", "token" ],
      "properties" : {
        "tags" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "currency" : {
          "type" : "string"
        },
        "fundingSource" : {
          "$ref" : "#/definitions/internal_funding_source"
        },
        "originalOrderId" : {
          "type" : "string"
        },
        "orderType" : {
          "type" : "string"
        },
        "orderState" : {
          "type" : "string",
          "enum" : [ "PENDING", "REVERSED", "CLEARED", "COMPLETION", "DECLINED", "ERROR" ]
        },
        "responseCode" : {
          "type" : "string"
        },
        "responseMemo" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "Pagination" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "AutoCommandoModeResponse" : {
      "type" : "object",
      "properties" : {
        "response" : {
          "$ref" : "#/definitions/response"
        },
        "commando_mode_response" : {
          "$ref" : "#/definitions/commando_mode_response"
        },
        "velocity_control_response" : {
          "$ref" : "#/definitions/VelocityControlCheckResponse"
        },
        "program_funding_source_response" : {
          "$ref" : "#/definitions/auto_commando_mode_program_funding_source_response"
        }
      }
    },
    "auth_control_response" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "association" : {
          "$ref" : "#/definitions/spend_control_association"
        },
        "merchant_scope" : {
          "$ref" : "#/definitions/merchant_scope"
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        }
      },
      "xml" : {
        "name" : "auth_control_response"
      }
    },
    "in_app_provisioning" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "address_verification" : {
          "$ref" : "#/definitions/digital_wallet_token_address_verification"
        }
      },
      "xml" : {
        "name" : "in_app_provisioning"
      }
    },
    "track1_data" : {
      "type" : "object",
      "properties" : {
        "cvv" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 3
        },
        "atc" : {
          "type" : "string",
          "minLength" : 4,
          "maxLength" : 4
        }
      }
    },
    "internal_user_transaction_request" : {
      "type" : "object",
      "required" : [ "card", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "card" : {
          "$ref" : "#/definitions/internal_card"
        },
        "digitalWalletToken" : {
          "type" : "string"
        },
        "transaction" : {
          "$ref" : "#/definitions/transaction"
        }
      }
    },
    "auth_control_exempt_mids_response" : {
      "type" : "object",
      "required" : [ "mid", "name" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "association" : {
          "$ref" : "#/definitions/spend_control_association"
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "end_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_updated" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "funding_tranlog" : {
      "type" : "object",
      "required" : [ "gatewayLog", "gpaorder", "network", "node", "subNetwork", "token", "transactionType" ],
      "properties" : {
        "returnedBalances" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "string"
        },
        "transactionType" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "ref_transaction" : {
          "$ref" : "#/definitions/internal_authorization_transaction"
        },
        "node" : {
          "type" : "string"
        },
        "network" : {
          "type" : "string"
        },
        "subNetwork" : {
          "type" : "string"
        },
        "mid" : {
          "type" : "string"
        },
        "tid" : {
          "type" : "string"
        },
        "stan" : {
          "type" : "string"
        },
        "ca_name" : {
          "type" : "string"
        },
        "ca_street" : {
          "type" : "string"
        },
        "ca_zip" : {
          "type" : "string"
        },
        "ca_city" : {
          "type" : "string"
        },
        "ca_region" : {
          "type" : "string"
        },
        "ca_country" : {
          "type" : "string"
        },
        "functionCode" : {
          "type" : "string"
        },
        "reasonCode" : {
          "type" : "string"
        },
        "responseCode" : {
          "type" : "string"
        },
        "approvalNumber" : {
          "type" : "string"
        },
        "displayMessage" : {
          "type" : "string"
        },
        "date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "transmissionDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "localTransactionDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "captureDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "settlementDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "itc" : {
          "type" : "string"
        },
        "irc" : {
          "type" : "string"
        },
        "currencyCode" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "additionalAmount" : {
          "type" : "number"
        },
        "acquirerFee" : {
          "type" : "number"
        },
        "issuerFee" : {
          "type" : "number"
        },
        "rc" : {
          "type" : "string"
        },
        "extrc" : {
          "type" : "string"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cardholder" : {
          "$ref" : "#/definitions/internal_user"
        },
        "actingCardholder" : {
          "$ref" : "#/definitions/internal_user"
        },
        "card" : {
          "$ref" : "#/definitions/internal_card"
        },
        "account" : {
          "$ref" : "#/definitions/internal_account"
        },
        "account2" : {
          "$ref" : "#/definitions/internal_account"
        },
        "mcc" : {
          "type" : "string"
        },
        "networkReferenceId" : {
          "type" : "string"
        },
        "acquirerReferenceId" : {
          "type" : "string"
        },
        "retrievalReferenceNumber" : {
          "type" : "string"
        },
        "forwardingInstId" : {
          "type" : "string"
        },
        "networkMid" : {
          "type" : "string"
        },
        "requestAmount" : {
          "type" : "number"
        },
        "transactionState" : {
          "type" : "string",
          "enum" : [ "PENDING", "CLEARED", "COMPLETION", "DECLINED", "ERROR", "ALL" ]
        },
        "remoteHost" : {
          "type" : "string"
        },
        "responseAmount" : {
          "type" : "number"
        },
        "expirationTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "incomingNetworkRequestITC" : {
          "type" : "string"
        },
        "digital_wallet_token" : {
          "$ref" : "#/definitions/InternalDigitalWallet"
        },
        "tranlogAttributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "payload" : {
          "$ref" : "#/definitions/transaction_model"
        },
        "layer" : {
          "type" : "integer",
          "format" : "int32"
        },
        "transaction_name" : {
          "type" : "string"
        },
        "originator" : {
          "type" : "string"
        },
        "acquirer" : {
          "type" : "string"
        },
        "gpaorder" : {
          "$ref" : "#/definitions/InternalGPAOrder"
        },
        "gatewayLog" : {
          "$ref" : "#/definitions/InternalGatewayLog"
        }
      }
    },
    "kyc_request" : {
      "type" : "object",
      "properties" : {
        "notes" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is null",
          "minLength" : 1,
          "maxLength" : 36
        },
        "manual_override" : {
          "type" : "boolean",
          "default" : false
        },
        "reference_id" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 32
        }
      }
    },
    "DirectDepositRequest" : {
      "type" : "object",
      "required" : [ "account_number", "amount", "settlement_date", "type" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "amount" : {
          "type" : "number"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "CREDIT", "DEBIT" ]
        },
        "account_number" : {
          "type" : "string"
        },
        "settlement_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "standard_entry_class_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 3
        },
        "company_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 16
        },
        "company_discretionary_data" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        },
        "company_identification" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "company_entry_description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "individual_identification_number" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 22
        },
        "individual_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 35
        }
      }
    },
    "internal_find_original_response" : {
      "type" : "object",
      "properties" : {
        "originalFound" : {
          "type" : "boolean",
          "default" : false
        },
        "original_tranlog" : {
          "$ref" : "#/definitions/internal_authorization_transaction"
        },
        "funding_transaction" : {
          "$ref" : "#/definitions/funding_tranlog"
        },
        "finder_name" : {
          "type" : "string"
        },
        "context" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "response" : {
          "$ref" : "#/definitions/response"
        }
      }
    },
    "fraud" : {
      "type" : "object",
      "properties" : {
        "merchant_risk_score" : {
          "type" : "integer",
          "format" : "int32"
        },
        "merchant_risk_score_reason_code" : {
          "type" : "string"
        },
        "transaction_risk_score" : {
          "type" : "integer",
          "format" : "int32"
        },
        "transaction_risk_score_reason_code" : {
          "type" : "string"
        },
        "transaction_risk_score_reason_description" : {
          "type" : "string"
        },
        "account_risk_score" : {
          "type" : "string"
        },
        "account_risk_score_reason_code" : {
          "type" : "string"
        },
        "issuerFraudModel" : {
          "$ref" : "#/definitions/issuer"
        }
      }
    },
    "order_scope" : {
      "type" : "object",
      "properties" : {
        "gpa" : {
          "$ref" : "#/definitions/gpa"
        },
        "msa" : {
          "$ref" : "#/definitions/msa"
        }
      },
      "xml" : {
        "name" : "order_scope"
      }
    },
    "merchant_update_model" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "contact" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "contact_email" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "longitude" : {
          "type" : "number",
          "format" : "float"
        },
        "latitude" : {
          "type" : "number",
          "format" : "float"
        },
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "province" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "partial_auth_flag" : {
          "type" : "boolean",
          "description" : "1 char max",
          "default" : true
        }
      },
      "xml" : {
        "name" : "merchant_update_model"
      }
    },
    "program_reserve_deposit_request" : {
      "type" : "object",
      "required" : [ "amount", "currency_code", "token" ],
      "properties" : {
        "idempotentHash" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number"
        },
        "currency_code" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "program_reserve_deposit_request"
      }
    },
    "internal_auth_control_request" : {
      "type" : "object",
      "required" : [ "card", "cardholder", "controls_indicator" ],
      "properties" : {
        "card" : {
          "$ref" : "#/definitions/internal_card"
        },
        "cardholder" : {
          "$ref" : "#/definitions/internal_user"
        },
        "mid" : {
          "type" : "string"
        },
        "mcc" : {
          "type" : "string"
        },
        "mcc_groups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "controls_indicator" : {
          "type" : "string",
          "enum" : [ "LOAD", "SPEND" ]
        }
      }
    },
    "BankTransferListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/bank_transfer_response_model"
          }
        }
      }
    },
    "gateway_log_model" : {
      "type" : "object",
      "required" : [ "message", "order_number", "transaction_id" ],
      "properties" : {
        "order_number" : {
          "type" : "string"
        },
        "transaction_id" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "timed_out" : {
          "type" : "boolean",
          "default" : false
        },
        "response" : {
          "$ref" : "#/definitions/gateway_response"
        }
      },
      "xml" : {
        "name" : "gateway_log_model"
      }
    },
    "UserCardHolderListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/card_holder_model"
          }
        }
      }
    },
    "user_association" : {
      "type" : "object",
      "properties" : {
        "single_inventory_user" : {
          "type" : "boolean",
          "default" : false
        },
        "single_inventory_user_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36,
          "default" : "false"
        }
      },
      "xml" : {
        "name" : "user_association"
      }
    },
    "pan_request" : {
      "type" : "object",
      "required" : [ "pan" ],
      "properties" : {
        "pan" : {
          "type" : "string"
        },
        "cvv_number" : {
          "type" : "string"
        },
        "expiration" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "pan_request"
      }
    },
    "link" : {
      "type" : "object",
      "required" : [ "href", "method", "rel" ],
      "properties" : {
        "rel" : {
          "type" : "string"
        },
        "method" : {
          "type" : "string"
        },
        "href" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "link"
      }
    },
    "bulk_request_model" : {
      "type" : "object",
      "properties" : {
        "user_tokens" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 500,
          "minItems" : 1
        },
        "business_tokens" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 500,
          "minItems" : 1
        },
        "card_tokens" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 500,
          "minItems" : 1
        },
        "kyc_tokens" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 500,
          "minItems" : 1
        },
        "dda_tokens" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 500,
          "minItems" : 1
        },
        "deposit_accounts" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "maxItems" : 500,
          "minItems" : 1
        }
      }
    },
    "manual_entry" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "address_verification" : {
          "$ref" : "#/definitions/digital_wallet_token_address_verification"
        }
      },
      "xml" : {
        "name" : "manual_entry"
      }
    },
    "bank_account_funding_source_model" : {
      "allOf" : [ {
        "$ref" : "#/definitions/funding_source_model"
      }, {
        "type" : "object",
        "required" : [ "account_suffix", "account_type", "name_on_account", "routing_number", "verification_status" ],
        "properties" : {
          "user_token" : {
            "type" : "string",
            "description" : "Required if 'business_token' is null"
          },
          "business_token" : {
            "type" : "string",
            "description" : "Required if 'user_token' is null"
          },
          "account_suffix" : {
            "type" : "string"
          },
          "account_type" : {
            "type" : "string"
          },
          "name_on_account" : {
            "type" : "string"
          },
          "routing_number" : {
            "type" : "string"
          },
          "verification_status" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "bank_account_funding_source_model"
        }
      } ]
    },
    "jit_address_verification" : {
      "type" : "object",
      "properties" : {
        "request" : {
          "$ref" : "#/definitions/avs_information"
        },
        "issuer" : {
          "$ref" : "#/definitions/address_verification_source"
        },
        "gateway" : {
          "$ref" : "#/definitions/address_verification_source"
        }
      },
      "xml" : {
        "name" : "jit_address_verification"
      }
    },
    "IdentificationRequestModel" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "SSN", "TIN", "SIN", "NIN", "PASSPORT_NUMBER", "DRIVERS_LICENSE", "BUSINESS_NUMBER", "BUSINESS_TAX_ID", "TAXPAYER_REFERENCE" ]
        },
        "value" : {
          "type" : "string",
          "readOnly" : true
        },
        "expiration_date" : {
          "type" : "string"
        }
      }
    },
    "network" : {
      "type" : "object",
      "properties" : {
        "original_amount" : {
          "type" : "number"
        },
        "conversion_rate" : {
          "type" : "number"
        },
        "original_currency_code" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "network"
      }
    },
    "CommandoModeTransitionListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/commando_mode_transition_response"
          }
        }
      }
    },
    "ProgramFundingSourceListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/program_funding_source_response"
          }
        }
      }
    },
    "ClearingModel" : {
      "type" : "object",
      "required" : [ "amount", "original_transaction_token" ],
      "properties" : {
        "network_fees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/network_fee_model"
          }
        },
        "webhook" : {
          "$ref" : "#/definitions/webhook"
        },
        "is_refund" : {
          "type" : "boolean",
          "default" : false
        },
        "force_post" : {
          "type" : "boolean",
          "default" : false
        },
        "amount" : {
          "type" : "number"
        },
        "original_transaction_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "mid" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "card_acceptor" : {
          "$ref" : "#/definitions/card_acceptor_model"
        }
      }
    },
    "chargeback_transition_request" : {
      "type" : "object",
      "required" : [ "chargeback_token", "state" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "state" : {
          "type" : "string",
          "enum" : [ "REPRESENTMENT", "PREARBITRATION", "ARBITRATION", "CASE_WON", "CASE_LOST", "WRITTEN_OFF_ISSUER", "WRITTEN_OFF_PROGRAM" ]
        },
        "chargeback_token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "reason" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 1024
        },
        "amount" : {
          "type" : "number",
          "description" : "Representment or prearbitration amount; this is for transitioning to Representment or Prearbitration only",
          "minimum" : 0.01
        }
      },
      "xml" : {
        "name" : "chargeback_transition_request"
      }
    },
    "AddressRequestModel" : {
      "type" : "object",
      "properties" : {
        "address1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 35
        },
        "address2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 35
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 35
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 35
        },
        "zip" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        },
        "country" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "postal_code" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 20
        }
      }
    },
    "TransactionUpdateModel" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "type" : "string",
          "enum" : [ "PENDING", "CLEARED", "COMPLETION", "DECLINED", "ERROR", "ALL" ]
        }
      }
    },
    "echo_ping_response" : {
      "type" : "object",
      "properties" : {
        "success" : {
          "type" : "boolean",
          "default" : false
        },
        "id" : {
          "type" : "string"
        },
        "payload" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "echo_ping_response"
      }
    },
    "CardTransitionListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/card_transition_response"
          }
        }
      }
    },
    "DisputeTransactionRequest" : {
      "type" : "object",
      "required" : [ "pan", "reason", "reference_transaction_token", "token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "pan" : {
          "type" : "string"
        },
        "reference_transaction_token" : {
          "type" : "string"
        },
        "reason" : {
          "type" : "string"
        },
        "cash_amount" : {
          "type" : "number"
        },
        "pending_amount" : {
          "type" : "number"
        },
        "include_acquirer_fees" : {
          "type" : "boolean",
          "default" : false
        },
        "case_management_identifier" : {
          "type" : "string"
        }
      }
    },
    "real_time_fee_group_request" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 50
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "fee_tokens" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "xml" : {
        "name" : "real_time_fee_group_request"
      }
    },
    "cache_error" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "cache_error"
      }
    },
    "Bill Payment Transaction Request" : {
      "type" : "object",
      "required" : [ "amount", "currency", "network_reference_id", "user_token" ],
      "properties" : {
        "amount" : {
          "type" : "number"
        },
        "currency" : {
          "type" : "string"
        },
        "network_reference_id" : {
          "type" : "string"
        },
        "user_token" : {
          "type" : "string"
        }
      }
    },
    "carrier" : {
      "type" : "object",
      "properties" : {
        "template_id" : {
          "type" : "string"
        },
        "logo_file" : {
          "type" : "string"
        },
        "logo_thumbnail_file" : {
          "type" : "string"
        },
        "message_file" : {
          "type" : "string"
        },
        "message_line" : {
          "type" : "string"
        }
      }
    },
    "card_holder_address_model" : {
      "type" : "object",
      "required" : [ "address_1", "city", "country", "first_name", "last_name", "state" ],
      "properties" : {
        "user_token" : {
          "type" : "string",
          "description" : "Required if 'business_token' is not specified",
          "minLength" : 1,
          "maxLength" : 36
        },
        "business_token" : {
          "type" : "string",
          "description" : "Required if 'user_token' is not specified",
          "minLength" : 1,
          "maxLength" : 36
        },
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "first_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "last_name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "address_1" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "address_2" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "city" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 40
        },
        "state" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 2
        },
        "zip" : {
          "type" : "string",
          "description" : "Required if 'postal_code' is not specified",
          "minLength" : 0,
          "maxLength" : 10
        },
        "country" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 40
        },
        "phone" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 255
        },
        "is_default_address" : {
          "type" : "boolean",
          "default" : false
        },
        "active" : {
          "type" : "boolean",
          "default" : true
        },
        "postal_code" : {
          "type" : "string",
          "description" : "Required if 'zip' is not specified",
          "minLength" : 0,
          "maxLength" : 10
        }
      },
      "xml" : {
        "name" : "card_holder_address_model"
      }
    },
    "push_tokenize_request_data" : {
      "type" : "object",
      "properties" : {
        "display_name" : {
          "type" : "string"
        },
        "last_digits" : {
          "type" : "string"
        },
        "network" : {
          "type" : "string"
        },
        "token_service_provider" : {
          "type" : "string"
        },
        "opaque_payment_card" : {
          "type" : "string"
        },
        "user_address" : {
          "$ref" : "#/definitions/AndroidPushTokenRequestAddress"
        }
      },
      "xml" : {
        "name" : "push_tokenize_request_data"
      }
    },
    "internal_network_transaction_request" : {
      "type" : "object",
      "required" : [ "debit", "message", "network", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 36
        },
        "encryption_key_id" : {
          "type" : "string",
          "description" : "Encryption key ID"
        },
        "message" : {
          "type" : "string"
        },
        "network" : {
          "type" : "string"
        },
        "debit" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "UserTransitionRequest" : {
      "type" : "object",
      "required" : [ "channel", "reason_code", "status", "user_token" ],
      "properties" : {
        "idempotentHash" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "UNVERIFIED", "LIMITED", "ACTIVE", "SUSPENDED", "CLOSED" ]
        },
        "reason_code" : {
          "type" : "string",
          "enum" : [ "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21" ]
        },
        "reason" : {
          "type" : "string"
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "IVR", "FRAUD", "ADMIN", "SYSTEM" ]
        },
        "user_token" : {
          "type" : "string"
        }
      }
    },
    "program_gateway_funding_source_model" : {
      "allOf" : [ {
        "$ref" : "#/definitions/funding_source_model"
      }, {
        "type" : "object",
        "properties" : { },
        "xml" : {
          "name" : "program_gateway_funding_source_model"
        }
      } ]
    },
    "response" : {
      "type" : "object",
      "required" : [ "code", "memo" ],
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "memo" : {
          "type" : "string"
        },
        "additional_information" : {
          "type" : "string"
        }
      }
    },
    "bank_transfer_transition_response_model" : {
      "type" : "object",
      "required" : [ "bank_transfer_token", "channel", "status" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "bank_transfer_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "status" : {
          "type" : "string",
          "enum" : [ "PENDING", "PROCESSING", "SUBMITTED", "RETURNED", "COMPLETED", "CANCELED" ]
        },
        "reason" : {
          "type" : "string"
        },
        "channel" : {
          "type" : "string",
          "enum" : [ "API", "SYSTEM" ]
        },
        "batch_number" : {
          "type" : "string"
        },
        "program_reserve_token" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 36
        },
        "transaction_token" : {
          "type" : "string"
        },
        "created_time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_modified_time" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "card_personalization" : {
      "type" : "object",
      "required" : [ "text" ],
      "properties" : {
        "text" : {
          "$ref" : "#/definitions/text"
        },
        "images" : {
          "$ref" : "#/definitions/images"
        },
        "carrier" : {
          "$ref" : "#/definitions/carrier"
        },
        "perso_type" : {
          "type" : "string",
          "enum" : [ "EMBOSS", "LASER", "FLAT" ]
        }
      }
    },
    "fulfillment" : {
      "type" : "object",
      "required" : [ "card_personalization" ],
      "properties" : {
        "shipping" : {
          "$ref" : "#/definitions/shipping"
        },
        "card_personalization" : {
          "$ref" : "#/definitions/card_personalization"
        },
        "card_fulfillment_reason" : {
          "type" : "string",
          "enum" : [ "NEW", "LOST_STOLEN", "EXPIRED" ]
        }
      }
    },
    "KYCListResponse" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "start_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "end_index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "is_more" : {
          "type" : "boolean",
          "default" : false
        },
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/kyc_response"
          }
        }
      }
    },
    "account" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "email_address" : {
          "type" : "string"
        },
        "score" : {
          "type" : "string"
        }
      }
    }
  }
}